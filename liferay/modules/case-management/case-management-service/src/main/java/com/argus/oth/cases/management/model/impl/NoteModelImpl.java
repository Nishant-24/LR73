/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.argus.oth.cases.management.model.impl;

import com.argus.oth.cases.management.model.Note;
import com.argus.oth.cases.management.model.NoteModel;
import com.argus.oth.cases.management.model.NoteSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Note service. Represents a row in the &quot;OTH_Note&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>NoteModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NoteImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NoteImpl
 * @generated
 */
@JSON(strict = true)
public class NoteModelImpl extends BaseModelImpl<Note> implements NoteModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a note model instance should use the <code>Note</code> interface instead.
	 */
	public static final String TABLE_NAME = "OTH_Note";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"noteId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"caseId", Types.BIGINT}, {"externalNoteId", Types.BIGINT},
		{"type_", Types.VARCHAR}, {"noteType", Types.VARCHAR},
		{"text_", Types.VARCHAR}, {"noteCreateDate", Types.TIMESTAMP},
		{"caller", Types.VARCHAR}, {"callee", Types.VARCHAR},
		{"direction", Types.VARCHAR}, {"code_", Types.VARCHAR},
		{"processStatus", Types.VARCHAR}, {"failureDescription", Types.VARCHAR},
		{"userId", Types.BIGINT}, {"noteAuthor", Types.VARCHAR},
		{"rowProcessed", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("noteId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("caseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("externalNoteId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("noteType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("text_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("noteCreateDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("caller", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("callee", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("direction", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("code_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("failureDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("noteAuthor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rowProcessed", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OTH_Note (uuid_ VARCHAR(75) null,noteId LONG not null primary key,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,caseId LONG,externalNoteId LONG,type_ VARCHAR(75) null,noteType VARCHAR(75) null,text_ STRING null,noteCreateDate DATE null,caller VARCHAR(1000) null,callee VARCHAR(1000) null,direction VARCHAR(1000) null,code_ VARCHAR(75) null,processStatus VARCHAR(75) null,failureDescription VARCHAR(75) null,userId LONG,noteAuthor VARCHAR(1000) null,rowProcessed VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table OTH_Note";

	public static final String ORDER_BY_JPQL =
		" ORDER BY note.noteCreateDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OTH_Note.noteCreateDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long CASEID_COLUMN_BITMASK = 1L;

	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	public static final long EXTERNALNOTEID_COLUMN_BITMASK = 4L;

	public static final long GROUPID_COLUMN_BITMASK = 8L;

	public static final long PROCESSSTATUS_COLUMN_BITMASK = 16L;

	public static final long ROWPROCESSED_COLUMN_BITMASK = 32L;

	public static final long UUID_COLUMN_BITMASK = 64L;

	public static final long NOTECREATEDATE_COLUMN_BITMASK = 128L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Note toModel(NoteSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Note model = new NoteImpl();

		model.setUuid(soapModel.getUuid());
		model.setNoteId(soapModel.getNoteId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCaseId(soapModel.getCaseId());
		model.setExternalNoteId(soapModel.getExternalNoteId());
		model.setType(soapModel.getType());
		model.setNoteType(soapModel.getNoteType());
		model.setText(soapModel.getText());
		model.setNoteCreateDate(soapModel.getNoteCreateDate());
		model.setCaller(soapModel.getCaller());
		model.setCallee(soapModel.getCallee());
		model.setDirection(soapModel.getDirection());
		model.setCode(soapModel.getCode());
		model.setProcessStatus(soapModel.getProcessStatus());
		model.setFailureDescription(soapModel.getFailureDescription());
		model.setUserId(soapModel.getUserId());
		model.setNoteAuthor(soapModel.getNoteAuthor());
		model.setRowProcessed(soapModel.getRowProcessed());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Note> toModels(NoteSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Note> models = new ArrayList<Note>(soapModels.length);

		for (NoteSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public NoteModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _noteId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNoteId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _noteId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Note.class;
	}

	@Override
	public String getModelClassName() {
		return Note.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Note, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Note, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Note, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Note)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Note, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Note, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Note)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Note, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Note, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Note>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Note.class.getClassLoader(), Note.class, ModelWrapper.class);

		try {
			Constructor<Note> constructor =
				(Constructor<Note>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Note, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Note, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Note, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Note, Object>>();
		Map<String, BiConsumer<Note, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Note, ?>>();

		attributeGetterFunctions.put("uuid", Note::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Note, String>)Note::setUuid);
		attributeGetterFunctions.put("noteId", Note::getNoteId);
		attributeSetterBiConsumers.put(
			"noteId", (BiConsumer<Note, Long>)Note::setNoteId);
		attributeGetterFunctions.put("groupId", Note::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Note, Long>)Note::setGroupId);
		attributeGetterFunctions.put("companyId", Note::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Note, Long>)Note::setCompanyId);
		attributeGetterFunctions.put("createDate", Note::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Note, Date>)Note::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Note::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Note, Date>)Note::setModifiedDate);
		attributeGetterFunctions.put("caseId", Note::getCaseId);
		attributeSetterBiConsumers.put(
			"caseId", (BiConsumer<Note, Long>)Note::setCaseId);
		attributeGetterFunctions.put("externalNoteId", Note::getExternalNoteId);
		attributeSetterBiConsumers.put(
			"externalNoteId", (BiConsumer<Note, Long>)Note::setExternalNoteId);
		attributeGetterFunctions.put("type", Note::getType);
		attributeSetterBiConsumers.put(
			"type", (BiConsumer<Note, String>)Note::setType);
		attributeGetterFunctions.put("noteType", Note::getNoteType);
		attributeSetterBiConsumers.put(
			"noteType", (BiConsumer<Note, String>)Note::setNoteType);
		attributeGetterFunctions.put("text", Note::getText);
		attributeSetterBiConsumers.put(
			"text", (BiConsumer<Note, String>)Note::setText);
		attributeGetterFunctions.put("noteCreateDate", Note::getNoteCreateDate);
		attributeSetterBiConsumers.put(
			"noteCreateDate", (BiConsumer<Note, Date>)Note::setNoteCreateDate);
		attributeGetterFunctions.put("caller", Note::getCaller);
		attributeSetterBiConsumers.put(
			"caller", (BiConsumer<Note, String>)Note::setCaller);
		attributeGetterFunctions.put("callee", Note::getCallee);
		attributeSetterBiConsumers.put(
			"callee", (BiConsumer<Note, String>)Note::setCallee);
		attributeGetterFunctions.put("direction", Note::getDirection);
		attributeSetterBiConsumers.put(
			"direction", (BiConsumer<Note, String>)Note::setDirection);
		attributeGetterFunctions.put("code", Note::getCode);
		attributeSetterBiConsumers.put(
			"code", (BiConsumer<Note, String>)Note::setCode);
		attributeGetterFunctions.put("processStatus", Note::getProcessStatus);
		attributeSetterBiConsumers.put(
			"processStatus", (BiConsumer<Note, String>)Note::setProcessStatus);
		attributeGetterFunctions.put(
			"failureDescription", Note::getFailureDescription);
		attributeSetterBiConsumers.put(
			"failureDescription",
			(BiConsumer<Note, String>)Note::setFailureDescription);
		attributeGetterFunctions.put("userId", Note::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Note, Long>)Note::setUserId);
		attributeGetterFunctions.put("noteAuthor", Note::getNoteAuthor);
		attributeSetterBiConsumers.put(
			"noteAuthor", (BiConsumer<Note, String>)Note::setNoteAuthor);
		attributeGetterFunctions.put("rowProcessed", Note::getRowProcessed);
		attributeSetterBiConsumers.put(
			"rowProcessed", (BiConsumer<Note, String>)Note::setRowProcessed);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getNoteId() {
		return _noteId;
	}

	@Override
	public void setNoteId(long noteId) {
		_noteId = noteId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCaseId() {
		return _caseId;
	}

	@Override
	public void setCaseId(long caseId) {
		_columnBitmask |= CASEID_COLUMN_BITMASK;

		if (!_setOriginalCaseId) {
			_setOriginalCaseId = true;

			_originalCaseId = _caseId;
		}

		_caseId = caseId;
	}

	public long getOriginalCaseId() {
		return _originalCaseId;
	}

	@JSON
	@Override
	public long getExternalNoteId() {
		return _externalNoteId;
	}

	@Override
	public void setExternalNoteId(long externalNoteId) {
		_columnBitmask |= EXTERNALNOTEID_COLUMN_BITMASK;

		if (!_setOriginalExternalNoteId) {
			_setOriginalExternalNoteId = true;

			_originalExternalNoteId = _externalNoteId;
		}

		_externalNoteId = externalNoteId;
	}

	public long getOriginalExternalNoteId() {
		return _originalExternalNoteId;
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return "";
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	@JSON
	@Override
	public String getNoteType() {
		if (_noteType == null) {
			return "";
		}
		else {
			return _noteType;
		}
	}

	@Override
	public void setNoteType(String noteType) {
		_noteType = noteType;
	}

	@JSON
	@Override
	public String getText() {
		if (_text == null) {
			return "";
		}
		else {
			return _text;
		}
	}

	@Override
	public void setText(String text) {
		_text = text;
	}

	@JSON
	@Override
	public Date getNoteCreateDate() {
		return _noteCreateDate;
	}

	@Override
	public void setNoteCreateDate(Date noteCreateDate) {
		_columnBitmask = -1L;

		_noteCreateDate = noteCreateDate;
	}

	@JSON
	@Override
	public String getCaller() {
		if (_caller == null) {
			return "";
		}
		else {
			return _caller;
		}
	}

	@Override
	public void setCaller(String caller) {
		_caller = caller;
	}

	@JSON
	@Override
	public String getCallee() {
		if (_callee == null) {
			return "";
		}
		else {
			return _callee;
		}
	}

	@Override
	public void setCallee(String callee) {
		_callee = callee;
	}

	@JSON
	@Override
	public String getDirection() {
		if (_direction == null) {
			return "";
		}
		else {
			return _direction;
		}
	}

	@Override
	public void setDirection(String direction) {
		_direction = direction;
	}

	@JSON
	@Override
	public String getCode() {
		if (_code == null) {
			return "";
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_code = code;
	}

	@JSON
	@Override
	public String getProcessStatus() {
		if (_processStatus == null) {
			return "";
		}
		else {
			return _processStatus;
		}
	}

	@Override
	public void setProcessStatus(String processStatus) {
		_columnBitmask |= PROCESSSTATUS_COLUMN_BITMASK;

		if (_originalProcessStatus == null) {
			_originalProcessStatus = _processStatus;
		}

		_processStatus = processStatus;
	}

	public String getOriginalProcessStatus() {
		return GetterUtil.getString(_originalProcessStatus);
	}

	@JSON
	@Override
	public String getFailureDescription() {
		if (_failureDescription == null) {
			return "";
		}
		else {
			return _failureDescription;
		}
	}

	@Override
	public void setFailureDescription(String failureDescription) {
		_failureDescription = failureDescription;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getNoteAuthor() {
		if (_noteAuthor == null) {
			return "";
		}
		else {
			return _noteAuthor;
		}
	}

	@Override
	public void setNoteAuthor(String noteAuthor) {
		_noteAuthor = noteAuthor;
	}

	@JSON
	@Override
	public String getRowProcessed() {
		if (_rowProcessed == null) {
			return "";
		}
		else {
			return _rowProcessed;
		}
	}

	@Override
	public void setRowProcessed(String rowProcessed) {
		_columnBitmask |= ROWPROCESSED_COLUMN_BITMASK;

		if (_originalRowProcessed == null) {
			_originalRowProcessed = _rowProcessed;
		}

		_rowProcessed = rowProcessed;
	}

	public String getOriginalRowProcessed() {
		return GetterUtil.getString(_originalRowProcessed);
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Note.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Note.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Note toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Note>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NoteImpl noteImpl = new NoteImpl();

		noteImpl.setUuid(getUuid());
		noteImpl.setNoteId(getNoteId());
		noteImpl.setGroupId(getGroupId());
		noteImpl.setCompanyId(getCompanyId());
		noteImpl.setCreateDate(getCreateDate());
		noteImpl.setModifiedDate(getModifiedDate());
		noteImpl.setCaseId(getCaseId());
		noteImpl.setExternalNoteId(getExternalNoteId());
		noteImpl.setType(getType());
		noteImpl.setNoteType(getNoteType());
		noteImpl.setText(getText());
		noteImpl.setNoteCreateDate(getNoteCreateDate());
		noteImpl.setCaller(getCaller());
		noteImpl.setCallee(getCallee());
		noteImpl.setDirection(getDirection());
		noteImpl.setCode(getCode());
		noteImpl.setProcessStatus(getProcessStatus());
		noteImpl.setFailureDescription(getFailureDescription());
		noteImpl.setUserId(getUserId());
		noteImpl.setNoteAuthor(getNoteAuthor());
		noteImpl.setRowProcessed(getRowProcessed());

		noteImpl.resetOriginalValues();

		return noteImpl;
	}

	@Override
	public int compareTo(Note note) {
		int value = 0;

		value = DateUtil.compareTo(
			getNoteCreateDate(), note.getNoteCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Note)) {
			return false;
		}

		Note note = (Note)obj;

		long primaryKey = note.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		NoteModelImpl noteModelImpl = this;

		noteModelImpl._originalUuid = noteModelImpl._uuid;

		noteModelImpl._originalGroupId = noteModelImpl._groupId;

		noteModelImpl._setOriginalGroupId = false;

		noteModelImpl._originalCompanyId = noteModelImpl._companyId;

		noteModelImpl._setOriginalCompanyId = false;

		noteModelImpl._setModifiedDate = false;

		noteModelImpl._originalCaseId = noteModelImpl._caseId;

		noteModelImpl._setOriginalCaseId = false;

		noteModelImpl._originalExternalNoteId = noteModelImpl._externalNoteId;

		noteModelImpl._setOriginalExternalNoteId = false;

		noteModelImpl._originalProcessStatus = noteModelImpl._processStatus;

		noteModelImpl._originalRowProcessed = noteModelImpl._rowProcessed;

		noteModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Note> toCacheModel() {
		NoteCacheModel noteCacheModel = new NoteCacheModel();

		noteCacheModel.uuid = getUuid();

		String uuid = noteCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			noteCacheModel.uuid = null;
		}

		noteCacheModel.noteId = getNoteId();

		noteCacheModel.groupId = getGroupId();

		noteCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			noteCacheModel.createDate = createDate.getTime();
		}
		else {
			noteCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			noteCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			noteCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		noteCacheModel.caseId = getCaseId();

		noteCacheModel.externalNoteId = getExternalNoteId();

		noteCacheModel.type = getType();

		String type = noteCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			noteCacheModel.type = null;
		}

		noteCacheModel.noteType = getNoteType();

		String noteType = noteCacheModel.noteType;

		if ((noteType != null) && (noteType.length() == 0)) {
			noteCacheModel.noteType = null;
		}

		noteCacheModel.text = getText();

		String text = noteCacheModel.text;

		if ((text != null) && (text.length() == 0)) {
			noteCacheModel.text = null;
		}

		Date noteCreateDate = getNoteCreateDate();

		if (noteCreateDate != null) {
			noteCacheModel.noteCreateDate = noteCreateDate.getTime();
		}
		else {
			noteCacheModel.noteCreateDate = Long.MIN_VALUE;
		}

		noteCacheModel.caller = getCaller();

		String caller = noteCacheModel.caller;

		if ((caller != null) && (caller.length() == 0)) {
			noteCacheModel.caller = null;
		}

		noteCacheModel.callee = getCallee();

		String callee = noteCacheModel.callee;

		if ((callee != null) && (callee.length() == 0)) {
			noteCacheModel.callee = null;
		}

		noteCacheModel.direction = getDirection();

		String direction = noteCacheModel.direction;

		if ((direction != null) && (direction.length() == 0)) {
			noteCacheModel.direction = null;
		}

		noteCacheModel.code = getCode();

		String code = noteCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			noteCacheModel.code = null;
		}

		noteCacheModel.processStatus = getProcessStatus();

		String processStatus = noteCacheModel.processStatus;

		if ((processStatus != null) && (processStatus.length() == 0)) {
			noteCacheModel.processStatus = null;
		}

		noteCacheModel.failureDescription = getFailureDescription();

		String failureDescription = noteCacheModel.failureDescription;

		if ((failureDescription != null) &&
			(failureDescription.length() == 0)) {

			noteCacheModel.failureDescription = null;
		}

		noteCacheModel.userId = getUserId();

		noteCacheModel.noteAuthor = getNoteAuthor();

		String noteAuthor = noteCacheModel.noteAuthor;

		if ((noteAuthor != null) && (noteAuthor.length() == 0)) {
			noteCacheModel.noteAuthor = null;
		}

		noteCacheModel.rowProcessed = getRowProcessed();

		String rowProcessed = noteCacheModel.rowProcessed;

		if ((rowProcessed != null) && (rowProcessed.length() == 0)) {
			noteCacheModel.rowProcessed = null;
		}

		return noteCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Note, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Note, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Note, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Note)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Note, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Note, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Note, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Note)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Note>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _noteId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _caseId;
	private long _originalCaseId;
	private boolean _setOriginalCaseId;
	private long _externalNoteId;
	private long _originalExternalNoteId;
	private boolean _setOriginalExternalNoteId;
	private String _type;
	private String _noteType;
	private String _text;
	private Date _noteCreateDate;
	private String _caller;
	private String _callee;
	private String _direction;
	private String _code;
	private String _processStatus;
	private String _originalProcessStatus;
	private String _failureDescription;
	private long _userId;
	private String _noteAuthor;
	private String _rowProcessed;
	private String _originalRowProcessed;
	private long _columnBitmask;
	private Note _escapedModel;

}