/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.argus.oth.cases.management.model.impl;

import com.argus.oth.cases.management.model.StagingAuthProcedure;
import com.argus.oth.cases.management.model.StagingAuthProcedureModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the StagingAuthProcedure service. Represents a row in the &quot;OTH_StagingAuthProcedure&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>StagingAuthProcedureModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StagingAuthProcedureImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StagingAuthProcedureImpl
 * @generated
 */
public class StagingAuthProcedureModelImpl
	extends BaseModelImpl<StagingAuthProcedure>
	implements StagingAuthProcedureModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a staging auth procedure model instance should use the <code>StagingAuthProcedure</code> interface instead.
	 */
	public static final String TABLE_NAME = "OTH_StagingAuthProcedure";

	public static final Object[][] TABLE_COLUMNS = {
		{"stagingAuthProcedureId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"externalAuthorizationId", Types.BIGINT},
		{"authNumber", Types.VARCHAR}, {"medicalCodeId", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"externalModifiedDate", Types.VARCHAR},
		{"externalCreatedDate", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("stagingAuthProcedureId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("externalAuthorizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("authNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("medicalCodeId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalModifiedDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalCreatedDate", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OTH_StagingAuthProcedure (stagingAuthProcedureId LONG not null primary key,createDate DATE null,modifiedDate DATE null,externalAuthorizationId LONG,authNumber VARCHAR(75) null,medicalCodeId VARCHAR(75) null,description VARCHAR(2000) null,externalModifiedDate VARCHAR(75) null,externalCreatedDate VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table OTH_StagingAuthProcedure";

	public static final String ORDER_BY_JPQL =
		" ORDER BY stagingAuthProcedure.stagingAuthProcedureId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OTH_StagingAuthProcedure.stagingAuthProcedureId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public StagingAuthProcedureModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _stagingAuthProcedureId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStagingAuthProcedureId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _stagingAuthProcedureId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StagingAuthProcedure.class;
	}

	@Override
	public String getModelClassName() {
		return StagingAuthProcedure.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<StagingAuthProcedure, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<StagingAuthProcedure, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StagingAuthProcedure, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((StagingAuthProcedure)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<StagingAuthProcedure, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<StagingAuthProcedure, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(StagingAuthProcedure)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<StagingAuthProcedure, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<StagingAuthProcedure, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, StagingAuthProcedure>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			StagingAuthProcedure.class.getClassLoader(),
			StagingAuthProcedure.class, ModelWrapper.class);

		try {
			Constructor<StagingAuthProcedure> constructor =
				(Constructor<StagingAuthProcedure>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<StagingAuthProcedure, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<StagingAuthProcedure, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<StagingAuthProcedure, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<StagingAuthProcedure, Object>>();
		Map<String, BiConsumer<StagingAuthProcedure, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<StagingAuthProcedure, ?>>();

		attributeGetterFunctions.put(
			"stagingAuthProcedureId",
			StagingAuthProcedure::getStagingAuthProcedureId);
		attributeSetterBiConsumers.put(
			"stagingAuthProcedureId",
			(BiConsumer<StagingAuthProcedure, Long>)
				StagingAuthProcedure::setStagingAuthProcedureId);
		attributeGetterFunctions.put(
			"createDate", StagingAuthProcedure::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<StagingAuthProcedure, Date>)
				StagingAuthProcedure::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", StagingAuthProcedure::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<StagingAuthProcedure, Date>)
				StagingAuthProcedure::setModifiedDate);
		attributeGetterFunctions.put(
			"externalAuthorizationId",
			StagingAuthProcedure::getExternalAuthorizationId);
		attributeSetterBiConsumers.put(
			"externalAuthorizationId",
			(BiConsumer<StagingAuthProcedure, Long>)
				StagingAuthProcedure::setExternalAuthorizationId);
		attributeGetterFunctions.put(
			"authNumber", StagingAuthProcedure::getAuthNumber);
		attributeSetterBiConsumers.put(
			"authNumber",
			(BiConsumer<StagingAuthProcedure, String>)
				StagingAuthProcedure::setAuthNumber);
		attributeGetterFunctions.put(
			"medicalCodeId", StagingAuthProcedure::getMedicalCodeId);
		attributeSetterBiConsumers.put(
			"medicalCodeId",
			(BiConsumer<StagingAuthProcedure, String>)
				StagingAuthProcedure::setMedicalCodeId);
		attributeGetterFunctions.put(
			"description", StagingAuthProcedure::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<StagingAuthProcedure, String>)
				StagingAuthProcedure::setDescription);
		attributeGetterFunctions.put(
			"externalModifiedDate",
			StagingAuthProcedure::getExternalModifiedDate);
		attributeSetterBiConsumers.put(
			"externalModifiedDate",
			(BiConsumer<StagingAuthProcedure, String>)
				StagingAuthProcedure::setExternalModifiedDate);
		attributeGetterFunctions.put(
			"externalCreatedDate",
			StagingAuthProcedure::getExternalCreatedDate);
		attributeSetterBiConsumers.put(
			"externalCreatedDate",
			(BiConsumer<StagingAuthProcedure, String>)
				StagingAuthProcedure::setExternalCreatedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getStagingAuthProcedureId() {
		return _stagingAuthProcedureId;
	}

	@Override
	public void setStagingAuthProcedureId(long stagingAuthProcedureId) {
		_stagingAuthProcedureId = stagingAuthProcedureId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getExternalAuthorizationId() {
		return _externalAuthorizationId;
	}

	@Override
	public void setExternalAuthorizationId(long externalAuthorizationId) {
		_externalAuthorizationId = externalAuthorizationId;
	}

	@Override
	public String getAuthNumber() {
		if (_authNumber == null) {
			return "";
		}
		else {
			return _authNumber;
		}
	}

	@Override
	public void setAuthNumber(String authNumber) {
		_authNumber = authNumber;
	}

	@Override
	public String getMedicalCodeId() {
		if (_medicalCodeId == null) {
			return "";
		}
		else {
			return _medicalCodeId;
		}
	}

	@Override
	public void setMedicalCodeId(String medicalCodeId) {
		_medicalCodeId = medicalCodeId;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getExternalModifiedDate() {
		if (_externalModifiedDate == null) {
			return "";
		}
		else {
			return _externalModifiedDate;
		}
	}

	@Override
	public void setExternalModifiedDate(String externalModifiedDate) {
		_externalModifiedDate = externalModifiedDate;
	}

	@Override
	public String getExternalCreatedDate() {
		if (_externalCreatedDate == null) {
			return "";
		}
		else {
			return _externalCreatedDate;
		}
	}

	@Override
	public void setExternalCreatedDate(String externalCreatedDate) {
		_externalCreatedDate = externalCreatedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, StagingAuthProcedure.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StagingAuthProcedure toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, StagingAuthProcedure>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StagingAuthProcedureImpl stagingAuthProcedureImpl =
			new StagingAuthProcedureImpl();

		stagingAuthProcedureImpl.setStagingAuthProcedureId(
			getStagingAuthProcedureId());
		stagingAuthProcedureImpl.setCreateDate(getCreateDate());
		stagingAuthProcedureImpl.setModifiedDate(getModifiedDate());
		stagingAuthProcedureImpl.setExternalAuthorizationId(
			getExternalAuthorizationId());
		stagingAuthProcedureImpl.setAuthNumber(getAuthNumber());
		stagingAuthProcedureImpl.setMedicalCodeId(getMedicalCodeId());
		stagingAuthProcedureImpl.setDescription(getDescription());
		stagingAuthProcedureImpl.setExternalModifiedDate(
			getExternalModifiedDate());
		stagingAuthProcedureImpl.setExternalCreatedDate(
			getExternalCreatedDate());

		stagingAuthProcedureImpl.resetOriginalValues();

		return stagingAuthProcedureImpl;
	}

	@Override
	public int compareTo(StagingAuthProcedure stagingAuthProcedure) {
		int value = 0;

		if (getStagingAuthProcedureId() <
				stagingAuthProcedure.getStagingAuthProcedureId()) {

			value = -1;
		}
		else if (getStagingAuthProcedureId() >
					stagingAuthProcedure.getStagingAuthProcedureId()) {

			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StagingAuthProcedure)) {
			return false;
		}

		StagingAuthProcedure stagingAuthProcedure = (StagingAuthProcedure)obj;

		long primaryKey = stagingAuthProcedure.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		StagingAuthProcedureModelImpl stagingAuthProcedureModelImpl = this;

		stagingAuthProcedureModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<StagingAuthProcedure> toCacheModel() {
		StagingAuthProcedureCacheModel stagingAuthProcedureCacheModel =
			new StagingAuthProcedureCacheModel();

		stagingAuthProcedureCacheModel.stagingAuthProcedureId =
			getStagingAuthProcedureId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			stagingAuthProcedureCacheModel.createDate = createDate.getTime();
		}
		else {
			stagingAuthProcedureCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			stagingAuthProcedureCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			stagingAuthProcedureCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		stagingAuthProcedureCacheModel.externalAuthorizationId =
			getExternalAuthorizationId();

		stagingAuthProcedureCacheModel.authNumber = getAuthNumber();

		String authNumber = stagingAuthProcedureCacheModel.authNumber;

		if ((authNumber != null) && (authNumber.length() == 0)) {
			stagingAuthProcedureCacheModel.authNumber = null;
		}

		stagingAuthProcedureCacheModel.medicalCodeId = getMedicalCodeId();

		String medicalCodeId = stagingAuthProcedureCacheModel.medicalCodeId;

		if ((medicalCodeId != null) && (medicalCodeId.length() == 0)) {
			stagingAuthProcedureCacheModel.medicalCodeId = null;
		}

		stagingAuthProcedureCacheModel.description = getDescription();

		String description = stagingAuthProcedureCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			stagingAuthProcedureCacheModel.description = null;
		}

		stagingAuthProcedureCacheModel.externalModifiedDate =
			getExternalModifiedDate();

		String externalModifiedDate =
			stagingAuthProcedureCacheModel.externalModifiedDate;

		if ((externalModifiedDate != null) &&
			(externalModifiedDate.length() == 0)) {

			stagingAuthProcedureCacheModel.externalModifiedDate = null;
		}

		stagingAuthProcedureCacheModel.externalCreatedDate =
			getExternalCreatedDate();

		String externalCreatedDate =
			stagingAuthProcedureCacheModel.externalCreatedDate;

		if ((externalCreatedDate != null) &&
			(externalCreatedDate.length() == 0)) {

			stagingAuthProcedureCacheModel.externalCreatedDate = null;
		}

		return stagingAuthProcedureCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<StagingAuthProcedure, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<StagingAuthProcedure, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StagingAuthProcedure, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((StagingAuthProcedure)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<StagingAuthProcedure, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<StagingAuthProcedure, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StagingAuthProcedure, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((StagingAuthProcedure)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, StagingAuthProcedure>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _stagingAuthProcedureId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _externalAuthorizationId;
	private String _authNumber;
	private String _medicalCodeId;
	private String _description;
	private String _externalModifiedDate;
	private String _externalCreatedDate;
	private StagingAuthProcedure _escapedModel;

}