/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.argus.oth.cases.management.model.impl;

import com.argus.oth.cases.management.model.StagingClaim;
import com.argus.oth.cases.management.model.StagingClaimModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the StagingClaim service. Represents a row in the &quot;OTH_StagingClaim&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>StagingClaimModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StagingClaimImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StagingClaimImpl
 * @generated
 */
public class StagingClaimModelImpl
	extends BaseModelImpl<StagingClaim> implements StagingClaimModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a staging claim model instance should use the <code>StagingClaim</code> interface instead.
	 */
	public static final String TABLE_NAME = "OTH_StagingClaim";

	public static final Object[][] TABLE_COLUMNS = {
		{"stagingClaimId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"externalClaimId", Types.BIGINT},
		{"claimRef", Types.VARCHAR}, {"authorizationNumber", Types.VARCHAR},
		{"serviceFrom", Types.VARCHAR}, {"serviceThru", Types.VARCHAR},
		{"provider", Types.VARCHAR}, {"prioritizedBill", Types.VARCHAR},
		{"diagCodesCombined", Types.VARCHAR}, {"providerState", Types.VARCHAR},
		{"tpmReceivedDate", Types.VARCHAR}, {"claimTurnaround", Types.BIGINT},
		{"billType", Types.VARCHAR}, {"providerNetwork", Types.VARCHAR},
		{"repricedNetwork", Types.VARCHAR}, {"statusSortOrder", Types.BIGINT},
		{"paidDate", Types.VARCHAR}, {"paidAmount", Types.DOUBLE},
		{"claimStatus", Types.VARCHAR}, {"externalModifiedDate", Types.VARCHAR},
		{"externalCreatedDate", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("stagingClaimId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("externalClaimId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("claimRef", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("authorizationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("serviceFrom", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("serviceThru", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("provider", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("prioritizedBill", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("diagCodesCombined", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("providerState", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tpmReceivedDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimTurnaround", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("billType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("providerNetwork", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("repricedNetwork", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusSortOrder", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("paidDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("paidAmount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("claimStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalModifiedDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalCreatedDate", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OTH_StagingClaim (stagingClaimId LONG not null primary key,createDate DATE null,modifiedDate DATE null,externalClaimId LONG,claimRef VARCHAR(75) null,authorizationNumber VARCHAR(75) null,serviceFrom VARCHAR(75) null,serviceThru VARCHAR(75) null,provider VARCHAR(75) null,prioritizedBill VARCHAR(75) null,diagCodesCombined STRING null,providerState VARCHAR(75) null,tpmReceivedDate VARCHAR(75) null,claimTurnaround LONG,billType STRING null,providerNetwork VARCHAR(1000) null,repricedNetwork VARCHAR(1000) null,statusSortOrder LONG,paidDate VARCHAR(75) null,paidAmount DOUBLE,claimStatus VARCHAR(75) null,externalModifiedDate VARCHAR(75) null,externalCreatedDate VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table OTH_StagingClaim";

	public static final String ORDER_BY_JPQL =
		" ORDER BY stagingClaim.stagingClaimId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OTH_StagingClaim.stagingClaimId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public StagingClaimModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _stagingClaimId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStagingClaimId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _stagingClaimId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StagingClaim.class;
	}

	@Override
	public String getModelClassName() {
		return StagingClaim.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<StagingClaim, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<StagingClaim, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StagingClaim, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((StagingClaim)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<StagingClaim, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<StagingClaim, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(StagingClaim)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<StagingClaim, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<StagingClaim, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, StagingClaim>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			StagingClaim.class.getClassLoader(), StagingClaim.class,
			ModelWrapper.class);

		try {
			Constructor<StagingClaim> constructor =
				(Constructor<StagingClaim>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<StagingClaim, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<StagingClaim, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<StagingClaim, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<StagingClaim, Object>>();
		Map<String, BiConsumer<StagingClaim, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<StagingClaim, ?>>();

		attributeGetterFunctions.put(
			"stagingClaimId", StagingClaim::getStagingClaimId);
		attributeSetterBiConsumers.put(
			"stagingClaimId",
			(BiConsumer<StagingClaim, Long>)StagingClaim::setStagingClaimId);
		attributeGetterFunctions.put("createDate", StagingClaim::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<StagingClaim, Date>)StagingClaim::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", StagingClaim::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<StagingClaim, Date>)StagingClaim::setModifiedDate);
		attributeGetterFunctions.put(
			"externalClaimId", StagingClaim::getExternalClaimId);
		attributeSetterBiConsumers.put(
			"externalClaimId",
			(BiConsumer<StagingClaim, Long>)StagingClaim::setExternalClaimId);
		attributeGetterFunctions.put("claimRef", StagingClaim::getClaimRef);
		attributeSetterBiConsumers.put(
			"claimRef",
			(BiConsumer<StagingClaim, String>)StagingClaim::setClaimRef);
		attributeGetterFunctions.put(
			"authorizationNumber", StagingClaim::getAuthorizationNumber);
		attributeSetterBiConsumers.put(
			"authorizationNumber",
			(BiConsumer<StagingClaim, String>)
				StagingClaim::setAuthorizationNumber);
		attributeGetterFunctions.put(
			"serviceFrom", StagingClaim::getServiceFrom);
		attributeSetterBiConsumers.put(
			"serviceFrom",
			(BiConsumer<StagingClaim, String>)StagingClaim::setServiceFrom);
		attributeGetterFunctions.put(
			"serviceThru", StagingClaim::getServiceThru);
		attributeSetterBiConsumers.put(
			"serviceThru",
			(BiConsumer<StagingClaim, String>)StagingClaim::setServiceThru);
		attributeGetterFunctions.put("provider", StagingClaim::getProvider);
		attributeSetterBiConsumers.put(
			"provider",
			(BiConsumer<StagingClaim, String>)StagingClaim::setProvider);
		attributeGetterFunctions.put(
			"prioritizedBill", StagingClaim::getPrioritizedBill);
		attributeSetterBiConsumers.put(
			"prioritizedBill",
			(BiConsumer<StagingClaim, String>)StagingClaim::setPrioritizedBill);
		attributeGetterFunctions.put(
			"diagCodesCombined", StagingClaim::getDiagCodesCombined);
		attributeSetterBiConsumers.put(
			"diagCodesCombined",
			(BiConsumer<StagingClaim, String>)
				StagingClaim::setDiagCodesCombined);
		attributeGetterFunctions.put(
			"providerState", StagingClaim::getProviderState);
		attributeSetterBiConsumers.put(
			"providerState",
			(BiConsumer<StagingClaim, String>)StagingClaim::setProviderState);
		attributeGetterFunctions.put(
			"tpmReceivedDate", StagingClaim::getTpmReceivedDate);
		attributeSetterBiConsumers.put(
			"tpmReceivedDate",
			(BiConsumer<StagingClaim, String>)StagingClaim::setTpmReceivedDate);
		attributeGetterFunctions.put(
			"claimTurnaround", StagingClaim::getClaimTurnaround);
		attributeSetterBiConsumers.put(
			"claimTurnaround",
			(BiConsumer<StagingClaim, Long>)StagingClaim::setClaimTurnaround);
		attributeGetterFunctions.put("billType", StagingClaim::getBillType);
		attributeSetterBiConsumers.put(
			"billType",
			(BiConsumer<StagingClaim, String>)StagingClaim::setBillType);
		attributeGetterFunctions.put(
			"providerNetwork", StagingClaim::getProviderNetwork);
		attributeSetterBiConsumers.put(
			"providerNetwork",
			(BiConsumer<StagingClaim, String>)StagingClaim::setProviderNetwork);
		attributeGetterFunctions.put(
			"repricedNetwork", StagingClaim::getRepricedNetwork);
		attributeSetterBiConsumers.put(
			"repricedNetwork",
			(BiConsumer<StagingClaim, String>)StagingClaim::setRepricedNetwork);
		attributeGetterFunctions.put(
			"statusSortOrder", StagingClaim::getStatusSortOrder);
		attributeSetterBiConsumers.put(
			"statusSortOrder",
			(BiConsumer<StagingClaim, Long>)StagingClaim::setStatusSortOrder);
		attributeGetterFunctions.put("paidDate", StagingClaim::getPaidDate);
		attributeSetterBiConsumers.put(
			"paidDate",
			(BiConsumer<StagingClaim, String>)StagingClaim::setPaidDate);
		attributeGetterFunctions.put("paidAmount", StagingClaim::getPaidAmount);
		attributeSetterBiConsumers.put(
			"paidAmount",
			(BiConsumer<StagingClaim, Double>)StagingClaim::setPaidAmount);
		attributeGetterFunctions.put(
			"claimStatus", StagingClaim::getClaimStatus);
		attributeSetterBiConsumers.put(
			"claimStatus",
			(BiConsumer<StagingClaim, String>)StagingClaim::setClaimStatus);
		attributeGetterFunctions.put(
			"externalModifiedDate", StagingClaim::getExternalModifiedDate);
		attributeSetterBiConsumers.put(
			"externalModifiedDate",
			(BiConsumer<StagingClaim, String>)
				StagingClaim::setExternalModifiedDate);
		attributeGetterFunctions.put(
			"externalCreatedDate", StagingClaim::getExternalCreatedDate);
		attributeSetterBiConsumers.put(
			"externalCreatedDate",
			(BiConsumer<StagingClaim, String>)
				StagingClaim::setExternalCreatedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getStagingClaimId() {
		return _stagingClaimId;
	}

	@Override
	public void setStagingClaimId(long stagingClaimId) {
		_stagingClaimId = stagingClaimId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getExternalClaimId() {
		return _externalClaimId;
	}

	@Override
	public void setExternalClaimId(long externalClaimId) {
		_externalClaimId = externalClaimId;
	}

	@Override
	public String getClaimRef() {
		if (_claimRef == null) {
			return "";
		}
		else {
			return _claimRef;
		}
	}

	@Override
	public void setClaimRef(String claimRef) {
		_claimRef = claimRef;
	}

	@Override
	public String getAuthorizationNumber() {
		if (_authorizationNumber == null) {
			return "";
		}
		else {
			return _authorizationNumber;
		}
	}

	@Override
	public void setAuthorizationNumber(String authorizationNumber) {
		_authorizationNumber = authorizationNumber;
	}

	@Override
	public String getServiceFrom() {
		if (_serviceFrom == null) {
			return "";
		}
		else {
			return _serviceFrom;
		}
	}

	@Override
	public void setServiceFrom(String serviceFrom) {
		_serviceFrom = serviceFrom;
	}

	@Override
	public String getServiceThru() {
		if (_serviceThru == null) {
			return "";
		}
		else {
			return _serviceThru;
		}
	}

	@Override
	public void setServiceThru(String serviceThru) {
		_serviceThru = serviceThru;
	}

	@Override
	public String getProvider() {
		if (_provider == null) {
			return "";
		}
		else {
			return _provider;
		}
	}

	@Override
	public void setProvider(String provider) {
		_provider = provider;
	}

	@Override
	public String getPrioritizedBill() {
		if (_prioritizedBill == null) {
			return "";
		}
		else {
			return _prioritizedBill;
		}
	}

	@Override
	public void setPrioritizedBill(String prioritizedBill) {
		_prioritizedBill = prioritizedBill;
	}

	@Override
	public String getDiagCodesCombined() {
		if (_diagCodesCombined == null) {
			return "";
		}
		else {
			return _diagCodesCombined;
		}
	}

	@Override
	public void setDiagCodesCombined(String diagCodesCombined) {
		_diagCodesCombined = diagCodesCombined;
	}

	@Override
	public String getProviderState() {
		if (_providerState == null) {
			return "";
		}
		else {
			return _providerState;
		}
	}

	@Override
	public void setProviderState(String providerState) {
		_providerState = providerState;
	}

	@Override
	public String getTpmReceivedDate() {
		if (_tpmReceivedDate == null) {
			return "";
		}
		else {
			return _tpmReceivedDate;
		}
	}

	@Override
	public void setTpmReceivedDate(String tpmReceivedDate) {
		_tpmReceivedDate = tpmReceivedDate;
	}

	@Override
	public long getClaimTurnaround() {
		return _claimTurnaround;
	}

	@Override
	public void setClaimTurnaround(long claimTurnaround) {
		_claimTurnaround = claimTurnaround;
	}

	@Override
	public String getBillType() {
		if (_billType == null) {
			return "";
		}
		else {
			return _billType;
		}
	}

	@Override
	public void setBillType(String billType) {
		_billType = billType;
	}

	@Override
	public String getProviderNetwork() {
		if (_providerNetwork == null) {
			return "";
		}
		else {
			return _providerNetwork;
		}
	}

	@Override
	public void setProviderNetwork(String providerNetwork) {
		_providerNetwork = providerNetwork;
	}

	@Override
	public String getRepricedNetwork() {
		if (_repricedNetwork == null) {
			return "";
		}
		else {
			return _repricedNetwork;
		}
	}

	@Override
	public void setRepricedNetwork(String repricedNetwork) {
		_repricedNetwork = repricedNetwork;
	}

	@Override
	public long getStatusSortOrder() {
		return _statusSortOrder;
	}

	@Override
	public void setStatusSortOrder(long statusSortOrder) {
		_statusSortOrder = statusSortOrder;
	}

	@Override
	public String getPaidDate() {
		if (_paidDate == null) {
			return "";
		}
		else {
			return _paidDate;
		}
	}

	@Override
	public void setPaidDate(String paidDate) {
		_paidDate = paidDate;
	}

	@Override
	public double getPaidAmount() {
		return _paidAmount;
	}

	@Override
	public void setPaidAmount(double paidAmount) {
		_paidAmount = paidAmount;
	}

	@Override
	public String getClaimStatus() {
		if (_claimStatus == null) {
			return "";
		}
		else {
			return _claimStatus;
		}
	}

	@Override
	public void setClaimStatus(String claimStatus) {
		_claimStatus = claimStatus;
	}

	@Override
	public String getExternalModifiedDate() {
		if (_externalModifiedDate == null) {
			return "";
		}
		else {
			return _externalModifiedDate;
		}
	}

	@Override
	public void setExternalModifiedDate(String externalModifiedDate) {
		_externalModifiedDate = externalModifiedDate;
	}

	@Override
	public String getExternalCreatedDate() {
		if (_externalCreatedDate == null) {
			return "";
		}
		else {
			return _externalCreatedDate;
		}
	}

	@Override
	public void setExternalCreatedDate(String externalCreatedDate) {
		_externalCreatedDate = externalCreatedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, StagingClaim.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StagingClaim toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, StagingClaim>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StagingClaimImpl stagingClaimImpl = new StagingClaimImpl();

		stagingClaimImpl.setStagingClaimId(getStagingClaimId());
		stagingClaimImpl.setCreateDate(getCreateDate());
		stagingClaimImpl.setModifiedDate(getModifiedDate());
		stagingClaimImpl.setExternalClaimId(getExternalClaimId());
		stagingClaimImpl.setClaimRef(getClaimRef());
		stagingClaimImpl.setAuthorizationNumber(getAuthorizationNumber());
		stagingClaimImpl.setServiceFrom(getServiceFrom());
		stagingClaimImpl.setServiceThru(getServiceThru());
		stagingClaimImpl.setProvider(getProvider());
		stagingClaimImpl.setPrioritizedBill(getPrioritizedBill());
		stagingClaimImpl.setDiagCodesCombined(getDiagCodesCombined());
		stagingClaimImpl.setProviderState(getProviderState());
		stagingClaimImpl.setTpmReceivedDate(getTpmReceivedDate());
		stagingClaimImpl.setClaimTurnaround(getClaimTurnaround());
		stagingClaimImpl.setBillType(getBillType());
		stagingClaimImpl.setProviderNetwork(getProviderNetwork());
		stagingClaimImpl.setRepricedNetwork(getRepricedNetwork());
		stagingClaimImpl.setStatusSortOrder(getStatusSortOrder());
		stagingClaimImpl.setPaidDate(getPaidDate());
		stagingClaimImpl.setPaidAmount(getPaidAmount());
		stagingClaimImpl.setClaimStatus(getClaimStatus());
		stagingClaimImpl.setExternalModifiedDate(getExternalModifiedDate());
		stagingClaimImpl.setExternalCreatedDate(getExternalCreatedDate());

		stagingClaimImpl.resetOriginalValues();

		return stagingClaimImpl;
	}

	@Override
	public int compareTo(StagingClaim stagingClaim) {
		int value = 0;

		if (getStagingClaimId() < stagingClaim.getStagingClaimId()) {
			value = -1;
		}
		else if (getStagingClaimId() > stagingClaim.getStagingClaimId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StagingClaim)) {
			return false;
		}

		StagingClaim stagingClaim = (StagingClaim)obj;

		long primaryKey = stagingClaim.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		StagingClaimModelImpl stagingClaimModelImpl = this;

		stagingClaimModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<StagingClaim> toCacheModel() {
		StagingClaimCacheModel stagingClaimCacheModel =
			new StagingClaimCacheModel();

		stagingClaimCacheModel.stagingClaimId = getStagingClaimId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			stagingClaimCacheModel.createDate = createDate.getTime();
		}
		else {
			stagingClaimCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			stagingClaimCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			stagingClaimCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		stagingClaimCacheModel.externalClaimId = getExternalClaimId();

		stagingClaimCacheModel.claimRef = getClaimRef();

		String claimRef = stagingClaimCacheModel.claimRef;

		if ((claimRef != null) && (claimRef.length() == 0)) {
			stagingClaimCacheModel.claimRef = null;
		}

		stagingClaimCacheModel.authorizationNumber = getAuthorizationNumber();

		String authorizationNumber = stagingClaimCacheModel.authorizationNumber;

		if ((authorizationNumber != null) &&
			(authorizationNumber.length() == 0)) {

			stagingClaimCacheModel.authorizationNumber = null;
		}

		stagingClaimCacheModel.serviceFrom = getServiceFrom();

		String serviceFrom = stagingClaimCacheModel.serviceFrom;

		if ((serviceFrom != null) && (serviceFrom.length() == 0)) {
			stagingClaimCacheModel.serviceFrom = null;
		}

		stagingClaimCacheModel.serviceThru = getServiceThru();

		String serviceThru = stagingClaimCacheModel.serviceThru;

		if ((serviceThru != null) && (serviceThru.length() == 0)) {
			stagingClaimCacheModel.serviceThru = null;
		}

		stagingClaimCacheModel.provider = getProvider();

		String provider = stagingClaimCacheModel.provider;

		if ((provider != null) && (provider.length() == 0)) {
			stagingClaimCacheModel.provider = null;
		}

		stagingClaimCacheModel.prioritizedBill = getPrioritizedBill();

		String prioritizedBill = stagingClaimCacheModel.prioritizedBill;

		if ((prioritizedBill != null) && (prioritizedBill.length() == 0)) {
			stagingClaimCacheModel.prioritizedBill = null;
		}

		stagingClaimCacheModel.diagCodesCombined = getDiagCodesCombined();

		String diagCodesCombined = stagingClaimCacheModel.diagCodesCombined;

		if ((diagCodesCombined != null) && (diagCodesCombined.length() == 0)) {
			stagingClaimCacheModel.diagCodesCombined = null;
		}

		stagingClaimCacheModel.providerState = getProviderState();

		String providerState = stagingClaimCacheModel.providerState;

		if ((providerState != null) && (providerState.length() == 0)) {
			stagingClaimCacheModel.providerState = null;
		}

		stagingClaimCacheModel.tpmReceivedDate = getTpmReceivedDate();

		String tpmReceivedDate = stagingClaimCacheModel.tpmReceivedDate;

		if ((tpmReceivedDate != null) && (tpmReceivedDate.length() == 0)) {
			stagingClaimCacheModel.tpmReceivedDate = null;
		}

		stagingClaimCacheModel.claimTurnaround = getClaimTurnaround();

		stagingClaimCacheModel.billType = getBillType();

		String billType = stagingClaimCacheModel.billType;

		if ((billType != null) && (billType.length() == 0)) {
			stagingClaimCacheModel.billType = null;
		}

		stagingClaimCacheModel.providerNetwork = getProviderNetwork();

		String providerNetwork = stagingClaimCacheModel.providerNetwork;

		if ((providerNetwork != null) && (providerNetwork.length() == 0)) {
			stagingClaimCacheModel.providerNetwork = null;
		}

		stagingClaimCacheModel.repricedNetwork = getRepricedNetwork();

		String repricedNetwork = stagingClaimCacheModel.repricedNetwork;

		if ((repricedNetwork != null) && (repricedNetwork.length() == 0)) {
			stagingClaimCacheModel.repricedNetwork = null;
		}

		stagingClaimCacheModel.statusSortOrder = getStatusSortOrder();

		stagingClaimCacheModel.paidDate = getPaidDate();

		String paidDate = stagingClaimCacheModel.paidDate;

		if ((paidDate != null) && (paidDate.length() == 0)) {
			stagingClaimCacheModel.paidDate = null;
		}

		stagingClaimCacheModel.paidAmount = getPaidAmount();

		stagingClaimCacheModel.claimStatus = getClaimStatus();

		String claimStatus = stagingClaimCacheModel.claimStatus;

		if ((claimStatus != null) && (claimStatus.length() == 0)) {
			stagingClaimCacheModel.claimStatus = null;
		}

		stagingClaimCacheModel.externalModifiedDate = getExternalModifiedDate();

		String externalModifiedDate =
			stagingClaimCacheModel.externalModifiedDate;

		if ((externalModifiedDate != null) &&
			(externalModifiedDate.length() == 0)) {

			stagingClaimCacheModel.externalModifiedDate = null;
		}

		stagingClaimCacheModel.externalCreatedDate = getExternalCreatedDate();

		String externalCreatedDate = stagingClaimCacheModel.externalCreatedDate;

		if ((externalCreatedDate != null) &&
			(externalCreatedDate.length() == 0)) {

			stagingClaimCacheModel.externalCreatedDate = null;
		}

		return stagingClaimCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<StagingClaim, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<StagingClaim, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StagingClaim, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((StagingClaim)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<StagingClaim, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<StagingClaim, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StagingClaim, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((StagingClaim)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, StagingClaim>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _stagingClaimId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _externalClaimId;
	private String _claimRef;
	private String _authorizationNumber;
	private String _serviceFrom;
	private String _serviceThru;
	private String _provider;
	private String _prioritizedBill;
	private String _diagCodesCombined;
	private String _providerState;
	private String _tpmReceivedDate;
	private long _claimTurnaround;
	private String _billType;
	private String _providerNetwork;
	private String _repricedNetwork;
	private long _statusSortOrder;
	private String _paidDate;
	private double _paidAmount;
	private String _claimStatus;
	private String _externalModifiedDate;
	private String _externalCreatedDate;
	private StagingClaim _escapedModel;

}