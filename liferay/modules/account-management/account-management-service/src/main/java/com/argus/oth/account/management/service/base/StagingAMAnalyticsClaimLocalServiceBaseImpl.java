/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.argus.oth.account.management.service.base;

import com.argus.oth.account.management.model.StagingAMAnalyticsClaim;
import com.argus.oth.account.management.service.StagingAMAnalyticsClaimLocalService;
import com.argus.oth.account.management.service.persistence.AMAnalyticsClaimPersistence;
import com.argus.oth.account.management.service.persistence.AMAnalyticsDBPersistence;
import com.argus.oth.account.management.service.persistence.AMAnalyticsTelephonyPersistence;
import com.argus.oth.account.management.service.persistence.StagingAMATelephonyPersistence;
import com.argus.oth.account.management.service.persistence.StagingAMAnalyticsClaimPersistence;
import com.argus.oth.account.management.service.persistence.StagingAMAnalyticsDBPersistence;

import com.liferay.portal.aop.AopService;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalService;
import com.liferay.portal.kernel.service.persistence.BasePersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

import org.osgi.service.component.annotations.Reference;

/**
 * Provides the base implementation for the staging am analytics claim local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.argus.oth.account.management.service.impl.StagingAMAnalyticsClaimLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.argus.oth.account.management.service.impl.StagingAMAnalyticsClaimLocalServiceImpl
 * @generated
 */
public abstract class StagingAMAnalyticsClaimLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements AopService, IdentifiableOSGiService,
			   StagingAMAnalyticsClaimLocalService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>StagingAMAnalyticsClaimLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>com.argus.oth.account.management.service.StagingAMAnalyticsClaimLocalServiceUtil</code>.
	 */

	/**
	 * Adds the staging am analytics claim to the database. Also notifies the appropriate model listeners.
	 *
	 * @param stagingAMAnalyticsClaim the staging am analytics claim
	 * @return the staging am analytics claim that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public StagingAMAnalyticsClaim addStagingAMAnalyticsClaim(
		StagingAMAnalyticsClaim stagingAMAnalyticsClaim) {

		stagingAMAnalyticsClaim.setNew(true);

		return stagingAMAnalyticsClaimPersistence.update(
			stagingAMAnalyticsClaim);
	}

	/**
	 * Creates a new staging am analytics claim with the primary key. Does not add the staging am analytics claim to the database.
	 *
	 * @param stagingAMAnalyticsClaimId the primary key for the new staging am analytics claim
	 * @return the new staging am analytics claim
	 */
	@Override
	@Transactional(enabled = false)
	public StagingAMAnalyticsClaim createStagingAMAnalyticsClaim(
		long stagingAMAnalyticsClaimId) {

		return stagingAMAnalyticsClaimPersistence.create(
			stagingAMAnalyticsClaimId);
	}

	/**
	 * Deletes the staging am analytics claim with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param stagingAMAnalyticsClaimId the primary key of the staging am analytics claim
	 * @return the staging am analytics claim that was removed
	 * @throws PortalException if a staging am analytics claim with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public StagingAMAnalyticsClaim deleteStagingAMAnalyticsClaim(
			long stagingAMAnalyticsClaimId)
		throws PortalException {

		return stagingAMAnalyticsClaimPersistence.remove(
			stagingAMAnalyticsClaimId);
	}

	/**
	 * Deletes the staging am analytics claim from the database. Also notifies the appropriate model listeners.
	 *
	 * @param stagingAMAnalyticsClaim the staging am analytics claim
	 * @return the staging am analytics claim that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public StagingAMAnalyticsClaim deleteStagingAMAnalyticsClaim(
		StagingAMAnalyticsClaim stagingAMAnalyticsClaim) {

		return stagingAMAnalyticsClaimPersistence.remove(
			stagingAMAnalyticsClaim);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			StagingAMAnalyticsClaim.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return stagingAMAnalyticsClaimPersistence.findWithDynamicQuery(
			dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>com.argus.oth.account.management.model.impl.StagingAMAnalyticsClaimModelImpl</code>.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return stagingAMAnalyticsClaimPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>com.argus.oth.account.management.model.impl.StagingAMAnalyticsClaimModelImpl</code>.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return stagingAMAnalyticsClaimPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return stagingAMAnalyticsClaimPersistence.countWithDynamicQuery(
			dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return stagingAMAnalyticsClaimPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public StagingAMAnalyticsClaim fetchStagingAMAnalyticsClaim(
		long stagingAMAnalyticsClaimId) {

		return stagingAMAnalyticsClaimPersistence.fetchByPrimaryKey(
			stagingAMAnalyticsClaimId);
	}

	/**
	 * Returns the staging am analytics claim with the primary key.
	 *
	 * @param stagingAMAnalyticsClaimId the primary key of the staging am analytics claim
	 * @return the staging am analytics claim
	 * @throws PortalException if a staging am analytics claim with the primary key could not be found
	 */
	@Override
	public StagingAMAnalyticsClaim getStagingAMAnalyticsClaim(
			long stagingAMAnalyticsClaimId)
		throws PortalException {

		return stagingAMAnalyticsClaimPersistence.findByPrimaryKey(
			stagingAMAnalyticsClaimId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(
			stagingAMAnalyticsClaimLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(StagingAMAnalyticsClaim.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"stagingAMAnalyticsClaimId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			stagingAMAnalyticsClaimLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(
			StagingAMAnalyticsClaim.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"stagingAMAnalyticsClaimId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(
			stagingAMAnalyticsClaimLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(StagingAMAnalyticsClaim.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"stagingAMAnalyticsClaimId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		return stagingAMAnalyticsClaimLocalService.
			deleteStagingAMAnalyticsClaim(
				(StagingAMAnalyticsClaim)persistedModel);
	}

	public BasePersistence<StagingAMAnalyticsClaim> getBasePersistence() {
		return stagingAMAnalyticsClaimPersistence;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return stagingAMAnalyticsClaimPersistence.findByPrimaryKey(
			primaryKeyObj);
	}

	/**
	 * Returns a range of all the staging am analytics claims.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>com.argus.oth.account.management.model.impl.StagingAMAnalyticsClaimModelImpl</code>.
	 * </p>
	 *
	 * @param start the lower bound of the range of staging am analytics claims
	 * @param end the upper bound of the range of staging am analytics claims (not inclusive)
	 * @return the range of staging am analytics claims
	 */
	@Override
	public List<StagingAMAnalyticsClaim> getStagingAMAnalyticsClaims(
		int start, int end) {

		return stagingAMAnalyticsClaimPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of staging am analytics claims.
	 *
	 * @return the number of staging am analytics claims
	 */
	@Override
	public int getStagingAMAnalyticsClaimsCount() {
		return stagingAMAnalyticsClaimPersistence.countAll();
	}

	/**
	 * Updates the staging am analytics claim in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param stagingAMAnalyticsClaim the staging am analytics claim
	 * @return the staging am analytics claim that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public StagingAMAnalyticsClaim updateStagingAMAnalyticsClaim(
		StagingAMAnalyticsClaim stagingAMAnalyticsClaim) {

		return stagingAMAnalyticsClaimPersistence.update(
			stagingAMAnalyticsClaim);
	}

	@Override
	public Class<?>[] getAopInterfaces() {
		return new Class<?>[] {
			StagingAMAnalyticsClaimLocalService.class,
			IdentifiableOSGiService.class, PersistedModelLocalService.class
		};
	}

	@Override
	public void setAopProxy(Object aopProxy) {
		stagingAMAnalyticsClaimLocalService =
			(StagingAMAnalyticsClaimLocalService)aopProxy;
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return StagingAMAnalyticsClaimLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return StagingAMAnalyticsClaim.class;
	}

	protected String getModelClassName() {
		return StagingAMAnalyticsClaim.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource =
				stagingAMAnalyticsClaimPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception exception) {
			throw new SystemException(exception);
		}
	}

	@Reference
	protected AMAnalyticsClaimPersistence amAnalyticsClaimPersistence;

	@Reference
	protected AMAnalyticsDBPersistence amAnalyticsDBPersistence;

	@Reference
	protected AMAnalyticsTelephonyPersistence amAnalyticsTelephonyPersistence;

	protected StagingAMAnalyticsClaimLocalService
		stagingAMAnalyticsClaimLocalService;

	@Reference
	protected StagingAMAnalyticsClaimPersistence
		stagingAMAnalyticsClaimPersistence;

	@Reference
	protected StagingAMAnalyticsDBPersistence stagingAMAnalyticsDBPersistence;

	@Reference
	protected StagingAMATelephonyPersistence stagingAMATelephonyPersistence;

	@Reference
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.ClassNameLocalService
		classNameLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.ResourceLocalService
		resourceLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

}