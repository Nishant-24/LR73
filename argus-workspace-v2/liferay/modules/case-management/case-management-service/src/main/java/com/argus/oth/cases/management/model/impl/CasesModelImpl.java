/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.argus.oth.cases.management.model.impl;

import com.argus.oth.cases.management.model.Cases;
import com.argus.oth.cases.management.model.CasesModel;
import com.argus.oth.cases.management.model.CasesSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Cases service. Represents a row in the &quot;OTH_Cases&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CasesModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CasesImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CasesImpl
 * @generated
 */
@JSON(strict = true)
public class CasesModelImpl extends BaseModelImpl<Cases> implements CasesModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cases model instance should use the <code>Cases</code> interface instead.
	 */
	public static final String TABLE_NAME = "OTH_Cases";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"caseId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"externalCaseId", Types.BIGINT}, {"clientId", Types.BIGINT},
		{"clientName", Types.VARCHAR}, {"clientGroupId", Types.BIGINT},
		{"caseNumber", Types.VARCHAR}, {"caseStartDate", Types.TIMESTAMP},
		{"caseEndDate", Types.TIMESTAMP}, {"memberId", Types.BIGINT},
		{"primaryDiagCode", Types.VARCHAR}, {"primaryCode", Types.VARCHAR},
		{"status", Types.VARCHAR}, {"estimateEntryDate", Types.TIMESTAMP},
		{"caseManager", Types.VARCHAR},
		{"consentReceivedDate", Types.TIMESTAMP},
		{"medicalPlan", Types.VARCHAR}, {"costEstimate", Types.VARCHAR},
		{"lastUpdated", Types.TIMESTAMP},
		{"externalCreatedDate", Types.TIMESTAMP},
		{"chargedAmount", Types.DOUBLE}, {"paidAmount", Types.DOUBLE},
		{"repricedAmount", Types.DOUBLE}, {"savingsAmount", Types.DOUBLE},
		{"savingsPercent", Types.DOUBLE}, {"treatingPhysician", Types.VARCHAR},
		{"primaryFacility", Types.VARCHAR}, {"rowProcessed", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("caseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("externalCaseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("clientId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("clientName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("clientGroupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("caseNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("caseStartDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("caseEndDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("memberId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("primaryDiagCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primaryCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("estimateEntryDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("caseManager", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("consentReceivedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("medicalPlan", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("costEstimate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastUpdated", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("externalCreatedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("chargedAmount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("paidAmount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("repricedAmount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("savingsAmount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("savingsPercent", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("treatingPhysician", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primaryFacility", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rowProcessed", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OTH_Cases (uuid_ VARCHAR(75) null,caseId LONG not null primary key,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,externalCaseId LONG,clientId LONG,clientName VARCHAR(75) null,clientGroupId LONG,caseNumber VARCHAR(75) null,caseStartDate DATE null,caseEndDate DATE null,memberId LONG,primaryDiagCode VARCHAR(1000) null,primaryCode VARCHAR(1000) null,status VARCHAR(75) null,estimateEntryDate DATE null,caseManager VARCHAR(75) null,consentReceivedDate DATE null,medicalPlan VARCHAR(1000) null,costEstimate VARCHAR(75) null,lastUpdated DATE null,externalCreatedDate DATE null,chargedAmount DOUBLE,paidAmount DOUBLE,repricedAmount DOUBLE,savingsAmount DOUBLE,savingsPercent DOUBLE,treatingPhysician VARCHAR(1000) null,primaryFacility VARCHAR(1000) null,rowProcessed VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table OTH_Cases";

	public static final String ORDER_BY_JPQL =
		" ORDER BY cases.lastUpdated ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OTH_Cases.lastUpdated ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long CLIENTID_COLUMN_BITMASK = 1L;

	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	public static final long EXTERNALCASEID_COLUMN_BITMASK = 4L;

	public static final long GROUPID_COLUMN_BITMASK = 8L;

	public static final long ROWPROCESSED_COLUMN_BITMASK = 16L;

	public static final long UUID_COLUMN_BITMASK = 32L;

	public static final long LASTUPDATED_COLUMN_BITMASK = 64L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Cases toModel(CasesSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Cases model = new CasesImpl();

		model.setUuid(soapModel.getUuid());
		model.setCaseId(soapModel.getCaseId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setExternalCaseId(soapModel.getExternalCaseId());
		model.setClientId(soapModel.getClientId());
		model.setClientName(soapModel.getClientName());
		model.setClientGroupId(soapModel.getClientGroupId());
		model.setCaseNumber(soapModel.getCaseNumber());
		model.setCaseStartDate(soapModel.getCaseStartDate());
		model.setCaseEndDate(soapModel.getCaseEndDate());
		model.setMemberId(soapModel.getMemberId());
		model.setPrimaryDiagCode(soapModel.getPrimaryDiagCode());
		model.setPrimaryCode(soapModel.getPrimaryCode());
		model.setStatus(soapModel.getStatus());
		model.setEstimateEntryDate(soapModel.getEstimateEntryDate());
		model.setCaseManager(soapModel.getCaseManager());
		model.setConsentReceivedDate(soapModel.getConsentReceivedDate());
		model.setMedicalPlan(soapModel.getMedicalPlan());
		model.setCostEstimate(soapModel.getCostEstimate());
		model.setLastUpdated(soapModel.getLastUpdated());
		model.setExternalCreatedDate(soapModel.getExternalCreatedDate());
		model.setChargedAmount(soapModel.getChargedAmount());
		model.setPaidAmount(soapModel.getPaidAmount());
		model.setRepricedAmount(soapModel.getRepricedAmount());
		model.setSavingsAmount(soapModel.getSavingsAmount());
		model.setSavingsPercent(soapModel.getSavingsPercent());
		model.setTreatingPhysician(soapModel.getTreatingPhysician());
		model.setPrimaryFacility(soapModel.getPrimaryFacility());
		model.setRowProcessed(soapModel.getRowProcessed());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Cases> toModels(CasesSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Cases> models = new ArrayList<Cases>(soapModels.length);

		for (CasesSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public CasesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _caseId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCaseId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _caseId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Cases.class;
	}

	@Override
	public String getModelClassName() {
		return Cases.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Cases, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Cases, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Cases, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Cases)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Cases, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Cases, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Cases)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Cases, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Cases, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Cases>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Cases.class.getClassLoader(), Cases.class, ModelWrapper.class);

		try {
			Constructor<Cases> constructor =
				(Constructor<Cases>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Cases, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Cases, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Cases, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Cases, Object>>();
		Map<String, BiConsumer<Cases, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Cases, ?>>();

		attributeGetterFunctions.put("uuid", Cases::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Cases, String>)Cases::setUuid);
		attributeGetterFunctions.put("caseId", Cases::getCaseId);
		attributeSetterBiConsumers.put(
			"caseId", (BiConsumer<Cases, Long>)Cases::setCaseId);
		attributeGetterFunctions.put("groupId", Cases::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Cases, Long>)Cases::setGroupId);
		attributeGetterFunctions.put("companyId", Cases::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Cases, Long>)Cases::setCompanyId);
		attributeGetterFunctions.put("createDate", Cases::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Cases, Date>)Cases::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Cases::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Cases, Date>)Cases::setModifiedDate);
		attributeGetterFunctions.put(
			"externalCaseId", Cases::getExternalCaseId);
		attributeSetterBiConsumers.put(
			"externalCaseId",
			(BiConsumer<Cases, Long>)Cases::setExternalCaseId);
		attributeGetterFunctions.put("clientId", Cases::getClientId);
		attributeSetterBiConsumers.put(
			"clientId", (BiConsumer<Cases, Long>)Cases::setClientId);
		attributeGetterFunctions.put("clientName", Cases::getClientName);
		attributeSetterBiConsumers.put(
			"clientName", (BiConsumer<Cases, String>)Cases::setClientName);
		attributeGetterFunctions.put("clientGroupId", Cases::getClientGroupId);
		attributeSetterBiConsumers.put(
			"clientGroupId", (BiConsumer<Cases, Long>)Cases::setClientGroupId);
		attributeGetterFunctions.put("caseNumber", Cases::getCaseNumber);
		attributeSetterBiConsumers.put(
			"caseNumber", (BiConsumer<Cases, String>)Cases::setCaseNumber);
		attributeGetterFunctions.put("caseStartDate", Cases::getCaseStartDate);
		attributeSetterBiConsumers.put(
			"caseStartDate", (BiConsumer<Cases, Date>)Cases::setCaseStartDate);
		attributeGetterFunctions.put("caseEndDate", Cases::getCaseEndDate);
		attributeSetterBiConsumers.put(
			"caseEndDate", (BiConsumer<Cases, Date>)Cases::setCaseEndDate);
		attributeGetterFunctions.put("memberId", Cases::getMemberId);
		attributeSetterBiConsumers.put(
			"memberId", (BiConsumer<Cases, Long>)Cases::setMemberId);
		attributeGetterFunctions.put(
			"primaryDiagCode", Cases::getPrimaryDiagCode);
		attributeSetterBiConsumers.put(
			"primaryDiagCode",
			(BiConsumer<Cases, String>)Cases::setPrimaryDiagCode);
		attributeGetterFunctions.put("primaryCode", Cases::getPrimaryCode);
		attributeSetterBiConsumers.put(
			"primaryCode", (BiConsumer<Cases, String>)Cases::setPrimaryCode);
		attributeGetterFunctions.put("status", Cases::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Cases, String>)Cases::setStatus);
		attributeGetterFunctions.put(
			"estimateEntryDate", Cases::getEstimateEntryDate);
		attributeSetterBiConsumers.put(
			"estimateEntryDate",
			(BiConsumer<Cases, Date>)Cases::setEstimateEntryDate);
		attributeGetterFunctions.put("caseManager", Cases::getCaseManager);
		attributeSetterBiConsumers.put(
			"caseManager", (BiConsumer<Cases, String>)Cases::setCaseManager);
		attributeGetterFunctions.put(
			"consentReceivedDate", Cases::getConsentReceivedDate);
		attributeSetterBiConsumers.put(
			"consentReceivedDate",
			(BiConsumer<Cases, Date>)Cases::setConsentReceivedDate);
		attributeGetterFunctions.put("medicalPlan", Cases::getMedicalPlan);
		attributeSetterBiConsumers.put(
			"medicalPlan", (BiConsumer<Cases, String>)Cases::setMedicalPlan);
		attributeGetterFunctions.put("costEstimate", Cases::getCostEstimate);
		attributeSetterBiConsumers.put(
			"costEstimate", (BiConsumer<Cases, String>)Cases::setCostEstimate);
		attributeGetterFunctions.put("lastUpdated", Cases::getLastUpdated);
		attributeSetterBiConsumers.put(
			"lastUpdated", (BiConsumer<Cases, Date>)Cases::setLastUpdated);
		attributeGetterFunctions.put(
			"externalCreatedDate", Cases::getExternalCreatedDate);
		attributeSetterBiConsumers.put(
			"externalCreatedDate",
			(BiConsumer<Cases, Date>)Cases::setExternalCreatedDate);
		attributeGetterFunctions.put("chargedAmount", Cases::getChargedAmount);
		attributeSetterBiConsumers.put(
			"chargedAmount",
			(BiConsumer<Cases, Double>)Cases::setChargedAmount);
		attributeGetterFunctions.put("paidAmount", Cases::getPaidAmount);
		attributeSetterBiConsumers.put(
			"paidAmount", (BiConsumer<Cases, Double>)Cases::setPaidAmount);
		attributeGetterFunctions.put(
			"repricedAmount", Cases::getRepricedAmount);
		attributeSetterBiConsumers.put(
			"repricedAmount",
			(BiConsumer<Cases, Double>)Cases::setRepricedAmount);
		attributeGetterFunctions.put("savingsAmount", Cases::getSavingsAmount);
		attributeSetterBiConsumers.put(
			"savingsAmount",
			(BiConsumer<Cases, Double>)Cases::setSavingsAmount);
		attributeGetterFunctions.put(
			"savingsPercent", Cases::getSavingsPercent);
		attributeSetterBiConsumers.put(
			"savingsPercent",
			(BiConsumer<Cases, Double>)Cases::setSavingsPercent);
		attributeGetterFunctions.put(
			"treatingPhysician", Cases::getTreatingPhysician);
		attributeSetterBiConsumers.put(
			"treatingPhysician",
			(BiConsumer<Cases, String>)Cases::setTreatingPhysician);
		attributeGetterFunctions.put(
			"primaryFacility", Cases::getPrimaryFacility);
		attributeSetterBiConsumers.put(
			"primaryFacility",
			(BiConsumer<Cases, String>)Cases::setPrimaryFacility);
		attributeGetterFunctions.put("rowProcessed", Cases::getRowProcessed);
		attributeSetterBiConsumers.put(
			"rowProcessed", (BiConsumer<Cases, String>)Cases::setRowProcessed);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getCaseId() {
		return _caseId;
	}

	@Override
	public void setCaseId(long caseId) {
		_caseId = caseId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getExternalCaseId() {
		return _externalCaseId;
	}

	@Override
	public void setExternalCaseId(long externalCaseId) {
		_columnBitmask |= EXTERNALCASEID_COLUMN_BITMASK;

		if (!_setOriginalExternalCaseId) {
			_setOriginalExternalCaseId = true;

			_originalExternalCaseId = _externalCaseId;
		}

		_externalCaseId = externalCaseId;
	}

	public long getOriginalExternalCaseId() {
		return _originalExternalCaseId;
	}

	@JSON
	@Override
	public long getClientId() {
		return _clientId;
	}

	@Override
	public void setClientId(long clientId) {
		_columnBitmask |= CLIENTID_COLUMN_BITMASK;

		if (!_setOriginalClientId) {
			_setOriginalClientId = true;

			_originalClientId = _clientId;
		}

		_clientId = clientId;
	}

	public long getOriginalClientId() {
		return _originalClientId;
	}

	@JSON
	@Override
	public String getClientName() {
		if (_clientName == null) {
			return "";
		}
		else {
			return _clientName;
		}
	}

	@Override
	public void setClientName(String clientName) {
		_clientName = clientName;
	}

	@JSON
	@Override
	public long getClientGroupId() {
		return _clientGroupId;
	}

	@Override
	public void setClientGroupId(long clientGroupId) {
		_clientGroupId = clientGroupId;
	}

	@JSON
	@Override
	public String getCaseNumber() {
		if (_caseNumber == null) {
			return "";
		}
		else {
			return _caseNumber;
		}
	}

	@Override
	public void setCaseNumber(String caseNumber) {
		_caseNumber = caseNumber;
	}

	@JSON
	@Override
	public Date getCaseStartDate() {
		return _caseStartDate;
	}

	@Override
	public void setCaseStartDate(Date caseStartDate) {
		_caseStartDate = caseStartDate;
	}

	@JSON
	@Override
	public Date getCaseEndDate() {
		return _caseEndDate;
	}

	@Override
	public void setCaseEndDate(Date caseEndDate) {
		_caseEndDate = caseEndDate;
	}

	@JSON
	@Override
	public long getMemberId() {
		return _memberId;
	}

	@Override
	public void setMemberId(long memberId) {
		_memberId = memberId;
	}

	@JSON
	@Override
	public String getPrimaryDiagCode() {
		if (_primaryDiagCode == null) {
			return "";
		}
		else {
			return _primaryDiagCode;
		}
	}

	@Override
	public void setPrimaryDiagCode(String primaryDiagCode) {
		_primaryDiagCode = primaryDiagCode;
	}

	@JSON
	@Override
	public String getPrimaryCode() {
		if (_primaryCode == null) {
			return "";
		}
		else {
			return _primaryCode;
		}
	}

	@Override
	public void setPrimaryCode(String primaryCode) {
		_primaryCode = primaryCode;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@JSON
	@Override
	public Date getEstimateEntryDate() {
		return _estimateEntryDate;
	}

	@Override
	public void setEstimateEntryDate(Date estimateEntryDate) {
		_estimateEntryDate = estimateEntryDate;
	}

	@JSON
	@Override
	public String getCaseManager() {
		if (_caseManager == null) {
			return "";
		}
		else {
			return _caseManager;
		}
	}

	@Override
	public void setCaseManager(String caseManager) {
		_caseManager = caseManager;
	}

	@JSON
	@Override
	public Date getConsentReceivedDate() {
		return _consentReceivedDate;
	}

	@Override
	public void setConsentReceivedDate(Date consentReceivedDate) {
		_consentReceivedDate = consentReceivedDate;
	}

	@JSON
	@Override
	public String getMedicalPlan() {
		if (_medicalPlan == null) {
			return "";
		}
		else {
			return _medicalPlan;
		}
	}

	@Override
	public void setMedicalPlan(String medicalPlan) {
		_medicalPlan = medicalPlan;
	}

	@JSON
	@Override
	public String getCostEstimate() {
		if (_costEstimate == null) {
			return "";
		}
		else {
			return _costEstimate;
		}
	}

	@Override
	public void setCostEstimate(String costEstimate) {
		_costEstimate = costEstimate;
	}

	@JSON
	@Override
	public Date getLastUpdated() {
		return _lastUpdated;
	}

	@Override
	public void setLastUpdated(Date lastUpdated) {
		_columnBitmask = -1L;

		_lastUpdated = lastUpdated;
	}

	@JSON
	@Override
	public Date getExternalCreatedDate() {
		return _externalCreatedDate;
	}

	@Override
	public void setExternalCreatedDate(Date externalCreatedDate) {
		_externalCreatedDate = externalCreatedDate;
	}

	@JSON
	@Override
	public double getChargedAmount() {
		return _chargedAmount;
	}

	@Override
	public void setChargedAmount(double chargedAmount) {
		_chargedAmount = chargedAmount;
	}

	@JSON
	@Override
	public double getPaidAmount() {
		return _paidAmount;
	}

	@Override
	public void setPaidAmount(double paidAmount) {
		_paidAmount = paidAmount;
	}

	@JSON
	@Override
	public double getRepricedAmount() {
		return _repricedAmount;
	}

	@Override
	public void setRepricedAmount(double repricedAmount) {
		_repricedAmount = repricedAmount;
	}

	@JSON
	@Override
	public double getSavingsAmount() {
		return _savingsAmount;
	}

	@Override
	public void setSavingsAmount(double savingsAmount) {
		_savingsAmount = savingsAmount;
	}

	@JSON
	@Override
	public double getSavingsPercent() {
		return _savingsPercent;
	}

	@Override
	public void setSavingsPercent(double savingsPercent) {
		_savingsPercent = savingsPercent;
	}

	@JSON
	@Override
	public String getTreatingPhysician() {
		if (_treatingPhysician == null) {
			return "";
		}
		else {
			return _treatingPhysician;
		}
	}

	@Override
	public void setTreatingPhysician(String treatingPhysician) {
		_treatingPhysician = treatingPhysician;
	}

	@JSON
	@Override
	public String getPrimaryFacility() {
		if (_primaryFacility == null) {
			return "";
		}
		else {
			return _primaryFacility;
		}
	}

	@Override
	public void setPrimaryFacility(String primaryFacility) {
		_primaryFacility = primaryFacility;
	}

	@JSON
	@Override
	public String getRowProcessed() {
		if (_rowProcessed == null) {
			return "";
		}
		else {
			return _rowProcessed;
		}
	}

	@Override
	public void setRowProcessed(String rowProcessed) {
		_columnBitmask |= ROWPROCESSED_COLUMN_BITMASK;

		if (_originalRowProcessed == null) {
			_originalRowProcessed = _rowProcessed;
		}

		_rowProcessed = rowProcessed;
	}

	public String getOriginalRowProcessed() {
		return GetterUtil.getString(_originalRowProcessed);
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Cases.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Cases.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Cases toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Cases>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CasesImpl casesImpl = new CasesImpl();

		casesImpl.setUuid(getUuid());
		casesImpl.setCaseId(getCaseId());
		casesImpl.setGroupId(getGroupId());
		casesImpl.setCompanyId(getCompanyId());
		casesImpl.setCreateDate(getCreateDate());
		casesImpl.setModifiedDate(getModifiedDate());
		casesImpl.setExternalCaseId(getExternalCaseId());
		casesImpl.setClientId(getClientId());
		casesImpl.setClientName(getClientName());
		casesImpl.setClientGroupId(getClientGroupId());
		casesImpl.setCaseNumber(getCaseNumber());
		casesImpl.setCaseStartDate(getCaseStartDate());
		casesImpl.setCaseEndDate(getCaseEndDate());
		casesImpl.setMemberId(getMemberId());
		casesImpl.setPrimaryDiagCode(getPrimaryDiagCode());
		casesImpl.setPrimaryCode(getPrimaryCode());
		casesImpl.setStatus(getStatus());
		casesImpl.setEstimateEntryDate(getEstimateEntryDate());
		casesImpl.setCaseManager(getCaseManager());
		casesImpl.setConsentReceivedDate(getConsentReceivedDate());
		casesImpl.setMedicalPlan(getMedicalPlan());
		casesImpl.setCostEstimate(getCostEstimate());
		casesImpl.setLastUpdated(getLastUpdated());
		casesImpl.setExternalCreatedDate(getExternalCreatedDate());
		casesImpl.setChargedAmount(getChargedAmount());
		casesImpl.setPaidAmount(getPaidAmount());
		casesImpl.setRepricedAmount(getRepricedAmount());
		casesImpl.setSavingsAmount(getSavingsAmount());
		casesImpl.setSavingsPercent(getSavingsPercent());
		casesImpl.setTreatingPhysician(getTreatingPhysician());
		casesImpl.setPrimaryFacility(getPrimaryFacility());
		casesImpl.setRowProcessed(getRowProcessed());

		casesImpl.resetOriginalValues();

		return casesImpl;
	}

	@Override
	public int compareTo(Cases cases) {
		int value = 0;

		value = DateUtil.compareTo(getLastUpdated(), cases.getLastUpdated());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Cases)) {
			return false;
		}

		Cases cases = (Cases)obj;

		long primaryKey = cases.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		CasesModelImpl casesModelImpl = this;

		casesModelImpl._originalUuid = casesModelImpl._uuid;

		casesModelImpl._originalGroupId = casesModelImpl._groupId;

		casesModelImpl._setOriginalGroupId = false;

		casesModelImpl._originalCompanyId = casesModelImpl._companyId;

		casesModelImpl._setOriginalCompanyId = false;

		casesModelImpl._setModifiedDate = false;

		casesModelImpl._originalExternalCaseId = casesModelImpl._externalCaseId;

		casesModelImpl._setOriginalExternalCaseId = false;

		casesModelImpl._originalClientId = casesModelImpl._clientId;

		casesModelImpl._setOriginalClientId = false;

		casesModelImpl._originalRowProcessed = casesModelImpl._rowProcessed;

		casesModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Cases> toCacheModel() {
		CasesCacheModel casesCacheModel = new CasesCacheModel();

		casesCacheModel.uuid = getUuid();

		String uuid = casesCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			casesCacheModel.uuid = null;
		}

		casesCacheModel.caseId = getCaseId();

		casesCacheModel.groupId = getGroupId();

		casesCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			casesCacheModel.createDate = createDate.getTime();
		}
		else {
			casesCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			casesCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			casesCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		casesCacheModel.externalCaseId = getExternalCaseId();

		casesCacheModel.clientId = getClientId();

		casesCacheModel.clientName = getClientName();

		String clientName = casesCacheModel.clientName;

		if ((clientName != null) && (clientName.length() == 0)) {
			casesCacheModel.clientName = null;
		}

		casesCacheModel.clientGroupId = getClientGroupId();

		casesCacheModel.caseNumber = getCaseNumber();

		String caseNumber = casesCacheModel.caseNumber;

		if ((caseNumber != null) && (caseNumber.length() == 0)) {
			casesCacheModel.caseNumber = null;
		}

		Date caseStartDate = getCaseStartDate();

		if (caseStartDate != null) {
			casesCacheModel.caseStartDate = caseStartDate.getTime();
		}
		else {
			casesCacheModel.caseStartDate = Long.MIN_VALUE;
		}

		Date caseEndDate = getCaseEndDate();

		if (caseEndDate != null) {
			casesCacheModel.caseEndDate = caseEndDate.getTime();
		}
		else {
			casesCacheModel.caseEndDate = Long.MIN_VALUE;
		}

		casesCacheModel.memberId = getMemberId();

		casesCacheModel.primaryDiagCode = getPrimaryDiagCode();

		String primaryDiagCode = casesCacheModel.primaryDiagCode;

		if ((primaryDiagCode != null) && (primaryDiagCode.length() == 0)) {
			casesCacheModel.primaryDiagCode = null;
		}

		casesCacheModel.primaryCode = getPrimaryCode();

		String primaryCode = casesCacheModel.primaryCode;

		if ((primaryCode != null) && (primaryCode.length() == 0)) {
			casesCacheModel.primaryCode = null;
		}

		casesCacheModel.status = getStatus();

		String status = casesCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			casesCacheModel.status = null;
		}

		Date estimateEntryDate = getEstimateEntryDate();

		if (estimateEntryDate != null) {
			casesCacheModel.estimateEntryDate = estimateEntryDate.getTime();
		}
		else {
			casesCacheModel.estimateEntryDate = Long.MIN_VALUE;
		}

		casesCacheModel.caseManager = getCaseManager();

		String caseManager = casesCacheModel.caseManager;

		if ((caseManager != null) && (caseManager.length() == 0)) {
			casesCacheModel.caseManager = null;
		}

		Date consentReceivedDate = getConsentReceivedDate();

		if (consentReceivedDate != null) {
			casesCacheModel.consentReceivedDate = consentReceivedDate.getTime();
		}
		else {
			casesCacheModel.consentReceivedDate = Long.MIN_VALUE;
		}

		casesCacheModel.medicalPlan = getMedicalPlan();

		String medicalPlan = casesCacheModel.medicalPlan;

		if ((medicalPlan != null) && (medicalPlan.length() == 0)) {
			casesCacheModel.medicalPlan = null;
		}

		casesCacheModel.costEstimate = getCostEstimate();

		String costEstimate = casesCacheModel.costEstimate;

		if ((costEstimate != null) && (costEstimate.length() == 0)) {
			casesCacheModel.costEstimate = null;
		}

		Date lastUpdated = getLastUpdated();

		if (lastUpdated != null) {
			casesCacheModel.lastUpdated = lastUpdated.getTime();
		}
		else {
			casesCacheModel.lastUpdated = Long.MIN_VALUE;
		}

		Date externalCreatedDate = getExternalCreatedDate();

		if (externalCreatedDate != null) {
			casesCacheModel.externalCreatedDate = externalCreatedDate.getTime();
		}
		else {
			casesCacheModel.externalCreatedDate = Long.MIN_VALUE;
		}

		casesCacheModel.chargedAmount = getChargedAmount();

		casesCacheModel.paidAmount = getPaidAmount();

		casesCacheModel.repricedAmount = getRepricedAmount();

		casesCacheModel.savingsAmount = getSavingsAmount();

		casesCacheModel.savingsPercent = getSavingsPercent();

		casesCacheModel.treatingPhysician = getTreatingPhysician();

		String treatingPhysician = casesCacheModel.treatingPhysician;

		if ((treatingPhysician != null) && (treatingPhysician.length() == 0)) {
			casesCacheModel.treatingPhysician = null;
		}

		casesCacheModel.primaryFacility = getPrimaryFacility();

		String primaryFacility = casesCacheModel.primaryFacility;

		if ((primaryFacility != null) && (primaryFacility.length() == 0)) {
			casesCacheModel.primaryFacility = null;
		}

		casesCacheModel.rowProcessed = getRowProcessed();

		String rowProcessed = casesCacheModel.rowProcessed;

		if ((rowProcessed != null) && (rowProcessed.length() == 0)) {
			casesCacheModel.rowProcessed = null;
		}

		return casesCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Cases, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Cases, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Cases, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Cases)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Cases, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Cases, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Cases, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Cases)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Cases>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _caseId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _externalCaseId;
	private long _originalExternalCaseId;
	private boolean _setOriginalExternalCaseId;
	private long _clientId;
	private long _originalClientId;
	private boolean _setOriginalClientId;
	private String _clientName;
	private long _clientGroupId;
	private String _caseNumber;
	private Date _caseStartDate;
	private Date _caseEndDate;
	private long _memberId;
	private String _primaryDiagCode;
	private String _primaryCode;
	private String _status;
	private Date _estimateEntryDate;
	private String _caseManager;
	private Date _consentReceivedDate;
	private String _medicalPlan;
	private String _costEstimate;
	private Date _lastUpdated;
	private Date _externalCreatedDate;
	private double _chargedAmount;
	private double _paidAmount;
	private double _repricedAmount;
	private double _savingsAmount;
	private double _savingsPercent;
	private String _treatingPhysician;
	private String _primaryFacility;
	private String _rowProcessed;
	private String _originalRowProcessed;
	private long _columnBitmask;
	private Cases _escapedModel;

}