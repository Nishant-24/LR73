/*
 * argus-case-eapi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import io.swagger.client.model.CaseAuthorization;
import io.swagger.client.model.CaseAuthorizationUpdate;
import io.swagger.client.model.CaseDocument;
import io.swagger.client.model.CaseNote;
import io.swagger.client.model.CaseNotePost;
import io.swagger.client.model.CaseTaskPost;
import io.swagger.client.model.CaseTasks;
import io.swagger.client.model.ModelCase;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for v1CasesCaseIdAuthorizationsAuthorizationIdPatch
     * @param caseId Search by CaseId. (required)
     * @param authorizationId AuthorizationId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param generated  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1CasesCaseIdAuthorizationsAuthorizationIdPatchCall(BigDecimal caseId, BigDecimal authorizationId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, CaseAuthorizationUpdate generated, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = generated;

        // create path and map variables
        String localVarPath = "/v1/cases/{caseId}/authorizations/{authorizationId}"
            .replaceAll("\\{" + "caseId" + "\\}", apiClient.escapeString(caseId.toString()))
            .replaceAll("\\{" + "authorizationId" + "\\}", apiClient.escapeString(authorizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (clientSecret != null)
        localVarHeaderParams.put("client_secret", apiClient.parameterToString(clientSecret));
        if (xForwardedFor != null)
        localVarHeaderParams.put("X-Forwarded-For", apiClient.parameterToString(xForwardedFor));
        if (xCorrelationID != null)
        localVarHeaderParams.put("X-Correlation-ID", apiClient.parameterToString(xCorrelationID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1CasesCaseIdAuthorizationsAuthorizationIdPatchValidateBeforeCall(BigDecimal caseId, BigDecimal authorizationId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, CaseAuthorizationUpdate generated, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling v1CasesCaseIdAuthorizationsAuthorizationIdPatch(Async)");
        }
        
        // verify the required parameter 'authorizationId' is set
        if (authorizationId == null) {
            throw new ApiException("Missing the required parameter 'authorizationId' when calling v1CasesCaseIdAuthorizationsAuthorizationIdPatch(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1CasesCaseIdAuthorizationsAuthorizationIdPatch(Async)");
        }
        
        // verify the required parameter 'clientSecret' is set
        if (clientSecret == null) {
            throw new ApiException("Missing the required parameter 'clientSecret' when calling v1CasesCaseIdAuthorizationsAuthorizationIdPatch(Async)");
        }
        
        // verify the required parameter 'xForwardedFor' is set
        if (xForwardedFor == null) {
            throw new ApiException("Missing the required parameter 'xForwardedFor' when calling v1CasesCaseIdAuthorizationsAuthorizationIdPatch(Async)");
        }
        
        // verify the required parameter 'xCorrelationID' is set
        if (xCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'xCorrelationID' when calling v1CasesCaseIdAuthorizationsAuthorizationIdPatch(Async)");
        }
        

        com.squareup.okhttp.Call call = v1CasesCaseIdAuthorizationsAuthorizationIdPatchCall(caseId, authorizationId, clientId, clientSecret, xForwardedFor, xCorrelationID, generated, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Partial update Case Authorization by Id
     * @param caseId Search by CaseId. (required)
     * @param authorizationId AuthorizationId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param generated  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object v1CasesCaseIdAuthorizationsAuthorizationIdPatch(BigDecimal caseId, BigDecimal authorizationId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, CaseAuthorizationUpdate generated) throws ApiException {
        ApiResponse<Object> resp = v1CasesCaseIdAuthorizationsAuthorizationIdPatchWithHttpInfo(caseId, authorizationId, clientId, clientSecret, xForwardedFor, xCorrelationID, generated);
        return resp.getData();
    }

    /**
     * 
     * Partial update Case Authorization by Id
     * @param caseId Search by CaseId. (required)
     * @param authorizationId AuthorizationId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param generated  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> v1CasesCaseIdAuthorizationsAuthorizationIdPatchWithHttpInfo(BigDecimal caseId, BigDecimal authorizationId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, CaseAuthorizationUpdate generated) throws ApiException {
        com.squareup.okhttp.Call call = v1CasesCaseIdAuthorizationsAuthorizationIdPatchValidateBeforeCall(caseId, authorizationId, clientId, clientSecret, xForwardedFor, xCorrelationID, generated, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Partial update Case Authorization by Id
     * @param caseId Search by CaseId. (required)
     * @param authorizationId AuthorizationId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param generated  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1CasesCaseIdAuthorizationsAuthorizationIdPatchAsync(BigDecimal caseId, BigDecimal authorizationId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, CaseAuthorizationUpdate generated, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1CasesCaseIdAuthorizationsAuthorizationIdPatchValidateBeforeCall(caseId, authorizationId, clientId, clientSecret, xForwardedFor, xCorrelationID, generated, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1CasesCaseIdAuthorizationsGet
     * @param caseId Search by CaseId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param requestedDateTime  (optional)
     * @param offset Skip over a number of elements by specifying an offset value for the query (optional, default to 0)
     * @param limit Limit the number of elements on the response (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1CasesCaseIdAuthorizationsGetCall(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, String requestedDateTime, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cases/{caseId}/authorizations"
            .replaceAll("\\{" + "caseId" + "\\}", apiClient.escapeString(caseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (requestedDateTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("requestedDateTime", requestedDateTime));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (clientSecret != null)
        localVarHeaderParams.put("client_secret", apiClient.parameterToString(clientSecret));
        if (xForwardedFor != null)
        localVarHeaderParams.put("X-Forwarded-For", apiClient.parameterToString(xForwardedFor));
        if (xCorrelationID != null)
        localVarHeaderParams.put("X-Correlation-ID", apiClient.parameterToString(xCorrelationID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1CasesCaseIdAuthorizationsGetValidateBeforeCall(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, String requestedDateTime, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling v1CasesCaseIdAuthorizationsGet(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1CasesCaseIdAuthorizationsGet(Async)");
        }
        
        // verify the required parameter 'clientSecret' is set
        if (clientSecret == null) {
            throw new ApiException("Missing the required parameter 'clientSecret' when calling v1CasesCaseIdAuthorizationsGet(Async)");
        }
        
        // verify the required parameter 'xForwardedFor' is set
        if (xForwardedFor == null) {
            throw new ApiException("Missing the required parameter 'xForwardedFor' when calling v1CasesCaseIdAuthorizationsGet(Async)");
        }
        
        // verify the required parameter 'xCorrelationID' is set
        if (xCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'xCorrelationID' when calling v1CasesCaseIdAuthorizationsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = v1CasesCaseIdAuthorizationsGetCall(caseId, clientId, clientSecret, xForwardedFor, xCorrelationID, requestedDateTime, offset, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get all Case Authorizations
     * @param caseId Search by CaseId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param requestedDateTime  (optional)
     * @param offset Skip over a number of elements by specifying an offset value for the query (optional, default to 0)
     * @param limit Limit the number of elements on the response (optional, default to 10)
     * @return List&lt;CaseAuthorization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CaseAuthorization> v1CasesCaseIdAuthorizationsGet(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, String requestedDateTime, Integer offset, Integer limit) throws ApiException {
        ApiResponse<List<CaseAuthorization>> resp = v1CasesCaseIdAuthorizationsGetWithHttpInfo(caseId, clientId, clientSecret, xForwardedFor, xCorrelationID, requestedDateTime, offset, limit);
        return resp.getData();
    }

    /**
     * 
     * Get all Case Authorizations
     * @param caseId Search by CaseId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param requestedDateTime  (optional)
     * @param offset Skip over a number of elements by specifying an offset value for the query (optional, default to 0)
     * @param limit Limit the number of elements on the response (optional, default to 10)
     * @return ApiResponse&lt;List&lt;CaseAuthorization&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CaseAuthorization>> v1CasesCaseIdAuthorizationsGetWithHttpInfo(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, String requestedDateTime, Integer offset, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = v1CasesCaseIdAuthorizationsGetValidateBeforeCall(caseId, clientId, clientSecret, xForwardedFor, xCorrelationID, requestedDateTime, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<List<CaseAuthorization>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all Case Authorizations
     * @param caseId Search by CaseId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param requestedDateTime  (optional)
     * @param offset Skip over a number of elements by specifying an offset value for the query (optional, default to 0)
     * @param limit Limit the number of elements on the response (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1CasesCaseIdAuthorizationsGetAsync(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, String requestedDateTime, Integer offset, Integer limit, final ApiCallback<List<CaseAuthorization>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1CasesCaseIdAuthorizationsGetValidateBeforeCall(caseId, clientId, clientSecret, xForwardedFor, xCorrelationID, requestedDateTime, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CaseAuthorization>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1CasesCaseIdDocumentsDocumentIdGet
     * @param caseId Search by CaseId. (required)
     * @param documentId Document Id (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1CasesCaseIdDocumentsDocumentIdGetCall(BigDecimal caseId, BigDecimal documentId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cases/{caseId}/documents/{documentId}"
            .replaceAll("\\{" + "caseId" + "\\}", apiClient.escapeString(caseId.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", apiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (clientSecret != null)
        localVarHeaderParams.put("client_secret", apiClient.parameterToString(clientSecret));
        if (xForwardedFor != null)
        localVarHeaderParams.put("X-Forwarded-For", apiClient.parameterToString(xForwardedFor));
        if (xCorrelationID != null)
        localVarHeaderParams.put("X-Correlation-ID", apiClient.parameterToString(xCorrelationID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1CasesCaseIdDocumentsDocumentIdGetValidateBeforeCall(BigDecimal caseId, BigDecimal documentId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling v1CasesCaseIdDocumentsDocumentIdGet(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling v1CasesCaseIdDocumentsDocumentIdGet(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1CasesCaseIdDocumentsDocumentIdGet(Async)");
        }
        
        // verify the required parameter 'clientSecret' is set
        if (clientSecret == null) {
            throw new ApiException("Missing the required parameter 'clientSecret' when calling v1CasesCaseIdDocumentsDocumentIdGet(Async)");
        }
        
        // verify the required parameter 'xForwardedFor' is set
        if (xForwardedFor == null) {
            throw new ApiException("Missing the required parameter 'xForwardedFor' when calling v1CasesCaseIdDocumentsDocumentIdGet(Async)");
        }
        
        // verify the required parameter 'xCorrelationID' is set
        if (xCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'xCorrelationID' when calling v1CasesCaseIdDocumentsDocumentIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = v1CasesCaseIdDocumentsDocumentIdGetCall(caseId, documentId, clientId, clientSecret, xForwardedFor, xCorrelationID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get the file content
     * @param caseId Search by CaseId. (required)
     * @param documentId Document Id (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object v1CasesCaseIdDocumentsDocumentIdGet(BigDecimal caseId, BigDecimal documentId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID) throws ApiException {
        ApiResponse<Object> resp = v1CasesCaseIdDocumentsDocumentIdGetWithHttpInfo(caseId, documentId, clientId, clientSecret, xForwardedFor, xCorrelationID);
        return resp.getData();
    }

    /**
     * 
     * Get the file content
     * @param caseId Search by CaseId. (required)
     * @param documentId Document Id (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> v1CasesCaseIdDocumentsDocumentIdGetWithHttpInfo(BigDecimal caseId, BigDecimal documentId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID) throws ApiException {
        com.squareup.okhttp.Call call = v1CasesCaseIdDocumentsDocumentIdGetValidateBeforeCall(caseId, documentId, clientId, clientSecret, xForwardedFor, xCorrelationID, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the file content
     * @param caseId Search by CaseId. (required)
     * @param documentId Document Id (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1CasesCaseIdDocumentsDocumentIdGetAsync(BigDecimal caseId, BigDecimal documentId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1CasesCaseIdDocumentsDocumentIdGetValidateBeforeCall(caseId, documentId, clientId, clientSecret, xForwardedFor, xCorrelationID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1CasesCaseIdDocumentsGet
     * @param caseId Search by CaseId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param requestedDateTime  (optional)
     * @param offset Skip over a number of elements by specifying an offset value for the query (optional, default to 0)
     * @param limit Limit the number of elements on the response (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1CasesCaseIdDocumentsGetCall(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, String requestedDateTime, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cases/{caseId}/documents"
            .replaceAll("\\{" + "caseId" + "\\}", apiClient.escapeString(caseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (requestedDateTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("requestedDateTime", requestedDateTime));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (clientSecret != null)
        localVarHeaderParams.put("client_secret", apiClient.parameterToString(clientSecret));
        if (xForwardedFor != null)
        localVarHeaderParams.put("X-Forwarded-For", apiClient.parameterToString(xForwardedFor));
        if (xCorrelationID != null)
        localVarHeaderParams.put("X-Correlation-ID", apiClient.parameterToString(xCorrelationID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1CasesCaseIdDocumentsGetValidateBeforeCall(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, String requestedDateTime, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling v1CasesCaseIdDocumentsGet(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1CasesCaseIdDocumentsGet(Async)");
        }
        
        // verify the required parameter 'clientSecret' is set
        if (clientSecret == null) {
            throw new ApiException("Missing the required parameter 'clientSecret' when calling v1CasesCaseIdDocumentsGet(Async)");
        }
        
        // verify the required parameter 'xForwardedFor' is set
        if (xForwardedFor == null) {
            throw new ApiException("Missing the required parameter 'xForwardedFor' when calling v1CasesCaseIdDocumentsGet(Async)");
        }
        
        // verify the required parameter 'xCorrelationID' is set
        if (xCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'xCorrelationID' when calling v1CasesCaseIdDocumentsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = v1CasesCaseIdDocumentsGetCall(caseId, clientId, clientSecret, xForwardedFor, xCorrelationID, requestedDateTime, offset, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get all Case documents
     * @param caseId Search by CaseId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param requestedDateTime  (optional)
     * @param offset Skip over a number of elements by specifying an offset value for the query (optional, default to 0)
     * @param limit Limit the number of elements on the response (optional, default to 10)
     * @return List&lt;CaseDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CaseDocument> v1CasesCaseIdDocumentsGet(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, String requestedDateTime, Integer offset, Integer limit) throws ApiException {
        ApiResponse<List<CaseDocument>> resp = v1CasesCaseIdDocumentsGetWithHttpInfo(caseId, clientId, clientSecret, xForwardedFor, xCorrelationID, requestedDateTime, offset, limit);
        return resp.getData();
    }

    /**
     * 
     * Get all Case documents
     * @param caseId Search by CaseId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param requestedDateTime  (optional)
     * @param offset Skip over a number of elements by specifying an offset value for the query (optional, default to 0)
     * @param limit Limit the number of elements on the response (optional, default to 10)
     * @return ApiResponse&lt;List&lt;CaseDocument&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CaseDocument>> v1CasesCaseIdDocumentsGetWithHttpInfo(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, String requestedDateTime, Integer offset, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = v1CasesCaseIdDocumentsGetValidateBeforeCall(caseId, clientId, clientSecret, xForwardedFor, xCorrelationID, requestedDateTime, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<List<CaseDocument>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all Case documents
     * @param caseId Search by CaseId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param requestedDateTime  (optional)
     * @param offset Skip over a number of elements by specifying an offset value for the query (optional, default to 0)
     * @param limit Limit the number of elements on the response (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1CasesCaseIdDocumentsGetAsync(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, String requestedDateTime, Integer offset, Integer limit, final ApiCallback<List<CaseDocument>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1CasesCaseIdDocumentsGetValidateBeforeCall(caseId, clientId, clientSecret, xForwardedFor, xCorrelationID, requestedDateTime, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CaseDocument>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1CasesCaseIdNotesGet
     * @param caseId Search by CaseId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param requestedDateTime  (optional)
     * @param offset Skip over a number of elements by specifying an offset value for the query (optional, default to 0)
     * @param limit Limit the number of elements on the response (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1CasesCaseIdNotesGetCall(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, String requestedDateTime, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cases/{caseId}/notes"
            .replaceAll("\\{" + "caseId" + "\\}", apiClient.escapeString(caseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (requestedDateTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("requestedDateTime", requestedDateTime));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (clientSecret != null)
        localVarHeaderParams.put("client_secret", apiClient.parameterToString(clientSecret));
        if (xForwardedFor != null)
        localVarHeaderParams.put("X-Forwarded-For", apiClient.parameterToString(xForwardedFor));
        if (xCorrelationID != null)
        localVarHeaderParams.put("X-Correlation-ID", apiClient.parameterToString(xCorrelationID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1CasesCaseIdNotesGetValidateBeforeCall(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, String requestedDateTime, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling v1CasesCaseIdNotesGet(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1CasesCaseIdNotesGet(Async)");
        }
        
        // verify the required parameter 'clientSecret' is set
        if (clientSecret == null) {
            throw new ApiException("Missing the required parameter 'clientSecret' when calling v1CasesCaseIdNotesGet(Async)");
        }
        
        // verify the required parameter 'xForwardedFor' is set
        if (xForwardedFor == null) {
            throw new ApiException("Missing the required parameter 'xForwardedFor' when calling v1CasesCaseIdNotesGet(Async)");
        }
        
        // verify the required parameter 'xCorrelationID' is set
        if (xCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'xCorrelationID' when calling v1CasesCaseIdNotesGet(Async)");
        }
        

        com.squareup.okhttp.Call call = v1CasesCaseIdNotesGetCall(caseId, clientId, clientSecret, xForwardedFor, xCorrelationID, requestedDateTime, offset, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get all Case Notes
     * @param caseId Search by CaseId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param requestedDateTime  (optional)
     * @param offset Skip over a number of elements by specifying an offset value for the query (optional, default to 0)
     * @param limit Limit the number of elements on the response (optional, default to 10)
     * @return List&lt;CaseNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CaseNote> v1CasesCaseIdNotesGet(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, String requestedDateTime, Integer offset, Integer limit) throws ApiException {
        ApiResponse<List<CaseNote>> resp = v1CasesCaseIdNotesGetWithHttpInfo(caseId, clientId, clientSecret, xForwardedFor, xCorrelationID, requestedDateTime, offset, limit);
        return resp.getData();
    }

    /**
     * 
     * Get all Case Notes
     * @param caseId Search by CaseId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param requestedDateTime  (optional)
     * @param offset Skip over a number of elements by specifying an offset value for the query (optional, default to 0)
     * @param limit Limit the number of elements on the response (optional, default to 10)
     * @return ApiResponse&lt;List&lt;CaseNote&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CaseNote>> v1CasesCaseIdNotesGetWithHttpInfo(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, String requestedDateTime, Integer offset, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = v1CasesCaseIdNotesGetValidateBeforeCall(caseId, clientId, clientSecret, xForwardedFor, xCorrelationID, requestedDateTime, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<List<CaseNote>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all Case Notes
     * @param caseId Search by CaseId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param requestedDateTime  (optional)
     * @param offset Skip over a number of elements by specifying an offset value for the query (optional, default to 0)
     * @param limit Limit the number of elements on the response (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1CasesCaseIdNotesGetAsync(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, String requestedDateTime, Integer offset, Integer limit, final ApiCallback<List<CaseNote>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1CasesCaseIdNotesGetValidateBeforeCall(caseId, clientId, clientSecret, xForwardedFor, xCorrelationID, requestedDateTime, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CaseNote>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1CasesCaseIdNotesPost
     * @param caseId Search by CaseId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param generated  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1CasesCaseIdNotesPostCall(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, CaseNotePost generated, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = generated;

        // create path and map variables
        String localVarPath = "/v1/cases/{caseId}/notes"
            .replaceAll("\\{" + "caseId" + "\\}", apiClient.escapeString(caseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (clientSecret != null)
        localVarHeaderParams.put("client_secret", apiClient.parameterToString(clientSecret));
        if (xForwardedFor != null)
        localVarHeaderParams.put("X-Forwarded-For", apiClient.parameterToString(xForwardedFor));
        if (xCorrelationID != null)
        localVarHeaderParams.put("X-Correlation-ID", apiClient.parameterToString(xCorrelationID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1CasesCaseIdNotesPostValidateBeforeCall(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, CaseNotePost generated, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling v1CasesCaseIdNotesPost(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1CasesCaseIdNotesPost(Async)");
        }
        
        // verify the required parameter 'clientSecret' is set
        if (clientSecret == null) {
            throw new ApiException("Missing the required parameter 'clientSecret' when calling v1CasesCaseIdNotesPost(Async)");
        }
        
        // verify the required parameter 'xForwardedFor' is set
        if (xForwardedFor == null) {
            throw new ApiException("Missing the required parameter 'xForwardedFor' when calling v1CasesCaseIdNotesPost(Async)");
        }
        
        // verify the required parameter 'xCorrelationID' is set
        if (xCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'xCorrelationID' when calling v1CasesCaseIdNotesPost(Async)");
        }
        

        com.squareup.okhttp.Call call = v1CasesCaseIdNotesPostCall(caseId, clientId, clientSecret, xForwardedFor, xCorrelationID, generated, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create Case Note
     * @param caseId Search by CaseId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param generated  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object v1CasesCaseIdNotesPost(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, CaseNotePost generated) throws ApiException {
        ApiResponse<Object> resp = v1CasesCaseIdNotesPostWithHttpInfo(caseId, clientId, clientSecret, xForwardedFor, xCorrelationID, generated);
        return resp.getData();
    }

    /**
     * 
     * Create Case Note
     * @param caseId Search by CaseId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param generated  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> v1CasesCaseIdNotesPostWithHttpInfo(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, CaseNotePost generated) throws ApiException {
        com.squareup.okhttp.Call call = v1CasesCaseIdNotesPostValidateBeforeCall(caseId, clientId, clientSecret, xForwardedFor, xCorrelationID, generated, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create Case Note
     * @param caseId Search by CaseId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param generated  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1CasesCaseIdNotesPostAsync(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, CaseNotePost generated, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1CasesCaseIdNotesPostValidateBeforeCall(caseId, clientId, clientSecret, xForwardedFor, xCorrelationID, generated, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1CasesCaseIdTasksGet
     * @param caseId Search by CaseId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param requestedDateTime  (optional)
     * @param offset Skip over a number of elements by specifying an offset value for the query (optional, default to 0)
     * @param limit Limit the number of elements on the response (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1CasesCaseIdTasksGetCall(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, String requestedDateTime, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cases/{caseId}/tasks"
            .replaceAll("\\{" + "caseId" + "\\}", apiClient.escapeString(caseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (requestedDateTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("requestedDateTime", requestedDateTime));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (clientSecret != null)
        localVarHeaderParams.put("client_secret", apiClient.parameterToString(clientSecret));
        if (xForwardedFor != null)
        localVarHeaderParams.put("X-Forwarded-For", apiClient.parameterToString(xForwardedFor));
        if (xCorrelationID != null)
        localVarHeaderParams.put("X-Correlation-ID", apiClient.parameterToString(xCorrelationID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1CasesCaseIdTasksGetValidateBeforeCall(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, String requestedDateTime, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling v1CasesCaseIdTasksGet(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1CasesCaseIdTasksGet(Async)");
        }
        
        // verify the required parameter 'clientSecret' is set
        if (clientSecret == null) {
            throw new ApiException("Missing the required parameter 'clientSecret' when calling v1CasesCaseIdTasksGet(Async)");
        }
        
        // verify the required parameter 'xForwardedFor' is set
        if (xForwardedFor == null) {
            throw new ApiException("Missing the required parameter 'xForwardedFor' when calling v1CasesCaseIdTasksGet(Async)");
        }
        
        // verify the required parameter 'xCorrelationID' is set
        if (xCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'xCorrelationID' when calling v1CasesCaseIdTasksGet(Async)");
        }
        

        com.squareup.okhttp.Call call = v1CasesCaseIdTasksGetCall(caseId, clientId, clientSecret, xForwardedFor, xCorrelationID, requestedDateTime, offset, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get all Case Tasks
     * @param caseId Search by CaseId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param requestedDateTime  (optional)
     * @param offset Skip over a number of elements by specifying an offset value for the query (optional, default to 0)
     * @param limit Limit the number of elements on the response (optional, default to 10)
     * @return List&lt;CaseTasks&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CaseTasks> v1CasesCaseIdTasksGet(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, String requestedDateTime, Integer offset, Integer limit) throws ApiException {
        ApiResponse<List<CaseTasks>> resp = v1CasesCaseIdTasksGetWithHttpInfo(caseId, clientId, clientSecret, xForwardedFor, xCorrelationID, requestedDateTime, offset, limit);
        return resp.getData();
    }

    /**
     * 
     * Get all Case Tasks
     * @param caseId Search by CaseId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param requestedDateTime  (optional)
     * @param offset Skip over a number of elements by specifying an offset value for the query (optional, default to 0)
     * @param limit Limit the number of elements on the response (optional, default to 10)
     * @return ApiResponse&lt;List&lt;CaseTasks&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CaseTasks>> v1CasesCaseIdTasksGetWithHttpInfo(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, String requestedDateTime, Integer offset, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = v1CasesCaseIdTasksGetValidateBeforeCall(caseId, clientId, clientSecret, xForwardedFor, xCorrelationID, requestedDateTime, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<List<CaseTasks>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all Case Tasks
     * @param caseId Search by CaseId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param requestedDateTime  (optional)
     * @param offset Skip over a number of elements by specifying an offset value for the query (optional, default to 0)
     * @param limit Limit the number of elements on the response (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1CasesCaseIdTasksGetAsync(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, String requestedDateTime, Integer offset, Integer limit, final ApiCallback<List<CaseTasks>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1CasesCaseIdTasksGetValidateBeforeCall(caseId, clientId, clientSecret, xForwardedFor, xCorrelationID, requestedDateTime, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CaseTasks>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1CasesCaseIdTasksPost
     * @param caseId Search by CaseId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param generated  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1CasesCaseIdTasksPostCall(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, CaseTaskPost generated, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = generated;

        // create path and map variables
        String localVarPath = "/v1/cases/{caseId}/tasks"
            .replaceAll("\\{" + "caseId" + "\\}", apiClient.escapeString(caseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (clientSecret != null)
        localVarHeaderParams.put("client_secret", apiClient.parameterToString(clientSecret));
        if (xForwardedFor != null)
        localVarHeaderParams.put("X-Forwarded-For", apiClient.parameterToString(xForwardedFor));
        if (xCorrelationID != null)
        localVarHeaderParams.put("X-Correlation-ID", apiClient.parameterToString(xCorrelationID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1CasesCaseIdTasksPostValidateBeforeCall(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, CaseTaskPost generated, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling v1CasesCaseIdTasksPost(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1CasesCaseIdTasksPost(Async)");
        }
        
        // verify the required parameter 'clientSecret' is set
        if (clientSecret == null) {
            throw new ApiException("Missing the required parameter 'clientSecret' when calling v1CasesCaseIdTasksPost(Async)");
        }
        
        // verify the required parameter 'xForwardedFor' is set
        if (xForwardedFor == null) {
            throw new ApiException("Missing the required parameter 'xForwardedFor' when calling v1CasesCaseIdTasksPost(Async)");
        }
        
        // verify the required parameter 'xCorrelationID' is set
        if (xCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'xCorrelationID' when calling v1CasesCaseIdTasksPost(Async)");
        }
        

        com.squareup.okhttp.Call call = v1CasesCaseIdTasksPostCall(caseId, clientId, clientSecret, xForwardedFor, xCorrelationID, generated, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create Case Tasks
     * @param caseId Search by CaseId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param generated  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object v1CasesCaseIdTasksPost(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, CaseTaskPost generated) throws ApiException {
        ApiResponse<Object> resp = v1CasesCaseIdTasksPostWithHttpInfo(caseId, clientId, clientSecret, xForwardedFor, xCorrelationID, generated);
        return resp.getData();
    }

    /**
     * 
     * Create Case Tasks
     * @param caseId Search by CaseId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param generated  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> v1CasesCaseIdTasksPostWithHttpInfo(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, CaseTaskPost generated) throws ApiException {
        com.squareup.okhttp.Call call = v1CasesCaseIdTasksPostValidateBeforeCall(caseId, clientId, clientSecret, xForwardedFor, xCorrelationID, generated, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create Case Tasks
     * @param caseId Search by CaseId. (required)
     * @param clientId The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param generated  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1CasesCaseIdTasksPostAsync(BigDecimal caseId, String clientId, String clientSecret, String xForwardedFor, String xCorrelationID, CaseTaskPost generated, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1CasesCaseIdTasksPostValidateBeforeCall(caseId, clientId, clientSecret, xForwardedFor, xCorrelationID, generated, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1CasesGet
     * @param clientId  (required)
     * @param clientId2 The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param requestedDateTime  (optional)
     * @param offset Skip over a number of elements by specifying an offset value for the query (optional, default to 0)
     * @param limit Limit the number of elements on the response (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1CasesGetCall(Integer clientId, String clientId2, String clientSecret, String xForwardedFor, String xCorrelationID, String requestedDateTime, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clientId", clientId));
        if (requestedDateTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("requestedDateTime", requestedDateTime));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId2 != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId2));
        if (clientSecret != null)
        localVarHeaderParams.put("client_secret", apiClient.parameterToString(clientSecret));
        if (xForwardedFor != null)
        localVarHeaderParams.put("X-Forwarded-For", apiClient.parameterToString(xForwardedFor));
        if (xCorrelationID != null)
        localVarHeaderParams.put("X-Correlation-ID", apiClient.parameterToString(xCorrelationID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1CasesGetValidateBeforeCall(Integer clientId, String clientId2, String clientSecret, String xForwardedFor, String xCorrelationID, String requestedDateTime, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1CasesGet(Async)");
        }
        
        // verify the required parameter 'clientId2' is set
        if (clientId2 == null) {
            throw new ApiException("Missing the required parameter 'clientId2' when calling v1CasesGet(Async)");
        }
        
        // verify the required parameter 'clientSecret' is set
        if (clientSecret == null) {
            throw new ApiException("Missing the required parameter 'clientSecret' when calling v1CasesGet(Async)");
        }
        
        // verify the required parameter 'xForwardedFor' is set
        if (xForwardedFor == null) {
            throw new ApiException("Missing the required parameter 'xForwardedFor' when calling v1CasesGet(Async)");
        }
        
        // verify the required parameter 'xCorrelationID' is set
        if (xCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'xCorrelationID' when calling v1CasesGet(Async)");
        }
        

        com.squareup.okhttp.Call call = v1CasesGetCall(clientId, clientId2, clientSecret, xForwardedFor, xCorrelationID, requestedDateTime, offset, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get Cases by Id
     * @param clientId  (required)
     * @param clientId2 The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param requestedDateTime  (optional)
     * @param offset Skip over a number of elements by specifying an offset value for the query (optional, default to 0)
     * @param limit Limit the number of elements on the response (optional, default to 10)
     * @return List&lt;ModelCase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelCase> v1CasesGet(Integer clientId, String clientId2, String clientSecret, String xForwardedFor, String xCorrelationID, String requestedDateTime, Integer offset, Integer limit) throws ApiException {
        ApiResponse<List<ModelCase>> resp = v1CasesGetWithHttpInfo(clientId, clientId2, clientSecret, xForwardedFor, xCorrelationID, requestedDateTime, offset, limit);
        return resp.getData();
    }

    /**
     * 
     * Get Cases by Id
     * @param clientId  (required)
     * @param clientId2 The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param requestedDateTime  (optional)
     * @param offset Skip over a number of elements by specifying an offset value for the query (optional, default to 0)
     * @param limit Limit the number of elements on the response (optional, default to 10)
     * @return ApiResponse&lt;List&lt;ModelCase&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelCase>> v1CasesGetWithHttpInfo(Integer clientId, String clientId2, String clientSecret, String xForwardedFor, String xCorrelationID, String requestedDateTime, Integer offset, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = v1CasesGetValidateBeforeCall(clientId, clientId2, clientSecret, xForwardedFor, xCorrelationID, requestedDateTime, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<List<ModelCase>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Cases by Id
     * @param clientId  (required)
     * @param clientId2 The Client ID allocated by MuleSoft when you request access. (required)
     * @param clientSecret The Client Secret allocated by MuleSoft when you request access. (required)
     * @param xForwardedFor This is the originating IP address of a client. (required)
     * @param xCorrelationID This is a UUID or GUID used for the tracking and filtering of requests. (required)
     * @param requestedDateTime  (optional)
     * @param offset Skip over a number of elements by specifying an offset value for the query (optional, default to 0)
     * @param limit Limit the number of elements on the response (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1CasesGetAsync(Integer clientId, String clientId2, String clientSecret, String xForwardedFor, String xCorrelationID, String requestedDateTime, Integer offset, Integer limit, final ApiCallback<List<ModelCase>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1CasesGetValidateBeforeCall(clientId, clientId2, clientSecret, xForwardedFor, xCorrelationID, requestedDateTime, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelCase>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1HealthcheckGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1HealthcheckGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/healthcheck";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1HealthcheckGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = v1HealthcheckGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Common method used across all the API&#39;s, returns health of API. Return Status 200 and success if the APi is Running and accepting requests.
     * @return Type
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Type v1HealthcheckGet() throws ApiException {
        ApiResponse<Type> resp = v1HealthcheckGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Common method used across all the API&#39;s, returns health of API. Return Status 200 and success if the APi is Running and accepting requests.
     * @return ApiResponse&lt;Type&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Type> v1HealthcheckGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = v1HealthcheckGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Type>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Common method used across all the API&#39;s, returns health of API. Return Status 200 and success if the APi is Running and accepting requests.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1HealthcheckGetAsync(final ApiCallback<Type> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1HealthcheckGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Type>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
