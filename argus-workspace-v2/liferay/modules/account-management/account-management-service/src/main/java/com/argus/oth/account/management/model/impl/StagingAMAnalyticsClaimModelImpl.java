/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.argus.oth.account.management.model.impl;

import com.argus.oth.account.management.model.StagingAMAnalyticsClaim;
import com.argus.oth.account.management.model.StagingAMAnalyticsClaimModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the StagingAMAnalyticsClaim service. Represents a row in the &quot;OTH_StagingAMAnalyticsClaim&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>StagingAMAnalyticsClaimModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StagingAMAnalyticsClaimImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StagingAMAnalyticsClaimImpl
 * @generated
 */
public class StagingAMAnalyticsClaimModelImpl
	extends BaseModelImpl<StagingAMAnalyticsClaim>
	implements StagingAMAnalyticsClaimModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a staging am analytics claim model instance should use the <code>StagingAMAnalyticsClaim</code> interface instead.
	 */
	public static final String TABLE_NAME = "OTH_StagingAMAnalyticsClaim";

	public static final Object[][] TABLE_COLUMNS = {
		{"stagingAMAnalyticsClaimId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"clientId", Types.BIGINT}, {"amAnalyticsClaimDate", Types.VARCHAR},
		{"avgClaimTurnAround", Types.INTEGER},
		{"minClaimTurnAround", Types.INTEGER},
		{"maxClaimTurnAround", Types.INTEGER},
		{"claimTurnAroundGoal", Types.INTEGER},
		{"overallAvgClaimTurnAround", Types.DOUBLE}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("stagingAMAnalyticsClaimId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("clientId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("amAnalyticsClaimDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("avgClaimTurnAround", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("minClaimTurnAround", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("maxClaimTurnAround", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("claimTurnAroundGoal", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("overallAvgClaimTurnAround", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OTH_StagingAMAnalyticsClaim (stagingAMAnalyticsClaimId LONG not null primary key,createDate DATE null,modifiedDate DATE null,clientId LONG,amAnalyticsClaimDate VARCHAR(75) null,avgClaimTurnAround INTEGER,minClaimTurnAround INTEGER,maxClaimTurnAround INTEGER,claimTurnAroundGoal INTEGER,overallAvgClaimTurnAround DOUBLE)";

	public static final String TABLE_SQL_DROP =
		"drop table OTH_StagingAMAnalyticsClaim";

	public static final String ORDER_BY_JPQL =
		" ORDER BY stagingAMAnalyticsClaim.amAnalyticsClaimDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OTH_StagingAMAnalyticsClaim.amAnalyticsClaimDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public StagingAMAnalyticsClaimModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _stagingAMAnalyticsClaimId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStagingAMAnalyticsClaimId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _stagingAMAnalyticsClaimId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StagingAMAnalyticsClaim.class;
	}

	@Override
	public String getModelClassName() {
		return StagingAMAnalyticsClaim.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<StagingAMAnalyticsClaim, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<StagingAMAnalyticsClaim, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StagingAMAnalyticsClaim, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((StagingAMAnalyticsClaim)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<StagingAMAnalyticsClaim, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<StagingAMAnalyticsClaim, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(StagingAMAnalyticsClaim)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<StagingAMAnalyticsClaim, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<StagingAMAnalyticsClaim, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, StagingAMAnalyticsClaim>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			StagingAMAnalyticsClaim.class.getClassLoader(),
			StagingAMAnalyticsClaim.class, ModelWrapper.class);

		try {
			Constructor<StagingAMAnalyticsClaim> constructor =
				(Constructor<StagingAMAnalyticsClaim>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<StagingAMAnalyticsClaim, Object>>
		_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<StagingAMAnalyticsClaim, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<StagingAMAnalyticsClaim, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<StagingAMAnalyticsClaim, Object>>();
		Map<String, BiConsumer<StagingAMAnalyticsClaim, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<StagingAMAnalyticsClaim, ?>>();

		attributeGetterFunctions.put(
			"stagingAMAnalyticsClaimId",
			StagingAMAnalyticsClaim::getStagingAMAnalyticsClaimId);
		attributeSetterBiConsumers.put(
			"stagingAMAnalyticsClaimId",
			(BiConsumer<StagingAMAnalyticsClaim, Long>)
				StagingAMAnalyticsClaim::setStagingAMAnalyticsClaimId);
		attributeGetterFunctions.put(
			"createDate", StagingAMAnalyticsClaim::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<StagingAMAnalyticsClaim, Date>)
				StagingAMAnalyticsClaim::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", StagingAMAnalyticsClaim::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<StagingAMAnalyticsClaim, Date>)
				StagingAMAnalyticsClaim::setModifiedDate);
		attributeGetterFunctions.put(
			"clientId", StagingAMAnalyticsClaim::getClientId);
		attributeSetterBiConsumers.put(
			"clientId",
			(BiConsumer<StagingAMAnalyticsClaim, Long>)
				StagingAMAnalyticsClaim::setClientId);
		attributeGetterFunctions.put(
			"amAnalyticsClaimDate",
			StagingAMAnalyticsClaim::getAmAnalyticsClaimDate);
		attributeSetterBiConsumers.put(
			"amAnalyticsClaimDate",
			(BiConsumer<StagingAMAnalyticsClaim, String>)
				StagingAMAnalyticsClaim::setAmAnalyticsClaimDate);
		attributeGetterFunctions.put(
			"avgClaimTurnAround",
			StagingAMAnalyticsClaim::getAvgClaimTurnAround);
		attributeSetterBiConsumers.put(
			"avgClaimTurnAround",
			(BiConsumer<StagingAMAnalyticsClaim, Integer>)
				StagingAMAnalyticsClaim::setAvgClaimTurnAround);
		attributeGetterFunctions.put(
			"minClaimTurnAround",
			StagingAMAnalyticsClaim::getMinClaimTurnAround);
		attributeSetterBiConsumers.put(
			"minClaimTurnAround",
			(BiConsumer<StagingAMAnalyticsClaim, Integer>)
				StagingAMAnalyticsClaim::setMinClaimTurnAround);
		attributeGetterFunctions.put(
			"maxClaimTurnAround",
			StagingAMAnalyticsClaim::getMaxClaimTurnAround);
		attributeSetterBiConsumers.put(
			"maxClaimTurnAround",
			(BiConsumer<StagingAMAnalyticsClaim, Integer>)
				StagingAMAnalyticsClaim::setMaxClaimTurnAround);
		attributeGetterFunctions.put(
			"claimTurnAroundGoal",
			StagingAMAnalyticsClaim::getClaimTurnAroundGoal);
		attributeSetterBiConsumers.put(
			"claimTurnAroundGoal",
			(BiConsumer<StagingAMAnalyticsClaim, Integer>)
				StagingAMAnalyticsClaim::setClaimTurnAroundGoal);
		attributeGetterFunctions.put(
			"overallAvgClaimTurnAround",
			StagingAMAnalyticsClaim::getOverallAvgClaimTurnAround);
		attributeSetterBiConsumers.put(
			"overallAvgClaimTurnAround",
			(BiConsumer<StagingAMAnalyticsClaim, Double>)
				StagingAMAnalyticsClaim::setOverallAvgClaimTurnAround);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getStagingAMAnalyticsClaimId() {
		return _stagingAMAnalyticsClaimId;
	}

	@Override
	public void setStagingAMAnalyticsClaimId(long stagingAMAnalyticsClaimId) {
		_stagingAMAnalyticsClaimId = stagingAMAnalyticsClaimId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getClientId() {
		return _clientId;
	}

	@Override
	public void setClientId(long clientId) {
		_clientId = clientId;
	}

	@Override
	public String getAmAnalyticsClaimDate() {
		if (_amAnalyticsClaimDate == null) {
			return "";
		}
		else {
			return _amAnalyticsClaimDate;
		}
	}

	@Override
	public void setAmAnalyticsClaimDate(String amAnalyticsClaimDate) {
		_amAnalyticsClaimDate = amAnalyticsClaimDate;
	}

	@Override
	public int getAvgClaimTurnAround() {
		return _avgClaimTurnAround;
	}

	@Override
	public void setAvgClaimTurnAround(int avgClaimTurnAround) {
		_avgClaimTurnAround = avgClaimTurnAround;
	}

	@Override
	public int getMinClaimTurnAround() {
		return _minClaimTurnAround;
	}

	@Override
	public void setMinClaimTurnAround(int minClaimTurnAround) {
		_minClaimTurnAround = minClaimTurnAround;
	}

	@Override
	public int getMaxClaimTurnAround() {
		return _maxClaimTurnAround;
	}

	@Override
	public void setMaxClaimTurnAround(int maxClaimTurnAround) {
		_maxClaimTurnAround = maxClaimTurnAround;
	}

	@Override
	public int getClaimTurnAroundGoal() {
		return _claimTurnAroundGoal;
	}

	@Override
	public void setClaimTurnAroundGoal(int claimTurnAroundGoal) {
		_claimTurnAroundGoal = claimTurnAroundGoal;
	}

	@Override
	public double getOverallAvgClaimTurnAround() {
		return _overallAvgClaimTurnAround;
	}

	@Override
	public void setOverallAvgClaimTurnAround(double overallAvgClaimTurnAround) {
		_overallAvgClaimTurnAround = overallAvgClaimTurnAround;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, StagingAMAnalyticsClaim.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StagingAMAnalyticsClaim toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, StagingAMAnalyticsClaim>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StagingAMAnalyticsClaimImpl stagingAMAnalyticsClaimImpl =
			new StagingAMAnalyticsClaimImpl();

		stagingAMAnalyticsClaimImpl.setStagingAMAnalyticsClaimId(
			getStagingAMAnalyticsClaimId());
		stagingAMAnalyticsClaimImpl.setCreateDate(getCreateDate());
		stagingAMAnalyticsClaimImpl.setModifiedDate(getModifiedDate());
		stagingAMAnalyticsClaimImpl.setClientId(getClientId());
		stagingAMAnalyticsClaimImpl.setAmAnalyticsClaimDate(
			getAmAnalyticsClaimDate());
		stagingAMAnalyticsClaimImpl.setAvgClaimTurnAround(
			getAvgClaimTurnAround());
		stagingAMAnalyticsClaimImpl.setMinClaimTurnAround(
			getMinClaimTurnAround());
		stagingAMAnalyticsClaimImpl.setMaxClaimTurnAround(
			getMaxClaimTurnAround());
		stagingAMAnalyticsClaimImpl.setClaimTurnAroundGoal(
			getClaimTurnAroundGoal());
		stagingAMAnalyticsClaimImpl.setOverallAvgClaimTurnAround(
			getOverallAvgClaimTurnAround());

		stagingAMAnalyticsClaimImpl.resetOriginalValues();

		return stagingAMAnalyticsClaimImpl;
	}

	@Override
	public int compareTo(StagingAMAnalyticsClaim stagingAMAnalyticsClaim) {
		int value = 0;

		value = getAmAnalyticsClaimDate().compareTo(
			stagingAMAnalyticsClaim.getAmAnalyticsClaimDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StagingAMAnalyticsClaim)) {
			return false;
		}

		StagingAMAnalyticsClaim stagingAMAnalyticsClaim =
			(StagingAMAnalyticsClaim)obj;

		long primaryKey = stagingAMAnalyticsClaim.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		StagingAMAnalyticsClaimModelImpl stagingAMAnalyticsClaimModelImpl =
			this;

		stagingAMAnalyticsClaimModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<StagingAMAnalyticsClaim> toCacheModel() {
		StagingAMAnalyticsClaimCacheModel stagingAMAnalyticsClaimCacheModel =
			new StagingAMAnalyticsClaimCacheModel();

		stagingAMAnalyticsClaimCacheModel.stagingAMAnalyticsClaimId =
			getStagingAMAnalyticsClaimId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			stagingAMAnalyticsClaimCacheModel.createDate = createDate.getTime();
		}
		else {
			stagingAMAnalyticsClaimCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			stagingAMAnalyticsClaimCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			stagingAMAnalyticsClaimCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		stagingAMAnalyticsClaimCacheModel.clientId = getClientId();

		stagingAMAnalyticsClaimCacheModel.amAnalyticsClaimDate =
			getAmAnalyticsClaimDate();

		String amAnalyticsClaimDate =
			stagingAMAnalyticsClaimCacheModel.amAnalyticsClaimDate;

		if ((amAnalyticsClaimDate != null) &&
			(amAnalyticsClaimDate.length() == 0)) {

			stagingAMAnalyticsClaimCacheModel.amAnalyticsClaimDate = null;
		}

		stagingAMAnalyticsClaimCacheModel.avgClaimTurnAround =
			getAvgClaimTurnAround();

		stagingAMAnalyticsClaimCacheModel.minClaimTurnAround =
			getMinClaimTurnAround();

		stagingAMAnalyticsClaimCacheModel.maxClaimTurnAround =
			getMaxClaimTurnAround();

		stagingAMAnalyticsClaimCacheModel.claimTurnAroundGoal =
			getClaimTurnAroundGoal();

		stagingAMAnalyticsClaimCacheModel.overallAvgClaimTurnAround =
			getOverallAvgClaimTurnAround();

		return stagingAMAnalyticsClaimCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<StagingAMAnalyticsClaim, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<StagingAMAnalyticsClaim, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StagingAMAnalyticsClaim, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((StagingAMAnalyticsClaim)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<StagingAMAnalyticsClaim, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<StagingAMAnalyticsClaim, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StagingAMAnalyticsClaim, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((StagingAMAnalyticsClaim)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, StagingAMAnalyticsClaim>
				_escapedModelProxyProviderFunction =
					_getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _stagingAMAnalyticsClaimId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _clientId;
	private String _amAnalyticsClaimDate;
	private int _avgClaimTurnAround;
	private int _minClaimTurnAround;
	private int _maxClaimTurnAround;
	private int _claimTurnAroundGoal;
	private double _overallAvgClaimTurnAround;
	private StagingAMAnalyticsClaim _escapedModel;

}