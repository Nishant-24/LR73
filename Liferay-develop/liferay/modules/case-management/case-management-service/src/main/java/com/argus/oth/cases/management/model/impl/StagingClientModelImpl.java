/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.argus.oth.cases.management.model.impl;

import com.argus.oth.cases.management.model.StagingClient;
import com.argus.oth.cases.management.model.StagingClientModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the StagingClient service. Represents a row in the &quot;OTH_StagingClient&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>StagingClientModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StagingClientImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StagingClientImpl
 * @generated
 */
public class StagingClientModelImpl
	extends BaseModelImpl<StagingClient> implements StagingClientModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a staging client model instance should use the <code>StagingClient</code> interface instead.
	 */
	public static final String TABLE_NAME = "OTH_StagingClient";

	public static final Object[][] TABLE_COLUMNS = {
		{"stagingClientId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"externalClientPk", Types.VARCHAR},
		{"clientId", Types.VARCHAR}, {"clientName", Types.VARCHAR},
		{"telephonyNumber", Types.VARCHAR},
		{"externalModifiedDate", Types.VARCHAR},
		{"externalCreatedDate", Types.VARCHAR}, {"rowProcessed", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("stagingClientId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("externalClientPk", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("clientId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("clientName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telephonyNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalModifiedDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalCreatedDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rowProcessed", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OTH_StagingClient (stagingClientId LONG not null primary key,createDate DATE null,modifiedDate DATE null,externalClientPk VARCHAR(75) null,clientId VARCHAR(75) null,clientName VARCHAR(1000) null,telephonyNumber VARCHAR(1000) null,externalModifiedDate VARCHAR(75) null,externalCreatedDate VARCHAR(75) null,rowProcessed BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table OTH_StagingClient";

	public static final String ORDER_BY_JPQL =
		" ORDER BY stagingClient.stagingClientId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OTH_StagingClient.stagingClientId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long CLIENTID_COLUMN_BITMASK = 1L;

	public static final long ROWPROCESSED_COLUMN_BITMASK = 2L;

	public static final long STAGINGCLIENTID_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public StagingClientModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _stagingClientId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStagingClientId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _stagingClientId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StagingClient.class;
	}

	@Override
	public String getModelClassName() {
		return StagingClient.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<StagingClient, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<StagingClient, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StagingClient, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((StagingClient)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<StagingClient, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<StagingClient, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(StagingClient)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<StagingClient, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<StagingClient, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, StagingClient>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			StagingClient.class.getClassLoader(), StagingClient.class,
			ModelWrapper.class);

		try {
			Constructor<StagingClient> constructor =
				(Constructor<StagingClient>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<StagingClient, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<StagingClient, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<StagingClient, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<StagingClient, Object>>();
		Map<String, BiConsumer<StagingClient, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<StagingClient, ?>>();

		attributeGetterFunctions.put(
			"stagingClientId", StagingClient::getStagingClientId);
		attributeSetterBiConsumers.put(
			"stagingClientId",
			(BiConsumer<StagingClient, Long>)StagingClient::setStagingClientId);
		attributeGetterFunctions.put(
			"createDate", StagingClient::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<StagingClient, Date>)StagingClient::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", StagingClient::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<StagingClient, Date>)StagingClient::setModifiedDate);
		attributeGetterFunctions.put(
			"externalClientPk", StagingClient::getExternalClientPk);
		attributeSetterBiConsumers.put(
			"externalClientPk",
			(BiConsumer<StagingClient, String>)
				StagingClient::setExternalClientPk);
		attributeGetterFunctions.put("clientId", StagingClient::getClientId);
		attributeSetterBiConsumers.put(
			"clientId",
			(BiConsumer<StagingClient, String>)StagingClient::setClientId);
		attributeGetterFunctions.put(
			"clientName", StagingClient::getClientName);
		attributeSetterBiConsumers.put(
			"clientName",
			(BiConsumer<StagingClient, String>)StagingClient::setClientName);
		attributeGetterFunctions.put(
			"telephonyNumber", StagingClient::getTelephonyNumber);
		attributeSetterBiConsumers.put(
			"telephonyNumber",
			(BiConsumer<StagingClient, String>)
				StagingClient::setTelephonyNumber);
		attributeGetterFunctions.put(
			"externalModifiedDate", StagingClient::getExternalModifiedDate);
		attributeSetterBiConsumers.put(
			"externalModifiedDate",
			(BiConsumer<StagingClient, String>)
				StagingClient::setExternalModifiedDate);
		attributeGetterFunctions.put(
			"externalCreatedDate", StagingClient::getExternalCreatedDate);
		attributeSetterBiConsumers.put(
			"externalCreatedDate",
			(BiConsumer<StagingClient, String>)
				StagingClient::setExternalCreatedDate);
		attributeGetterFunctions.put(
			"rowProcessed", StagingClient::getRowProcessed);
		attributeSetterBiConsumers.put(
			"rowProcessed",
			(BiConsumer<StagingClient, Boolean>)StagingClient::setRowProcessed);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getStagingClientId() {
		return _stagingClientId;
	}

	@Override
	public void setStagingClientId(long stagingClientId) {
		_columnBitmask = -1L;

		_stagingClientId = stagingClientId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getExternalClientPk() {
		if (_externalClientPk == null) {
			return "";
		}
		else {
			return _externalClientPk;
		}
	}

	@Override
	public void setExternalClientPk(String externalClientPk) {
		_externalClientPk = externalClientPk;
	}

	@Override
	public String getClientId() {
		if (_clientId == null) {
			return "";
		}
		else {
			return _clientId;
		}
	}

	@Override
	public void setClientId(String clientId) {
		_columnBitmask |= CLIENTID_COLUMN_BITMASK;

		if (_originalClientId == null) {
			_originalClientId = _clientId;
		}

		_clientId = clientId;
	}

	public String getOriginalClientId() {
		return GetterUtil.getString(_originalClientId);
	}

	@Override
	public String getClientName() {
		if (_clientName == null) {
			return "";
		}
		else {
			return _clientName;
		}
	}

	@Override
	public void setClientName(String clientName) {
		_clientName = clientName;
	}

	@Override
	public String getTelephonyNumber() {
		if (_telephonyNumber == null) {
			return "";
		}
		else {
			return _telephonyNumber;
		}
	}

	@Override
	public void setTelephonyNumber(String telephonyNumber) {
		_telephonyNumber = telephonyNumber;
	}

	@Override
	public String getExternalModifiedDate() {
		if (_externalModifiedDate == null) {
			return "";
		}
		else {
			return _externalModifiedDate;
		}
	}

	@Override
	public void setExternalModifiedDate(String externalModifiedDate) {
		_externalModifiedDate = externalModifiedDate;
	}

	@Override
	public String getExternalCreatedDate() {
		if (_externalCreatedDate == null) {
			return "";
		}
		else {
			return _externalCreatedDate;
		}
	}

	@Override
	public void setExternalCreatedDate(String externalCreatedDate) {
		_externalCreatedDate = externalCreatedDate;
	}

	@Override
	public boolean getRowProcessed() {
		return _rowProcessed;
	}

	@Override
	public boolean isRowProcessed() {
		return _rowProcessed;
	}

	@Override
	public void setRowProcessed(boolean rowProcessed) {
		_columnBitmask |= ROWPROCESSED_COLUMN_BITMASK;

		if (!_setOriginalRowProcessed) {
			_setOriginalRowProcessed = true;

			_originalRowProcessed = _rowProcessed;
		}

		_rowProcessed = rowProcessed;
	}

	public boolean getOriginalRowProcessed() {
		return _originalRowProcessed;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, StagingClient.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StagingClient toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, StagingClient>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StagingClientImpl stagingClientImpl = new StagingClientImpl();

		stagingClientImpl.setStagingClientId(getStagingClientId());
		stagingClientImpl.setCreateDate(getCreateDate());
		stagingClientImpl.setModifiedDate(getModifiedDate());
		stagingClientImpl.setExternalClientPk(getExternalClientPk());
		stagingClientImpl.setClientId(getClientId());
		stagingClientImpl.setClientName(getClientName());
		stagingClientImpl.setTelephonyNumber(getTelephonyNumber());
		stagingClientImpl.setExternalModifiedDate(getExternalModifiedDate());
		stagingClientImpl.setExternalCreatedDate(getExternalCreatedDate());
		stagingClientImpl.setRowProcessed(isRowProcessed());

		stagingClientImpl.resetOriginalValues();

		return stagingClientImpl;
	}

	@Override
	public int compareTo(StagingClient stagingClient) {
		int value = 0;

		if (getStagingClientId() < stagingClient.getStagingClientId()) {
			value = -1;
		}
		else if (getStagingClientId() > stagingClient.getStagingClientId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StagingClient)) {
			return false;
		}

		StagingClient stagingClient = (StagingClient)obj;

		long primaryKey = stagingClient.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		StagingClientModelImpl stagingClientModelImpl = this;

		stagingClientModelImpl._setModifiedDate = false;

		stagingClientModelImpl._originalClientId =
			stagingClientModelImpl._clientId;

		stagingClientModelImpl._originalRowProcessed =
			stagingClientModelImpl._rowProcessed;

		stagingClientModelImpl._setOriginalRowProcessed = false;

		stagingClientModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<StagingClient> toCacheModel() {
		StagingClientCacheModel stagingClientCacheModel =
			new StagingClientCacheModel();

		stagingClientCacheModel.stagingClientId = getStagingClientId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			stagingClientCacheModel.createDate = createDate.getTime();
		}
		else {
			stagingClientCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			stagingClientCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			stagingClientCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		stagingClientCacheModel.externalClientPk = getExternalClientPk();

		String externalClientPk = stagingClientCacheModel.externalClientPk;

		if ((externalClientPk != null) && (externalClientPk.length() == 0)) {
			stagingClientCacheModel.externalClientPk = null;
		}

		stagingClientCacheModel.clientId = getClientId();

		String clientId = stagingClientCacheModel.clientId;

		if ((clientId != null) && (clientId.length() == 0)) {
			stagingClientCacheModel.clientId = null;
		}

		stagingClientCacheModel.clientName = getClientName();

		String clientName = stagingClientCacheModel.clientName;

		if ((clientName != null) && (clientName.length() == 0)) {
			stagingClientCacheModel.clientName = null;
		}

		stagingClientCacheModel.telephonyNumber = getTelephonyNumber();

		String telephonyNumber = stagingClientCacheModel.telephonyNumber;

		if ((telephonyNumber != null) && (telephonyNumber.length() == 0)) {
			stagingClientCacheModel.telephonyNumber = null;
		}

		stagingClientCacheModel.externalModifiedDate =
			getExternalModifiedDate();

		String externalModifiedDate =
			stagingClientCacheModel.externalModifiedDate;

		if ((externalModifiedDate != null) &&
			(externalModifiedDate.length() == 0)) {

			stagingClientCacheModel.externalModifiedDate = null;
		}

		stagingClientCacheModel.externalCreatedDate = getExternalCreatedDate();

		String externalCreatedDate =
			stagingClientCacheModel.externalCreatedDate;

		if ((externalCreatedDate != null) &&
			(externalCreatedDate.length() == 0)) {

			stagingClientCacheModel.externalCreatedDate = null;
		}

		stagingClientCacheModel.rowProcessed = isRowProcessed();

		return stagingClientCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<StagingClient, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<StagingClient, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StagingClient, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((StagingClient)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<StagingClient, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<StagingClient, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StagingClient, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((StagingClient)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, StagingClient>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _stagingClientId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _externalClientPk;
	private String _clientId;
	private String _originalClientId;
	private String _clientName;
	private String _telephonyNumber;
	private String _externalModifiedDate;
	private String _externalCreatedDate;
	private boolean _rowProcessed;
	private boolean _originalRowProcessed;
	private boolean _setOriginalRowProcessed;
	private long _columnBitmask;
	private StagingClient _escapedModel;

}