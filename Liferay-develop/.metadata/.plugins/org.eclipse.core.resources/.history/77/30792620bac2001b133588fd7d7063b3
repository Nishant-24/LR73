/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.login.web.internal.portlet.action;

//@Component(immediate = true, property = {
//		"javax.portlet.name=" + LoginPortletKeys.FAST_LOGIN, "javax.portlet.name=" + LoginPortletKeys.LOGIN,
//		"mvc.command.name="
//				+ OpenIdConnectWebKeys.OPEN_ID_CONNECT_REQUEST_ACTION_NAME }, service = MVCActionCommand.class)
//public class OpenIdConnectLoginRequestMVCActionCommand extends BaseMVCActionCommand {
//
//	@Override
//	public void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception {
//
//		try {
//			String openIdConnectProviderName = ParamUtil.getString(actionRequest,
//					OpenIdConnectWebKeys.OPEN_ID_CONNECT_PROVIDER_NAME);
//
//			HttpServletRequest httpServletRequest = _portal.getHttpServletRequest(actionRequest);
//
//			httpServletRequest = _portal.getOriginalServletRequest(httpServletRequest);
//
//			HttpServletResponse httpServletResponse = _portal.getHttpServletResponse(actionResponse);
//
//			HttpSession session = httpServletRequest.getSession();
//
//			LiferayPortletResponse liferayPortletResponse = _portal.getLiferayPortletResponse(actionResponse);
//
//			ActionURL actionURL = liferayPortletResponse.createActionURL();
//
//			actionURL.setParameter(ActionRequest.ACTION_NAME,
//					OpenIdConnectWebKeys.OPEN_ID_CONNECT_RESPONSE_ACTION_NAME);
//			actionURL.setParameter("saveLastPath", Boolean.FALSE.toString());
//
//			String redirect = ParamUtil.getString(actionRequest, "redirect");
//
//			if (Validator.isNotNull(redirect)) {
//				actionURL.setParameter("redirect", redirect);
//			}
//
//			session.setAttribute(OpenIdConnectWebKeys.OPEN_ID_CONNECT_ACTION_URL, actionURL.toString());
//
//			_openIdConnectServiceHandler.requestAuthentication(openIdConnectProviderName, httpServletRequest,
//					httpServletResponse);
//		} catch (Exception exception) {
//			actionResponse.setRenderParameter("mvcRenderCommandName",
//					OpenIdConnectWebKeys.OPEN_ID_CONNECT_REQUEST_ACTION_NAME);
//
//			if (exception instanceof OpenIdConnectServiceException) {
//				String message = "Unable to communicate with OpenID Connect provider: " + exception.getMessage();
//
//				if (_log.isDebugEnabled()) {
//					_log.debug(message, exception);
//				}
//
//				if (_log.isWarnEnabled()) {
//					_log.warn(message);
//				}
//
//				SessionErrors.add(actionRequest, exception.getClass());
//			} else if (exception instanceof UserEmailAddressException.MustNotBeDuplicate) {
//
//				if (_log.isDebugEnabled()) {
//					_log.debug(exception, exception);
//				}
//
//				SessionErrors.add(actionRequest, exception.getClass());
//			} else {
//				_log.error("Unable to process the OpenID Connect login: " + exception.getMessage(), exception);
//
//				_portal.sendError(exception, actionRequest, actionResponse);
//			}
//		}
//	}
//
//	private static final Log _log = LogFactoryUtil.getLog(OpenIdConnectLoginRequestMVCActionCommand.class);
//
//	@Reference
//	private OpenIdConnect _openIdConnect;
//
//	@Reference
//	private OpenIdConnectServiceHandler _openIdConnectServiceHandler;
//
//	@Reference
//	private Portal _portal;
//
//}