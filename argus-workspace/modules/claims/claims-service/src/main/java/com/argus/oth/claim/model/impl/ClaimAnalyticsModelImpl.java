/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.argus.oth.claim.model.impl;

import com.argus.oth.claim.model.ClaimAnalytics;
import com.argus.oth.claim.model.ClaimAnalyticsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ClaimAnalytics service. Represents a row in the &quot;OTH_ClaimAnalytics&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ClaimAnalyticsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ClaimAnalyticsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ClaimAnalyticsImpl
 * @generated
 */
public class ClaimAnalyticsModelImpl
	extends BaseModelImpl<ClaimAnalytics> implements ClaimAnalyticsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a claim analytics model instance should use the <code>ClaimAnalytics</code> interface instead.
	 */
	public static final String TABLE_NAME = "OTH_ClaimAnalytics";

	public static final Object[][] TABLE_COLUMNS = {
		{"claimAnalyticsId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"externalClientId", Types.BIGINT},
		{"clientName", Types.VARCHAR}, {"claimNumber", Types.VARCHAR},
		{"externalCaseId", Types.BIGINT}, {"claimStatus", Types.VARCHAR},
		{"receivedDate", Types.TIMESTAMP}, {"serviceDate", Types.TIMESTAMP},
		{"paidDate", Types.TIMESTAMP}, {"externalMemberId", Types.BIGINT},
		{"memberName", Types.VARCHAR}, {"providerName", Types.VARCHAR},
		{"billType", Types.VARCHAR}, {"primaryDiagnosis", Types.VARCHAR},
		{"chargedAmount", Types.DOUBLE}, {"paidAmount", Types.DOUBLE},
		{"repricedAmount", Types.DOUBLE}, {"savingsAmount", Types.DOUBLE},
		{"chargedPercent", Types.DOUBLE}, {"repricedPercent", Types.DOUBLE},
		{"savingsPercent", Types.DOUBLE}, {"chargedRange", Types.VARCHAR},
		{"paidRange", Types.VARCHAR}, {"repricedRange", Types.VARCHAR},
		{"savingsRange", Types.VARCHAR}, {"claimAging", Types.BIGINT},
		{"procedureCodes", Types.VARCHAR}, {"resultCodes", Types.VARCHAR},
		{"diagnosisCodes", Types.VARCHAR}, {"country", Types.VARCHAR},
		{"state_", Types.VARCHAR}, {"financialExposure", Types.DOUBLE},
		{"repricedNetwork", Types.VARCHAR}, {"clientGroupName", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("claimAnalyticsId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("externalClientId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("clientName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalCaseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("claimStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("receivedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("serviceDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("paidDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("externalMemberId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("memberName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("providerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("billType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primaryDiagnosis", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("chargedAmount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("paidAmount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("repricedAmount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("savingsAmount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("chargedPercent", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("repricedPercent", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("savingsPercent", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("chargedRange", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("paidRange", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("repricedRange", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("savingsRange", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("claimAging", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("procedureCodes", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("resultCodes", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("diagnosisCodes", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("country", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("financialExposure", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("repricedNetwork", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("clientGroupName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OTH_ClaimAnalytics (claimAnalyticsId LONG not null primary key,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,externalClientId LONG,clientName VARCHAR(75) null,claimNumber VARCHAR(75) null,externalCaseId LONG,claimStatus VARCHAR(75) null,receivedDate DATE null,serviceDate DATE null,paidDate DATE null,externalMemberId LONG,memberName VARCHAR(75) null,providerName VARCHAR(75) null,billType VARCHAR(75) null,primaryDiagnosis VARCHAR(75) null,chargedAmount DOUBLE,paidAmount DOUBLE,repricedAmount DOUBLE,savingsAmount DOUBLE,chargedPercent DOUBLE,repricedPercent DOUBLE,savingsPercent DOUBLE,chargedRange VARCHAR(75) null,paidRange VARCHAR(75) null,repricedRange VARCHAR(75) null,savingsRange VARCHAR(75) null,claimAging LONG,procedureCodes STRING null,resultCodes STRING null,diagnosisCodes STRING null,country VARCHAR(75) null,state_ VARCHAR(75) null,financialExposure DOUBLE,repricedNetwork VARCHAR(75) null,clientGroupName VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table OTH_ClaimAnalytics";

	public static final String ORDER_BY_JPQL =
		" ORDER BY claimAnalytics.claimAnalyticsId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OTH_ClaimAnalytics.claimAnalyticsId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long CLAIMSTATUS_COLUMN_BITMASK = 1L;

	public static final long EXTERNALCLIENTID_COLUMN_BITMASK = 2L;

	public static final long CLAIMANALYTICSID_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public ClaimAnalyticsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _claimAnalyticsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setClaimAnalyticsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _claimAnalyticsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ClaimAnalytics.class;
	}

	@Override
	public String getModelClassName() {
		return ClaimAnalytics.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ClaimAnalytics, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ClaimAnalytics, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ClaimAnalytics, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ClaimAnalytics)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ClaimAnalytics, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ClaimAnalytics, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ClaimAnalytics)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ClaimAnalytics, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ClaimAnalytics, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ClaimAnalytics>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ClaimAnalytics.class.getClassLoader(), ClaimAnalytics.class,
			ModelWrapper.class);

		try {
			Constructor<ClaimAnalytics> constructor =
				(Constructor<ClaimAnalytics>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ClaimAnalytics, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ClaimAnalytics, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ClaimAnalytics, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ClaimAnalytics, Object>>();
		Map<String, BiConsumer<ClaimAnalytics, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ClaimAnalytics, ?>>();

		attributeGetterFunctions.put(
			"claimAnalyticsId", ClaimAnalytics::getClaimAnalyticsId);
		attributeSetterBiConsumers.put(
			"claimAnalyticsId",
			(BiConsumer<ClaimAnalytics, Long>)
				ClaimAnalytics::setClaimAnalyticsId);
		attributeGetterFunctions.put("groupId", ClaimAnalytics::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<ClaimAnalytics, Long>)ClaimAnalytics::setGroupId);
		attributeGetterFunctions.put("companyId", ClaimAnalytics::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<ClaimAnalytics, Long>)ClaimAnalytics::setCompanyId);
		attributeGetterFunctions.put(
			"createDate", ClaimAnalytics::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<ClaimAnalytics, Date>)ClaimAnalytics::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", ClaimAnalytics::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<ClaimAnalytics, Date>)ClaimAnalytics::setModifiedDate);
		attributeGetterFunctions.put(
			"externalClientId", ClaimAnalytics::getExternalClientId);
		attributeSetterBiConsumers.put(
			"externalClientId",
			(BiConsumer<ClaimAnalytics, Long>)
				ClaimAnalytics::setExternalClientId);
		attributeGetterFunctions.put(
			"clientName", ClaimAnalytics::getClientName);
		attributeSetterBiConsumers.put(
			"clientName",
			(BiConsumer<ClaimAnalytics, String>)ClaimAnalytics::setClientName);
		attributeGetterFunctions.put(
			"claimNumber", ClaimAnalytics::getClaimNumber);
		attributeSetterBiConsumers.put(
			"claimNumber",
			(BiConsumer<ClaimAnalytics, String>)ClaimAnalytics::setClaimNumber);
		attributeGetterFunctions.put(
			"externalCaseId", ClaimAnalytics::getExternalCaseId);
		attributeSetterBiConsumers.put(
			"externalCaseId",
			(BiConsumer<ClaimAnalytics, Long>)
				ClaimAnalytics::setExternalCaseId);
		attributeGetterFunctions.put(
			"claimStatus", ClaimAnalytics::getClaimStatus);
		attributeSetterBiConsumers.put(
			"claimStatus",
			(BiConsumer<ClaimAnalytics, String>)ClaimAnalytics::setClaimStatus);
		attributeGetterFunctions.put(
			"receivedDate", ClaimAnalytics::getReceivedDate);
		attributeSetterBiConsumers.put(
			"receivedDate",
			(BiConsumer<ClaimAnalytics, Date>)ClaimAnalytics::setReceivedDate);
		attributeGetterFunctions.put(
			"serviceDate", ClaimAnalytics::getServiceDate);
		attributeSetterBiConsumers.put(
			"serviceDate",
			(BiConsumer<ClaimAnalytics, Date>)ClaimAnalytics::setServiceDate);
		attributeGetterFunctions.put("paidDate", ClaimAnalytics::getPaidDate);
		attributeSetterBiConsumers.put(
			"paidDate",
			(BiConsumer<ClaimAnalytics, Date>)ClaimAnalytics::setPaidDate);
		attributeGetterFunctions.put(
			"externalMemberId", ClaimAnalytics::getExternalMemberId);
		attributeSetterBiConsumers.put(
			"externalMemberId",
			(BiConsumer<ClaimAnalytics, Long>)
				ClaimAnalytics::setExternalMemberId);
		attributeGetterFunctions.put(
			"memberName", ClaimAnalytics::getMemberName);
		attributeSetterBiConsumers.put(
			"memberName",
			(BiConsumer<ClaimAnalytics, String>)ClaimAnalytics::setMemberName);
		attributeGetterFunctions.put(
			"providerName", ClaimAnalytics::getProviderName);
		attributeSetterBiConsumers.put(
			"providerName",
			(BiConsumer<ClaimAnalytics, String>)
				ClaimAnalytics::setProviderName);
		attributeGetterFunctions.put("billType", ClaimAnalytics::getBillType);
		attributeSetterBiConsumers.put(
			"billType",
			(BiConsumer<ClaimAnalytics, String>)ClaimAnalytics::setBillType);
		attributeGetterFunctions.put(
			"primaryDiagnosis", ClaimAnalytics::getPrimaryDiagnosis);
		attributeSetterBiConsumers.put(
			"primaryDiagnosis",
			(BiConsumer<ClaimAnalytics, String>)
				ClaimAnalytics::setPrimaryDiagnosis);
		attributeGetterFunctions.put(
			"chargedAmount", ClaimAnalytics::getChargedAmount);
		attributeSetterBiConsumers.put(
			"chargedAmount",
			(BiConsumer<ClaimAnalytics, Double>)
				ClaimAnalytics::setChargedAmount);
		attributeGetterFunctions.put(
			"paidAmount", ClaimAnalytics::getPaidAmount);
		attributeSetterBiConsumers.put(
			"paidAmount",
			(BiConsumer<ClaimAnalytics, Double>)ClaimAnalytics::setPaidAmount);
		attributeGetterFunctions.put(
			"repricedAmount", ClaimAnalytics::getRepricedAmount);
		attributeSetterBiConsumers.put(
			"repricedAmount",
			(BiConsumer<ClaimAnalytics, Double>)
				ClaimAnalytics::setRepricedAmount);
		attributeGetterFunctions.put(
			"savingsAmount", ClaimAnalytics::getSavingsAmount);
		attributeSetterBiConsumers.put(
			"savingsAmount",
			(BiConsumer<ClaimAnalytics, Double>)
				ClaimAnalytics::setSavingsAmount);
		attributeGetterFunctions.put(
			"chargedPercent", ClaimAnalytics::getChargedPercent);
		attributeSetterBiConsumers.put(
			"chargedPercent",
			(BiConsumer<ClaimAnalytics, Double>)
				ClaimAnalytics::setChargedPercent);
		attributeGetterFunctions.put(
			"repricedPercent", ClaimAnalytics::getRepricedPercent);
		attributeSetterBiConsumers.put(
			"repricedPercent",
			(BiConsumer<ClaimAnalytics, Double>)
				ClaimAnalytics::setRepricedPercent);
		attributeGetterFunctions.put(
			"savingsPercent", ClaimAnalytics::getSavingsPercent);
		attributeSetterBiConsumers.put(
			"savingsPercent",
			(BiConsumer<ClaimAnalytics, Double>)
				ClaimAnalytics::setSavingsPercent);
		attributeGetterFunctions.put(
			"chargedRange", ClaimAnalytics::getChargedRange);
		attributeSetterBiConsumers.put(
			"chargedRange",
			(BiConsumer<ClaimAnalytics, String>)
				ClaimAnalytics::setChargedRange);
		attributeGetterFunctions.put("paidRange", ClaimAnalytics::getPaidRange);
		attributeSetterBiConsumers.put(
			"paidRange",
			(BiConsumer<ClaimAnalytics, String>)ClaimAnalytics::setPaidRange);
		attributeGetterFunctions.put(
			"repricedRange", ClaimAnalytics::getRepricedRange);
		attributeSetterBiConsumers.put(
			"repricedRange",
			(BiConsumer<ClaimAnalytics, String>)
				ClaimAnalytics::setRepricedRange);
		attributeGetterFunctions.put(
			"savingsRange", ClaimAnalytics::getSavingsRange);
		attributeSetterBiConsumers.put(
			"savingsRange",
			(BiConsumer<ClaimAnalytics, String>)
				ClaimAnalytics::setSavingsRange);
		attributeGetterFunctions.put(
			"claimAging", ClaimAnalytics::getClaimAging);
		attributeSetterBiConsumers.put(
			"claimAging",
			(BiConsumer<ClaimAnalytics, Long>)ClaimAnalytics::setClaimAging);
		attributeGetterFunctions.put(
			"procedureCodes", ClaimAnalytics::getProcedureCodes);
		attributeSetterBiConsumers.put(
			"procedureCodes",
			(BiConsumer<ClaimAnalytics, String>)
				ClaimAnalytics::setProcedureCodes);
		attributeGetterFunctions.put(
			"resultCodes", ClaimAnalytics::getResultCodes);
		attributeSetterBiConsumers.put(
			"resultCodes",
			(BiConsumer<ClaimAnalytics, String>)ClaimAnalytics::setResultCodes);
		attributeGetterFunctions.put(
			"diagnosisCodes", ClaimAnalytics::getDiagnosisCodes);
		attributeSetterBiConsumers.put(
			"diagnosisCodes",
			(BiConsumer<ClaimAnalytics, String>)
				ClaimAnalytics::setDiagnosisCodes);
		attributeGetterFunctions.put("country", ClaimAnalytics::getCountry);
		attributeSetterBiConsumers.put(
			"country",
			(BiConsumer<ClaimAnalytics, String>)ClaimAnalytics::setCountry);
		attributeGetterFunctions.put("state", ClaimAnalytics::getState);
		attributeSetterBiConsumers.put(
			"state",
			(BiConsumer<ClaimAnalytics, String>)ClaimAnalytics::setState);
		attributeGetterFunctions.put(
			"financialExposure", ClaimAnalytics::getFinancialExposure);
		attributeSetterBiConsumers.put(
			"financialExposure",
			(BiConsumer<ClaimAnalytics, Double>)
				ClaimAnalytics::setFinancialExposure);
		attributeGetterFunctions.put(
			"repricedNetwork", ClaimAnalytics::getRepricedNetwork);
		attributeSetterBiConsumers.put(
			"repricedNetwork",
			(BiConsumer<ClaimAnalytics, String>)
				ClaimAnalytics::setRepricedNetwork);
		attributeGetterFunctions.put(
			"clientGroupName", ClaimAnalytics::getClientGroupName);
		attributeSetterBiConsumers.put(
			"clientGroupName",
			(BiConsumer<ClaimAnalytics, String>)
				ClaimAnalytics::setClientGroupName);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getClaimAnalyticsId() {
		return _claimAnalyticsId;
	}

	@Override
	public void setClaimAnalyticsId(long claimAnalyticsId) {
		_columnBitmask = -1L;

		_claimAnalyticsId = claimAnalyticsId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getExternalClientId() {
		return _externalClientId;
	}

	@Override
	public void setExternalClientId(long externalClientId) {
		_columnBitmask |= EXTERNALCLIENTID_COLUMN_BITMASK;

		if (!_setOriginalExternalClientId) {
			_setOriginalExternalClientId = true;

			_originalExternalClientId = _externalClientId;
		}

		_externalClientId = externalClientId;
	}

	public long getOriginalExternalClientId() {
		return _originalExternalClientId;
	}

	@Override
	public String getClientName() {
		if (_clientName == null) {
			return "";
		}
		else {
			return _clientName;
		}
	}

	@Override
	public void setClientName(String clientName) {
		_clientName = clientName;
	}

	@Override
	public String getClaimNumber() {
		if (_claimNumber == null) {
			return "";
		}
		else {
			return _claimNumber;
		}
	}

	@Override
	public void setClaimNumber(String claimNumber) {
		_claimNumber = claimNumber;
	}

	@Override
	public long getExternalCaseId() {
		return _externalCaseId;
	}

	@Override
	public void setExternalCaseId(long externalCaseId) {
		_externalCaseId = externalCaseId;
	}

	@Override
	public String getClaimStatus() {
		if (_claimStatus == null) {
			return "";
		}
		else {
			return _claimStatus;
		}
	}

	@Override
	public void setClaimStatus(String claimStatus) {
		_columnBitmask |= CLAIMSTATUS_COLUMN_BITMASK;

		if (_originalClaimStatus == null) {
			_originalClaimStatus = _claimStatus;
		}

		_claimStatus = claimStatus;
	}

	public String getOriginalClaimStatus() {
		return GetterUtil.getString(_originalClaimStatus);
	}

	@Override
	public Date getReceivedDate() {
		return _receivedDate;
	}

	@Override
	public void setReceivedDate(Date receivedDate) {
		_receivedDate = receivedDate;
	}

	@Override
	public Date getServiceDate() {
		return _serviceDate;
	}

	@Override
	public void setServiceDate(Date serviceDate) {
		_serviceDate = serviceDate;
	}

	@Override
	public Date getPaidDate() {
		return _paidDate;
	}

	@Override
	public void setPaidDate(Date paidDate) {
		_paidDate = paidDate;
	}

	@Override
	public long getExternalMemberId() {
		return _externalMemberId;
	}

	@Override
	public void setExternalMemberId(long externalMemberId) {
		_externalMemberId = externalMemberId;
	}

	@Override
	public String getMemberName() {
		if (_memberName == null) {
			return "";
		}
		else {
			return _memberName;
		}
	}

	@Override
	public void setMemberName(String memberName) {
		_memberName = memberName;
	}

	@Override
	public String getProviderName() {
		if (_providerName == null) {
			return "";
		}
		else {
			return _providerName;
		}
	}

	@Override
	public void setProviderName(String providerName) {
		_providerName = providerName;
	}

	@Override
	public String getBillType() {
		if (_billType == null) {
			return "";
		}
		else {
			return _billType;
		}
	}

	@Override
	public void setBillType(String billType) {
		_billType = billType;
	}

	@Override
	public String getPrimaryDiagnosis() {
		if (_primaryDiagnosis == null) {
			return "";
		}
		else {
			return _primaryDiagnosis;
		}
	}

	@Override
	public void setPrimaryDiagnosis(String primaryDiagnosis) {
		_primaryDiagnosis = primaryDiagnosis;
	}

	@Override
	public double getChargedAmount() {
		return _chargedAmount;
	}

	@Override
	public void setChargedAmount(double chargedAmount) {
		_chargedAmount = chargedAmount;
	}

	@Override
	public double getPaidAmount() {
		return _paidAmount;
	}

	@Override
	public void setPaidAmount(double paidAmount) {
		_paidAmount = paidAmount;
	}

	@Override
	public double getRepricedAmount() {
		return _repricedAmount;
	}

	@Override
	public void setRepricedAmount(double repricedAmount) {
		_repricedAmount = repricedAmount;
	}

	@Override
	public double getSavingsAmount() {
		return _savingsAmount;
	}

	@Override
	public void setSavingsAmount(double savingsAmount) {
		_savingsAmount = savingsAmount;
	}

	@Override
	public double getChargedPercent() {
		return _chargedPercent;
	}

	@Override
	public void setChargedPercent(double chargedPercent) {
		_chargedPercent = chargedPercent;
	}

	@Override
	public double getRepricedPercent() {
		return _repricedPercent;
	}

	@Override
	public void setRepricedPercent(double repricedPercent) {
		_repricedPercent = repricedPercent;
	}

	@Override
	public double getSavingsPercent() {
		return _savingsPercent;
	}

	@Override
	public void setSavingsPercent(double savingsPercent) {
		_savingsPercent = savingsPercent;
	}

	@Override
	public String getChargedRange() {
		if (_chargedRange == null) {
			return "";
		}
		else {
			return _chargedRange;
		}
	}

	@Override
	public void setChargedRange(String chargedRange) {
		_chargedRange = chargedRange;
	}

	@Override
	public String getPaidRange() {
		if (_paidRange == null) {
			return "";
		}
		else {
			return _paidRange;
		}
	}

	@Override
	public void setPaidRange(String paidRange) {
		_paidRange = paidRange;
	}

	@Override
	public String getRepricedRange() {
		if (_repricedRange == null) {
			return "";
		}
		else {
			return _repricedRange;
		}
	}

	@Override
	public void setRepricedRange(String repricedRange) {
		_repricedRange = repricedRange;
	}

	@Override
	public String getSavingsRange() {
		if (_savingsRange == null) {
			return "";
		}
		else {
			return _savingsRange;
		}
	}

	@Override
	public void setSavingsRange(String savingsRange) {
		_savingsRange = savingsRange;
	}

	@Override
	public long getClaimAging() {
		return _claimAging;
	}

	@Override
	public void setClaimAging(long claimAging) {
		_claimAging = claimAging;
	}

	@Override
	public String getProcedureCodes() {
		if (_procedureCodes == null) {
			return "";
		}
		else {
			return _procedureCodes;
		}
	}

	@Override
	public void setProcedureCodes(String procedureCodes) {
		_procedureCodes = procedureCodes;
	}

	@Override
	public String getResultCodes() {
		if (_resultCodes == null) {
			return "";
		}
		else {
			return _resultCodes;
		}
	}

	@Override
	public void setResultCodes(String resultCodes) {
		_resultCodes = resultCodes;
	}

	@Override
	public String getDiagnosisCodes() {
		if (_diagnosisCodes == null) {
			return "";
		}
		else {
			return _diagnosisCodes;
		}
	}

	@Override
	public void setDiagnosisCodes(String diagnosisCodes) {
		_diagnosisCodes = diagnosisCodes;
	}

	@Override
	public String getCountry() {
		if (_country == null) {
			return "";
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		_country = country;
	}

	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		_state = state;
	}

	@Override
	public double getFinancialExposure() {
		return _financialExposure;
	}

	@Override
	public void setFinancialExposure(double financialExposure) {
		_financialExposure = financialExposure;
	}

	@Override
	public String getRepricedNetwork() {
		if (_repricedNetwork == null) {
			return "";
		}
		else {
			return _repricedNetwork;
		}
	}

	@Override
	public void setRepricedNetwork(String repricedNetwork) {
		_repricedNetwork = repricedNetwork;
	}

	@Override
	public String getClientGroupName() {
		if (_clientGroupName == null) {
			return "";
		}
		else {
			return _clientGroupName;
		}
	}

	@Override
	public void setClientGroupName(String clientGroupName) {
		_clientGroupName = clientGroupName;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ClaimAnalytics.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ClaimAnalytics toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ClaimAnalytics>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ClaimAnalyticsImpl claimAnalyticsImpl = new ClaimAnalyticsImpl();

		claimAnalyticsImpl.setClaimAnalyticsId(getClaimAnalyticsId());
		claimAnalyticsImpl.setGroupId(getGroupId());
		claimAnalyticsImpl.setCompanyId(getCompanyId());
		claimAnalyticsImpl.setCreateDate(getCreateDate());
		claimAnalyticsImpl.setModifiedDate(getModifiedDate());
		claimAnalyticsImpl.setExternalClientId(getExternalClientId());
		claimAnalyticsImpl.setClientName(getClientName());
		claimAnalyticsImpl.setClaimNumber(getClaimNumber());
		claimAnalyticsImpl.setExternalCaseId(getExternalCaseId());
		claimAnalyticsImpl.setClaimStatus(getClaimStatus());
		claimAnalyticsImpl.setReceivedDate(getReceivedDate());
		claimAnalyticsImpl.setServiceDate(getServiceDate());
		claimAnalyticsImpl.setPaidDate(getPaidDate());
		claimAnalyticsImpl.setExternalMemberId(getExternalMemberId());
		claimAnalyticsImpl.setMemberName(getMemberName());
		claimAnalyticsImpl.setProviderName(getProviderName());
		claimAnalyticsImpl.setBillType(getBillType());
		claimAnalyticsImpl.setPrimaryDiagnosis(getPrimaryDiagnosis());
		claimAnalyticsImpl.setChargedAmount(getChargedAmount());
		claimAnalyticsImpl.setPaidAmount(getPaidAmount());
		claimAnalyticsImpl.setRepricedAmount(getRepricedAmount());
		claimAnalyticsImpl.setSavingsAmount(getSavingsAmount());
		claimAnalyticsImpl.setChargedPercent(getChargedPercent());
		claimAnalyticsImpl.setRepricedPercent(getRepricedPercent());
		claimAnalyticsImpl.setSavingsPercent(getSavingsPercent());
		claimAnalyticsImpl.setChargedRange(getChargedRange());
		claimAnalyticsImpl.setPaidRange(getPaidRange());
		claimAnalyticsImpl.setRepricedRange(getRepricedRange());
		claimAnalyticsImpl.setSavingsRange(getSavingsRange());
		claimAnalyticsImpl.setClaimAging(getClaimAging());
		claimAnalyticsImpl.setProcedureCodes(getProcedureCodes());
		claimAnalyticsImpl.setResultCodes(getResultCodes());
		claimAnalyticsImpl.setDiagnosisCodes(getDiagnosisCodes());
		claimAnalyticsImpl.setCountry(getCountry());
		claimAnalyticsImpl.setState(getState());
		claimAnalyticsImpl.setFinancialExposure(getFinancialExposure());
		claimAnalyticsImpl.setRepricedNetwork(getRepricedNetwork());
		claimAnalyticsImpl.setClientGroupName(getClientGroupName());

		claimAnalyticsImpl.resetOriginalValues();

		return claimAnalyticsImpl;
	}

	@Override
	public int compareTo(ClaimAnalytics claimAnalytics) {
		int value = 0;

		if (getClaimAnalyticsId() < claimAnalytics.getClaimAnalyticsId()) {
			value = -1;
		}
		else if (getClaimAnalyticsId() > claimAnalytics.getClaimAnalyticsId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ClaimAnalytics)) {
			return false;
		}

		ClaimAnalytics claimAnalytics = (ClaimAnalytics)object;

		long primaryKey = claimAnalytics.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_setModifiedDate = false;
		_originalExternalClientId = _externalClientId;

		_setOriginalExternalClientId = false;

		_originalClaimStatus = _claimStatus;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ClaimAnalytics> toCacheModel() {
		ClaimAnalyticsCacheModel claimAnalyticsCacheModel =
			new ClaimAnalyticsCacheModel();

		claimAnalyticsCacheModel.claimAnalyticsId = getClaimAnalyticsId();

		claimAnalyticsCacheModel.groupId = getGroupId();

		claimAnalyticsCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			claimAnalyticsCacheModel.createDate = createDate.getTime();
		}
		else {
			claimAnalyticsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			claimAnalyticsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			claimAnalyticsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		claimAnalyticsCacheModel.externalClientId = getExternalClientId();

		claimAnalyticsCacheModel.clientName = getClientName();

		String clientName = claimAnalyticsCacheModel.clientName;

		if ((clientName != null) && (clientName.length() == 0)) {
			claimAnalyticsCacheModel.clientName = null;
		}

		claimAnalyticsCacheModel.claimNumber = getClaimNumber();

		String claimNumber = claimAnalyticsCacheModel.claimNumber;

		if ((claimNumber != null) && (claimNumber.length() == 0)) {
			claimAnalyticsCacheModel.claimNumber = null;
		}

		claimAnalyticsCacheModel.externalCaseId = getExternalCaseId();

		claimAnalyticsCacheModel.claimStatus = getClaimStatus();

		String claimStatus = claimAnalyticsCacheModel.claimStatus;

		if ((claimStatus != null) && (claimStatus.length() == 0)) {
			claimAnalyticsCacheModel.claimStatus = null;
		}

		Date receivedDate = getReceivedDate();

		if (receivedDate != null) {
			claimAnalyticsCacheModel.receivedDate = receivedDate.getTime();
		}
		else {
			claimAnalyticsCacheModel.receivedDate = Long.MIN_VALUE;
		}

		Date serviceDate = getServiceDate();

		if (serviceDate != null) {
			claimAnalyticsCacheModel.serviceDate = serviceDate.getTime();
		}
		else {
			claimAnalyticsCacheModel.serviceDate = Long.MIN_VALUE;
		}

		Date paidDate = getPaidDate();

		if (paidDate != null) {
			claimAnalyticsCacheModel.paidDate = paidDate.getTime();
		}
		else {
			claimAnalyticsCacheModel.paidDate = Long.MIN_VALUE;
		}

		claimAnalyticsCacheModel.externalMemberId = getExternalMemberId();

		claimAnalyticsCacheModel.memberName = getMemberName();

		String memberName = claimAnalyticsCacheModel.memberName;

		if ((memberName != null) && (memberName.length() == 0)) {
			claimAnalyticsCacheModel.memberName = null;
		}

		claimAnalyticsCacheModel.providerName = getProviderName();

		String providerName = claimAnalyticsCacheModel.providerName;

		if ((providerName != null) && (providerName.length() == 0)) {
			claimAnalyticsCacheModel.providerName = null;
		}

		claimAnalyticsCacheModel.billType = getBillType();

		String billType = claimAnalyticsCacheModel.billType;

		if ((billType != null) && (billType.length() == 0)) {
			claimAnalyticsCacheModel.billType = null;
		}

		claimAnalyticsCacheModel.primaryDiagnosis = getPrimaryDiagnosis();

		String primaryDiagnosis = claimAnalyticsCacheModel.primaryDiagnosis;

		if ((primaryDiagnosis != null) && (primaryDiagnosis.length() == 0)) {
			claimAnalyticsCacheModel.primaryDiagnosis = null;
		}

		claimAnalyticsCacheModel.chargedAmount = getChargedAmount();

		claimAnalyticsCacheModel.paidAmount = getPaidAmount();

		claimAnalyticsCacheModel.repricedAmount = getRepricedAmount();

		claimAnalyticsCacheModel.savingsAmount = getSavingsAmount();

		claimAnalyticsCacheModel.chargedPercent = getChargedPercent();

		claimAnalyticsCacheModel.repricedPercent = getRepricedPercent();

		claimAnalyticsCacheModel.savingsPercent = getSavingsPercent();

		claimAnalyticsCacheModel.chargedRange = getChargedRange();

		String chargedRange = claimAnalyticsCacheModel.chargedRange;

		if ((chargedRange != null) && (chargedRange.length() == 0)) {
			claimAnalyticsCacheModel.chargedRange = null;
		}

		claimAnalyticsCacheModel.paidRange = getPaidRange();

		String paidRange = claimAnalyticsCacheModel.paidRange;

		if ((paidRange != null) && (paidRange.length() == 0)) {
			claimAnalyticsCacheModel.paidRange = null;
		}

		claimAnalyticsCacheModel.repricedRange = getRepricedRange();

		String repricedRange = claimAnalyticsCacheModel.repricedRange;

		if ((repricedRange != null) && (repricedRange.length() == 0)) {
			claimAnalyticsCacheModel.repricedRange = null;
		}

		claimAnalyticsCacheModel.savingsRange = getSavingsRange();

		String savingsRange = claimAnalyticsCacheModel.savingsRange;

		if ((savingsRange != null) && (savingsRange.length() == 0)) {
			claimAnalyticsCacheModel.savingsRange = null;
		}

		claimAnalyticsCacheModel.claimAging = getClaimAging();

		claimAnalyticsCacheModel.procedureCodes = getProcedureCodes();

		String procedureCodes = claimAnalyticsCacheModel.procedureCodes;

		if ((procedureCodes != null) && (procedureCodes.length() == 0)) {
			claimAnalyticsCacheModel.procedureCodes = null;
		}

		claimAnalyticsCacheModel.resultCodes = getResultCodes();

		String resultCodes = claimAnalyticsCacheModel.resultCodes;

		if ((resultCodes != null) && (resultCodes.length() == 0)) {
			claimAnalyticsCacheModel.resultCodes = null;
		}

		claimAnalyticsCacheModel.diagnosisCodes = getDiagnosisCodes();

		String diagnosisCodes = claimAnalyticsCacheModel.diagnosisCodes;

		if ((diagnosisCodes != null) && (diagnosisCodes.length() == 0)) {
			claimAnalyticsCacheModel.diagnosisCodes = null;
		}

		claimAnalyticsCacheModel.country = getCountry();

		String country = claimAnalyticsCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			claimAnalyticsCacheModel.country = null;
		}

		claimAnalyticsCacheModel.state = getState();

		String state = claimAnalyticsCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			claimAnalyticsCacheModel.state = null;
		}

		claimAnalyticsCacheModel.financialExposure = getFinancialExposure();

		claimAnalyticsCacheModel.repricedNetwork = getRepricedNetwork();

		String repricedNetwork = claimAnalyticsCacheModel.repricedNetwork;

		if ((repricedNetwork != null) && (repricedNetwork.length() == 0)) {
			claimAnalyticsCacheModel.repricedNetwork = null;
		}

		claimAnalyticsCacheModel.clientGroupName = getClientGroupName();

		String clientGroupName = claimAnalyticsCacheModel.clientGroupName;

		if ((clientGroupName != null) && (clientGroupName.length() == 0)) {
			claimAnalyticsCacheModel.clientGroupName = null;
		}

		return claimAnalyticsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ClaimAnalytics, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ClaimAnalytics, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ClaimAnalytics, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ClaimAnalytics)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ClaimAnalytics, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ClaimAnalytics, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ClaimAnalytics, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ClaimAnalytics)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ClaimAnalytics>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _claimAnalyticsId;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _externalClientId;
	private long _originalExternalClientId;
	private boolean _setOriginalExternalClientId;
	private String _clientName;
	private String _claimNumber;
	private long _externalCaseId;
	private String _claimStatus;
	private String _originalClaimStatus;
	private Date _receivedDate;
	private Date _serviceDate;
	private Date _paidDate;
	private long _externalMemberId;
	private String _memberName;
	private String _providerName;
	private String _billType;
	private String _primaryDiagnosis;
	private double _chargedAmount;
	private double _paidAmount;
	private double _repricedAmount;
	private double _savingsAmount;
	private double _chargedPercent;
	private double _repricedPercent;
	private double _savingsPercent;
	private String _chargedRange;
	private String _paidRange;
	private String _repricedRange;
	private String _savingsRange;
	private long _claimAging;
	private String _procedureCodes;
	private String _resultCodes;
	private String _diagnosisCodes;
	private String _country;
	private String _state;
	private double _financialExposure;
	private String _repricedNetwork;
	private String _clientGroupName;
	private long _columnBitmask;
	private ClaimAnalytics _escapedModel;

}