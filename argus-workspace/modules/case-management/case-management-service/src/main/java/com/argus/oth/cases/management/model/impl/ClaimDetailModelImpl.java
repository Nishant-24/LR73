/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.argus.oth.cases.management.model.impl;

import com.argus.oth.cases.management.model.ClaimDetail;
import com.argus.oth.cases.management.model.ClaimDetailModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ClaimDetail service. Represents a row in the &quot;OTH_ClaimDetail&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ClaimDetailModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ClaimDetailImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ClaimDetailImpl
 * @generated
 */
public class ClaimDetailModelImpl
	extends BaseModelImpl<ClaimDetail> implements ClaimDetailModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a claim detail model instance should use the <code>ClaimDetail</code> interface instead.
	 */
	public static final String TABLE_NAME = "OTH_ClaimDetail";

	public static final Object[][] TABLE_COLUMNS = {
		{"claimDetailId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"lineId", Types.BIGINT},
		{"externalClaimId", Types.BIGINT}, {"serviceFrom", Types.TIMESTAMP},
		{"serviceThru", Types.TIMESTAMP}, {"resultCodes", Types.VARCHAR},
		{"procedureCode", Types.VARCHAR}, {"chargedAmount", Types.DOUBLE},
		{"repricedAmount", Types.DOUBLE}, {"claimAmount", Types.DOUBLE},
		{"paidDate", Types.TIMESTAMP}, {"paidAmount", Types.DOUBLE},
		{"savingsAmount", Types.DOUBLE}, {"units", Types.INTEGER},
		{"coverage", Types.VARCHAR}, {"lineStatus", Types.VARCHAR},
		{"revCode", Types.VARCHAR}, {"rowProcessed", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("claimDetailId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lineId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("externalClaimId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("serviceFrom", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("serviceThru", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("resultCodes", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("procedureCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("chargedAmount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("repricedAmount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("claimAmount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("paidDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("paidAmount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("savingsAmount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("units", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("coverage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lineStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("revCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rowProcessed", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OTH_ClaimDetail (claimDetailId LONG not null primary key,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,lineId LONG,externalClaimId LONG,serviceFrom DATE null,serviceThru DATE null,resultCodes STRING null,procedureCode VARCHAR(1000) null,chargedAmount DOUBLE,repricedAmount DOUBLE,claimAmount DOUBLE,paidDate DATE null,paidAmount DOUBLE,savingsAmount DOUBLE,units INTEGER,coverage VARCHAR(75) null,lineStatus VARCHAR(75) null,revCode VARCHAR(1000) null,rowProcessed VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table OTH_ClaimDetail";

	public static final String ORDER_BY_JPQL =
		" ORDER BY claimDetail.lineId DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OTH_ClaimDetail.lineId DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long EXTERNALCLAIMID_COLUMN_BITMASK = 1L;

	public static final long LINEID_COLUMN_BITMASK = 2L;

	public static final long ROWPROCESSED_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public ClaimDetailModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _claimDetailId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setClaimDetailId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _claimDetailId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ClaimDetail.class;
	}

	@Override
	public String getModelClassName() {
		return ClaimDetail.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ClaimDetail, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ClaimDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ClaimDetail, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ClaimDetail)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ClaimDetail, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ClaimDetail, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ClaimDetail)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ClaimDetail, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ClaimDetail, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ClaimDetail>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ClaimDetail.class.getClassLoader(), ClaimDetail.class,
			ModelWrapper.class);

		try {
			Constructor<ClaimDetail> constructor =
				(Constructor<ClaimDetail>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ClaimDetail, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ClaimDetail, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ClaimDetail, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ClaimDetail, Object>>();
		Map<String, BiConsumer<ClaimDetail, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ClaimDetail, ?>>();

		attributeGetterFunctions.put(
			"claimDetailId", ClaimDetail::getClaimDetailId);
		attributeSetterBiConsumers.put(
			"claimDetailId",
			(BiConsumer<ClaimDetail, Long>)ClaimDetail::setClaimDetailId);
		attributeGetterFunctions.put("groupId", ClaimDetail::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<ClaimDetail, Long>)ClaimDetail::setGroupId);
		attributeGetterFunctions.put("companyId", ClaimDetail::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<ClaimDetail, Long>)ClaimDetail::setCompanyId);
		attributeGetterFunctions.put("createDate", ClaimDetail::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<ClaimDetail, Date>)ClaimDetail::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", ClaimDetail::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<ClaimDetail, Date>)ClaimDetail::setModifiedDate);
		attributeGetterFunctions.put("lineId", ClaimDetail::getLineId);
		attributeSetterBiConsumers.put(
			"lineId", (BiConsumer<ClaimDetail, Long>)ClaimDetail::setLineId);
		attributeGetterFunctions.put(
			"externalClaimId", ClaimDetail::getExternalClaimId);
		attributeSetterBiConsumers.put(
			"externalClaimId",
			(BiConsumer<ClaimDetail, Long>)ClaimDetail::setExternalClaimId);
		attributeGetterFunctions.put(
			"serviceFrom", ClaimDetail::getServiceFrom);
		attributeSetterBiConsumers.put(
			"serviceFrom",
			(BiConsumer<ClaimDetail, Date>)ClaimDetail::setServiceFrom);
		attributeGetterFunctions.put(
			"serviceThru", ClaimDetail::getServiceThru);
		attributeSetterBiConsumers.put(
			"serviceThru",
			(BiConsumer<ClaimDetail, Date>)ClaimDetail::setServiceThru);
		attributeGetterFunctions.put(
			"resultCodes", ClaimDetail::getResultCodes);
		attributeSetterBiConsumers.put(
			"resultCodes",
			(BiConsumer<ClaimDetail, String>)ClaimDetail::setResultCodes);
		attributeGetterFunctions.put(
			"procedureCode", ClaimDetail::getProcedureCode);
		attributeSetterBiConsumers.put(
			"procedureCode",
			(BiConsumer<ClaimDetail, String>)ClaimDetail::setProcedureCode);
		attributeGetterFunctions.put(
			"chargedAmount", ClaimDetail::getChargedAmount);
		attributeSetterBiConsumers.put(
			"chargedAmount",
			(BiConsumer<ClaimDetail, Double>)ClaimDetail::setChargedAmount);
		attributeGetterFunctions.put(
			"repricedAmount", ClaimDetail::getRepricedAmount);
		attributeSetterBiConsumers.put(
			"repricedAmount",
			(BiConsumer<ClaimDetail, Double>)ClaimDetail::setRepricedAmount);
		attributeGetterFunctions.put(
			"claimAmount", ClaimDetail::getClaimAmount);
		attributeSetterBiConsumers.put(
			"claimAmount",
			(BiConsumer<ClaimDetail, Double>)ClaimDetail::setClaimAmount);
		attributeGetterFunctions.put("paidDate", ClaimDetail::getPaidDate);
		attributeSetterBiConsumers.put(
			"paidDate",
			(BiConsumer<ClaimDetail, Date>)ClaimDetail::setPaidDate);
		attributeGetterFunctions.put("paidAmount", ClaimDetail::getPaidAmount);
		attributeSetterBiConsumers.put(
			"paidAmount",
			(BiConsumer<ClaimDetail, Double>)ClaimDetail::setPaidAmount);
		attributeGetterFunctions.put(
			"savingsAmount", ClaimDetail::getSavingsAmount);
		attributeSetterBiConsumers.put(
			"savingsAmount",
			(BiConsumer<ClaimDetail, Double>)ClaimDetail::setSavingsAmount);
		attributeGetterFunctions.put("units", ClaimDetail::getUnits);
		attributeSetterBiConsumers.put(
			"units", (BiConsumer<ClaimDetail, Integer>)ClaimDetail::setUnits);
		attributeGetterFunctions.put("coverage", ClaimDetail::getCoverage);
		attributeSetterBiConsumers.put(
			"coverage",
			(BiConsumer<ClaimDetail, String>)ClaimDetail::setCoverage);
		attributeGetterFunctions.put("lineStatus", ClaimDetail::getLineStatus);
		attributeSetterBiConsumers.put(
			"lineStatus",
			(BiConsumer<ClaimDetail, String>)ClaimDetail::setLineStatus);
		attributeGetterFunctions.put("revCode", ClaimDetail::getRevCode);
		attributeSetterBiConsumers.put(
			"revCode",
			(BiConsumer<ClaimDetail, String>)ClaimDetail::setRevCode);
		attributeGetterFunctions.put(
			"rowProcessed", ClaimDetail::getRowProcessed);
		attributeSetterBiConsumers.put(
			"rowProcessed",
			(BiConsumer<ClaimDetail, String>)ClaimDetail::setRowProcessed);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getClaimDetailId() {
		return _claimDetailId;
	}

	@Override
	public void setClaimDetailId(long claimDetailId) {
		_claimDetailId = claimDetailId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getLineId() {
		return _lineId;
	}

	@Override
	public void setLineId(long lineId) {
		_columnBitmask = -1L;

		if (!_setOriginalLineId) {
			_setOriginalLineId = true;

			_originalLineId = _lineId;
		}

		_lineId = lineId;
	}

	public long getOriginalLineId() {
		return _originalLineId;
	}

	@Override
	public long getExternalClaimId() {
		return _externalClaimId;
	}

	@Override
	public void setExternalClaimId(long externalClaimId) {
		_columnBitmask |= EXTERNALCLAIMID_COLUMN_BITMASK;

		if (!_setOriginalExternalClaimId) {
			_setOriginalExternalClaimId = true;

			_originalExternalClaimId = _externalClaimId;
		}

		_externalClaimId = externalClaimId;
	}

	public long getOriginalExternalClaimId() {
		return _originalExternalClaimId;
	}

	@Override
	public Date getServiceFrom() {
		return _serviceFrom;
	}

	@Override
	public void setServiceFrom(Date serviceFrom) {
		_serviceFrom = serviceFrom;
	}

	@Override
	public Date getServiceThru() {
		return _serviceThru;
	}

	@Override
	public void setServiceThru(Date serviceThru) {
		_serviceThru = serviceThru;
	}

	@Override
	public String getResultCodes() {
		if (_resultCodes == null) {
			return "";
		}
		else {
			return _resultCodes;
		}
	}

	@Override
	public void setResultCodes(String resultCodes) {
		_resultCodes = resultCodes;
	}

	@Override
	public String getProcedureCode() {
		if (_procedureCode == null) {
			return "";
		}
		else {
			return _procedureCode;
		}
	}

	@Override
	public void setProcedureCode(String procedureCode) {
		_procedureCode = procedureCode;
	}

	@Override
	public double getChargedAmount() {
		return _chargedAmount;
	}

	@Override
	public void setChargedAmount(double chargedAmount) {
		_chargedAmount = chargedAmount;
	}

	@Override
	public double getRepricedAmount() {
		return _repricedAmount;
	}

	@Override
	public void setRepricedAmount(double repricedAmount) {
		_repricedAmount = repricedAmount;
	}

	@Override
	public double getClaimAmount() {
		return _claimAmount;
	}

	@Override
	public void setClaimAmount(double claimAmount) {
		_claimAmount = claimAmount;
	}

	@Override
	public Date getPaidDate() {
		return _paidDate;
	}

	@Override
	public void setPaidDate(Date paidDate) {
		_paidDate = paidDate;
	}

	@Override
	public double getPaidAmount() {
		return _paidAmount;
	}

	@Override
	public void setPaidAmount(double paidAmount) {
		_paidAmount = paidAmount;
	}

	@Override
	public double getSavingsAmount() {
		return _savingsAmount;
	}

	@Override
	public void setSavingsAmount(double savingsAmount) {
		_savingsAmount = savingsAmount;
	}

	@Override
	public int getUnits() {
		return _units;
	}

	@Override
	public void setUnits(int units) {
		_units = units;
	}

	@Override
	public String getCoverage() {
		if (_coverage == null) {
			return "";
		}
		else {
			return _coverage;
		}
	}

	@Override
	public void setCoverage(String coverage) {
		_coverage = coverage;
	}

	@Override
	public String getLineStatus() {
		if (_lineStatus == null) {
			return "";
		}
		else {
			return _lineStatus;
		}
	}

	@Override
	public void setLineStatus(String lineStatus) {
		_lineStatus = lineStatus;
	}

	@Override
	public String getRevCode() {
		if (_revCode == null) {
			return "";
		}
		else {
			return _revCode;
		}
	}

	@Override
	public void setRevCode(String revCode) {
		_revCode = revCode;
	}

	@Override
	public String getRowProcessed() {
		if (_rowProcessed == null) {
			return "";
		}
		else {
			return _rowProcessed;
		}
	}

	@Override
	public void setRowProcessed(String rowProcessed) {
		_columnBitmask |= ROWPROCESSED_COLUMN_BITMASK;

		if (_originalRowProcessed == null) {
			_originalRowProcessed = _rowProcessed;
		}

		_rowProcessed = rowProcessed;
	}

	public String getOriginalRowProcessed() {
		return GetterUtil.getString(_originalRowProcessed);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ClaimDetail.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ClaimDetail toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ClaimDetail>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ClaimDetailImpl claimDetailImpl = new ClaimDetailImpl();

		claimDetailImpl.setClaimDetailId(getClaimDetailId());
		claimDetailImpl.setGroupId(getGroupId());
		claimDetailImpl.setCompanyId(getCompanyId());
		claimDetailImpl.setCreateDate(getCreateDate());
		claimDetailImpl.setModifiedDate(getModifiedDate());
		claimDetailImpl.setLineId(getLineId());
		claimDetailImpl.setExternalClaimId(getExternalClaimId());
		claimDetailImpl.setServiceFrom(getServiceFrom());
		claimDetailImpl.setServiceThru(getServiceThru());
		claimDetailImpl.setResultCodes(getResultCodes());
		claimDetailImpl.setProcedureCode(getProcedureCode());
		claimDetailImpl.setChargedAmount(getChargedAmount());
		claimDetailImpl.setRepricedAmount(getRepricedAmount());
		claimDetailImpl.setClaimAmount(getClaimAmount());
		claimDetailImpl.setPaidDate(getPaidDate());
		claimDetailImpl.setPaidAmount(getPaidAmount());
		claimDetailImpl.setSavingsAmount(getSavingsAmount());
		claimDetailImpl.setUnits(getUnits());
		claimDetailImpl.setCoverage(getCoverage());
		claimDetailImpl.setLineStatus(getLineStatus());
		claimDetailImpl.setRevCode(getRevCode());
		claimDetailImpl.setRowProcessed(getRowProcessed());

		claimDetailImpl.resetOriginalValues();

		return claimDetailImpl;
	}

	@Override
	public int compareTo(ClaimDetail claimDetail) {
		int value = 0;

		if (getLineId() < claimDetail.getLineId()) {
			value = -1;
		}
		else if (getLineId() > claimDetail.getLineId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ClaimDetail)) {
			return false;
		}

		ClaimDetail claimDetail = (ClaimDetail)object;

		long primaryKey = claimDetail.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_setModifiedDate = false;
		_originalLineId = _lineId;

		_setOriginalLineId = false;

		_originalExternalClaimId = _externalClaimId;

		_setOriginalExternalClaimId = false;

		_originalRowProcessed = _rowProcessed;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ClaimDetail> toCacheModel() {
		ClaimDetailCacheModel claimDetailCacheModel =
			new ClaimDetailCacheModel();

		claimDetailCacheModel.claimDetailId = getClaimDetailId();

		claimDetailCacheModel.groupId = getGroupId();

		claimDetailCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			claimDetailCacheModel.createDate = createDate.getTime();
		}
		else {
			claimDetailCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			claimDetailCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			claimDetailCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		claimDetailCacheModel.lineId = getLineId();

		claimDetailCacheModel.externalClaimId = getExternalClaimId();

		Date serviceFrom = getServiceFrom();

		if (serviceFrom != null) {
			claimDetailCacheModel.serviceFrom = serviceFrom.getTime();
		}
		else {
			claimDetailCacheModel.serviceFrom = Long.MIN_VALUE;
		}

		Date serviceThru = getServiceThru();

		if (serviceThru != null) {
			claimDetailCacheModel.serviceThru = serviceThru.getTime();
		}
		else {
			claimDetailCacheModel.serviceThru = Long.MIN_VALUE;
		}

		claimDetailCacheModel.resultCodes = getResultCodes();

		String resultCodes = claimDetailCacheModel.resultCodes;

		if ((resultCodes != null) && (resultCodes.length() == 0)) {
			claimDetailCacheModel.resultCodes = null;
		}

		claimDetailCacheModel.procedureCode = getProcedureCode();

		String procedureCode = claimDetailCacheModel.procedureCode;

		if ((procedureCode != null) && (procedureCode.length() == 0)) {
			claimDetailCacheModel.procedureCode = null;
		}

		claimDetailCacheModel.chargedAmount = getChargedAmount();

		claimDetailCacheModel.repricedAmount = getRepricedAmount();

		claimDetailCacheModel.claimAmount = getClaimAmount();

		Date paidDate = getPaidDate();

		if (paidDate != null) {
			claimDetailCacheModel.paidDate = paidDate.getTime();
		}
		else {
			claimDetailCacheModel.paidDate = Long.MIN_VALUE;
		}

		claimDetailCacheModel.paidAmount = getPaidAmount();

		claimDetailCacheModel.savingsAmount = getSavingsAmount();

		claimDetailCacheModel.units = getUnits();

		claimDetailCacheModel.coverage = getCoverage();

		String coverage = claimDetailCacheModel.coverage;

		if ((coverage != null) && (coverage.length() == 0)) {
			claimDetailCacheModel.coverage = null;
		}

		claimDetailCacheModel.lineStatus = getLineStatus();

		String lineStatus = claimDetailCacheModel.lineStatus;

		if ((lineStatus != null) && (lineStatus.length() == 0)) {
			claimDetailCacheModel.lineStatus = null;
		}

		claimDetailCacheModel.revCode = getRevCode();

		String revCode = claimDetailCacheModel.revCode;

		if ((revCode != null) && (revCode.length() == 0)) {
			claimDetailCacheModel.revCode = null;
		}

		claimDetailCacheModel.rowProcessed = getRowProcessed();

		String rowProcessed = claimDetailCacheModel.rowProcessed;

		if ((rowProcessed != null) && (rowProcessed.length() == 0)) {
			claimDetailCacheModel.rowProcessed = null;
		}

		return claimDetailCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ClaimDetail, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ClaimDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ClaimDetail, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ClaimDetail)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ClaimDetail, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ClaimDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ClaimDetail, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ClaimDetail)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ClaimDetail>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _claimDetailId;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _lineId;
	private long _originalLineId;
	private boolean _setOriginalLineId;
	private long _externalClaimId;
	private long _originalExternalClaimId;
	private boolean _setOriginalExternalClaimId;
	private Date _serviceFrom;
	private Date _serviceThru;
	private String _resultCodes;
	private String _procedureCode;
	private double _chargedAmount;
	private double _repricedAmount;
	private double _claimAmount;
	private Date _paidDate;
	private double _paidAmount;
	private double _savingsAmount;
	private int _units;
	private String _coverage;
	private String _lineStatus;
	private String _revCode;
	private String _rowProcessed;
	private String _originalRowProcessed;
	private long _columnBitmask;
	private ClaimDetail _escapedModel;

}