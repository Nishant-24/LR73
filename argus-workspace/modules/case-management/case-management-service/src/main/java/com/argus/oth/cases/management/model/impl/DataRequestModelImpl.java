/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.argus.oth.cases.management.model.impl;

import com.argus.oth.cases.management.model.DataRequest;
import com.argus.oth.cases.management.model.DataRequestModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DataRequest service. Represents a row in the &quot;OTH_DataRequest&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DataRequestModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DataRequestImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DataRequestImpl
 * @generated
 */
public class DataRequestModelImpl
	extends BaseModelImpl<DataRequest> implements DataRequestModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a data request model instance should use the <code>DataRequest</code> interface instead.
	 */
	public static final String TABLE_NAME = "OTH_DataRequest";

	public static final Object[][] TABLE_COLUMNS = {
		{"dataRequestId", Types.BIGINT}, {"clientId", Types.BIGINT},
		{"caseId", Types.BIGINT}, {"externalCaseId", Types.BIGINT},
		{"type_", Types.VARCHAR}, {"lastUpdatedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("dataRequestId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("clientId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("caseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("externalCaseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastUpdatedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OTH_DataRequest (dataRequestId LONG not null primary key,clientId LONG,caseId LONG,externalCaseId LONG,type_ VARCHAR(75) null,lastUpdatedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table OTH_DataRequest";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dataRequest.dataRequestId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OTH_DataRequest.dataRequestId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long CLIENTID_COLUMN_BITMASK = 1L;

	public static final long EXTERNALCASEID_COLUMN_BITMASK = 2L;

	public static final long TYPE_COLUMN_BITMASK = 4L;

	public static final long DATAREQUESTID_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public DataRequestModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dataRequestId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDataRequestId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dataRequestId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DataRequest.class;
	}

	@Override
	public String getModelClassName() {
		return DataRequest.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DataRequest, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DataRequest, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataRequest, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DataRequest)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DataRequest, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DataRequest, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DataRequest)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DataRequest, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DataRequest, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, DataRequest>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			DataRequest.class.getClassLoader(), DataRequest.class,
			ModelWrapper.class);

		try {
			Constructor<DataRequest> constructor =
				(Constructor<DataRequest>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<DataRequest, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DataRequest, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DataRequest, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<DataRequest, Object>>();
		Map<String, BiConsumer<DataRequest, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<DataRequest, ?>>();

		attributeGetterFunctions.put(
			"dataRequestId", DataRequest::getDataRequestId);
		attributeSetterBiConsumers.put(
			"dataRequestId",
			(BiConsumer<DataRequest, Long>)DataRequest::setDataRequestId);
		attributeGetterFunctions.put("clientId", DataRequest::getClientId);
		attributeSetterBiConsumers.put(
			"clientId",
			(BiConsumer<DataRequest, Long>)DataRequest::setClientId);
		attributeGetterFunctions.put("caseId", DataRequest::getCaseId);
		attributeSetterBiConsumers.put(
			"caseId", (BiConsumer<DataRequest, Long>)DataRequest::setCaseId);
		attributeGetterFunctions.put(
			"externalCaseId", DataRequest::getExternalCaseId);
		attributeSetterBiConsumers.put(
			"externalCaseId",
			(BiConsumer<DataRequest, Long>)DataRequest::setExternalCaseId);
		attributeGetterFunctions.put("type", DataRequest::getType);
		attributeSetterBiConsumers.put(
			"type", (BiConsumer<DataRequest, String>)DataRequest::setType);
		attributeGetterFunctions.put(
			"lastUpdatedDate", DataRequest::getLastUpdatedDate);
		attributeSetterBiConsumers.put(
			"lastUpdatedDate",
			(BiConsumer<DataRequest, Date>)DataRequest::setLastUpdatedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getDataRequestId() {
		return _dataRequestId;
	}

	@Override
	public void setDataRequestId(long dataRequestId) {
		_dataRequestId = dataRequestId;
	}

	@Override
	public long getClientId() {
		return _clientId;
	}

	@Override
	public void setClientId(long clientId) {
		_columnBitmask |= CLIENTID_COLUMN_BITMASK;

		if (!_setOriginalClientId) {
			_setOriginalClientId = true;

			_originalClientId = _clientId;
		}

		_clientId = clientId;
	}

	public long getOriginalClientId() {
		return _originalClientId;
	}

	@Override
	public long getCaseId() {
		return _caseId;
	}

	@Override
	public void setCaseId(long caseId) {
		_caseId = caseId;
	}

	@Override
	public long getExternalCaseId() {
		return _externalCaseId;
	}

	@Override
	public void setExternalCaseId(long externalCaseId) {
		_columnBitmask |= EXTERNALCASEID_COLUMN_BITMASK;

		if (!_setOriginalExternalCaseId) {
			_setOriginalExternalCaseId = true;

			_originalExternalCaseId = _externalCaseId;
		}

		_externalCaseId = externalCaseId;
	}

	public long getOriginalExternalCaseId() {
		return _originalExternalCaseId;
	}

	@Override
	public String getType() {
		if (_type == null) {
			return "";
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (_originalType == null) {
			_originalType = _type;
		}

		_type = type;
	}

	public String getOriginalType() {
		return GetterUtil.getString(_originalType);
	}

	@Override
	public Date getLastUpdatedDate() {
		return _lastUpdatedDate;
	}

	@Override
	public void setLastUpdatedDate(Date lastUpdatedDate) {
		_lastUpdatedDate = lastUpdatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DataRequest.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DataRequest toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DataRequest>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DataRequestImpl dataRequestImpl = new DataRequestImpl();

		dataRequestImpl.setDataRequestId(getDataRequestId());
		dataRequestImpl.setClientId(getClientId());
		dataRequestImpl.setCaseId(getCaseId());
		dataRequestImpl.setExternalCaseId(getExternalCaseId());
		dataRequestImpl.setType(getType());
		dataRequestImpl.setLastUpdatedDate(getLastUpdatedDate());

		dataRequestImpl.resetOriginalValues();

		return dataRequestImpl;
	}

	@Override
	public int compareTo(DataRequest dataRequest) {
		long primaryKey = dataRequest.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DataRequest)) {
			return false;
		}

		DataRequest dataRequest = (DataRequest)object;

		long primaryKey = dataRequest.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalClientId = _clientId;

		_setOriginalClientId = false;

		_originalExternalCaseId = _externalCaseId;

		_setOriginalExternalCaseId = false;

		_originalType = _type;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DataRequest> toCacheModel() {
		DataRequestCacheModel dataRequestCacheModel =
			new DataRequestCacheModel();

		dataRequestCacheModel.dataRequestId = getDataRequestId();

		dataRequestCacheModel.clientId = getClientId();

		dataRequestCacheModel.caseId = getCaseId();

		dataRequestCacheModel.externalCaseId = getExternalCaseId();

		dataRequestCacheModel.type = getType();

		String type = dataRequestCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			dataRequestCacheModel.type = null;
		}

		Date lastUpdatedDate = getLastUpdatedDate();

		if (lastUpdatedDate != null) {
			dataRequestCacheModel.lastUpdatedDate = lastUpdatedDate.getTime();
		}
		else {
			dataRequestCacheModel.lastUpdatedDate = Long.MIN_VALUE;
		}

		return dataRequestCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DataRequest, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DataRequest, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataRequest, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((DataRequest)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DataRequest, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DataRequest, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataRequest, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((DataRequest)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DataRequest>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _dataRequestId;
	private long _clientId;
	private long _originalClientId;
	private boolean _setOriginalClientId;
	private long _caseId;
	private long _externalCaseId;
	private long _originalExternalCaseId;
	private boolean _setOriginalExternalCaseId;
	private String _type;
	private String _originalType;
	private Date _lastUpdatedDate;
	private long _columnBitmask;
	private DataRequest _escapedModel;

}