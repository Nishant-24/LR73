/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.argus.oth.cases.management.model.impl;

import com.argus.oth.cases.management.model.Authorization;
import com.argus.oth.cases.management.model.AuthorizationModel;
import com.argus.oth.cases.management.model.AuthorizationSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Authorization service. Represents a row in the &quot;OTH_Authorization&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AuthorizationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AuthorizationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AuthorizationImpl
 * @generated
 */
@JSON(strict = true)
public class AuthorizationModelImpl
	extends BaseModelImpl<Authorization> implements AuthorizationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a authorization model instance should use the <code>Authorization</code> interface instead.
	 */
	public static final String TABLE_NAME = "OTH_Authorization";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"authorizationId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"modifiedUserId", Types.BIGINT}, {"caseId", Types.BIGINT},
		{"externalAuthorizationId", Types.BIGINT}, {"memberId", Types.BIGINT},
		{"description", Types.VARCHAR},
		{"rtcAuthorizationStatus", Types.VARCHAR},
		{"authStatus", Types.VARCHAR}, {"statusChangeDate", Types.TIMESTAMP},
		{"receivedDate", Types.TIMESTAMP}, {"authNumber", Types.VARCHAR},
		{"category", Types.VARCHAR}, {"rtcAuthorizationType", Types.VARCHAR},
		{"facility", Types.VARCHAR}, {"procedureCode", Types.VARCHAR},
		{"comments", Types.VARCHAR}, {"externalModifiedDate", Types.TIMESTAMP},
		{"effectiveFrom", Types.TIMESTAMP}, {"effectiveThru", Types.TIMESTAMP},
		{"processStatus", Types.VARCHAR}, {"failureDescription", Types.VARCHAR},
		{"rowProcessed", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("authorizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("caseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("externalAuthorizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("memberId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rtcAuthorizationStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("authStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusChangeDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("receivedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("authNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("category", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rtcAuthorizationType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("facility", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("procedureCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comments", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalModifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("effectiveFrom", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("effectiveThru", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("processStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("failureDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rowProcessed", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OTH_Authorization (uuid_ VARCHAR(75) null,authorizationId LONG not null primary key,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,modifiedUserId LONG,caseId LONG,externalAuthorizationId LONG,memberId LONG,description STRING null,rtcAuthorizationStatus VARCHAR(75) null,authStatus VARCHAR(75) null,statusChangeDate DATE null,receivedDate DATE null,authNumber VARCHAR(75) null,category VARCHAR(1000) null,rtcAuthorizationType VARCHAR(75) null,facility VARCHAR(1000) null,procedureCode STRING null,comments STRING null,externalModifiedDate DATE null,effectiveFrom DATE null,effectiveThru DATE null,processStatus VARCHAR(75) null,failureDescription VARCHAR(2000) null,rowProcessed VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table OTH_Authorization";

	public static final String ORDER_BY_JPQL =
		" ORDER BY authorization.receivedDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OTH_Authorization.receivedDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long AUTHNUMBER_COLUMN_BITMASK = 1L;

	public static final long CASEID_COLUMN_BITMASK = 2L;

	public static final long COMPANYID_COLUMN_BITMASK = 4L;

	public static final long EXTERNALAUTHORIZATIONID_COLUMN_BITMASK = 8L;

	public static final long GROUPID_COLUMN_BITMASK = 16L;

	public static final long PROCESSSTATUS_COLUMN_BITMASK = 32L;

	public static final long ROWPROCESSED_COLUMN_BITMASK = 64L;

	public static final long UUID_COLUMN_BITMASK = 128L;

	public static final long RECEIVEDDATE_COLUMN_BITMASK = 256L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Authorization toModel(AuthorizationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Authorization model = new AuthorizationImpl();

		model.setUuid(soapModel.getUuid());
		model.setAuthorizationId(soapModel.getAuthorizationId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setModifiedUserId(soapModel.getModifiedUserId());
		model.setCaseId(soapModel.getCaseId());
		model.setExternalAuthorizationId(
			soapModel.getExternalAuthorizationId());
		model.setMemberId(soapModel.getMemberId());
		model.setDescription(soapModel.getDescription());
		model.setRtcAuthorizationStatus(soapModel.getRtcAuthorizationStatus());
		model.setAuthStatus(soapModel.getAuthStatus());
		model.setStatusChangeDate(soapModel.getStatusChangeDate());
		model.setReceivedDate(soapModel.getReceivedDate());
		model.setAuthNumber(soapModel.getAuthNumber());
		model.setCategory(soapModel.getCategory());
		model.setRtcAuthorizationType(soapModel.getRtcAuthorizationType());
		model.setFacility(soapModel.getFacility());
		model.setProcedureCode(soapModel.getProcedureCode());
		model.setComments(soapModel.getComments());
		model.setExternalModifiedDate(soapModel.getExternalModifiedDate());
		model.setEffectiveFrom(soapModel.getEffectiveFrom());
		model.setEffectiveThru(soapModel.getEffectiveThru());
		model.setProcessStatus(soapModel.getProcessStatus());
		model.setFailureDescription(soapModel.getFailureDescription());
		model.setRowProcessed(soapModel.getRowProcessed());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Authorization> toModels(AuthorizationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Authorization> models = new ArrayList<Authorization>(
			soapModels.length);

		for (AuthorizationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public AuthorizationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _authorizationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAuthorizationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _authorizationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Authorization.class;
	}

	@Override
	public String getModelClassName() {
		return Authorization.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Authorization, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Authorization, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Authorization, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Authorization)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Authorization, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Authorization, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Authorization)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Authorization, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Authorization, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Authorization>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Authorization.class.getClassLoader(), Authorization.class,
			ModelWrapper.class);

		try {
			Constructor<Authorization> constructor =
				(Constructor<Authorization>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Authorization, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Authorization, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Authorization, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Authorization, Object>>();
		Map<String, BiConsumer<Authorization, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Authorization, ?>>();

		attributeGetterFunctions.put("uuid", Authorization::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Authorization, String>)Authorization::setUuid);
		attributeGetterFunctions.put(
			"authorizationId", Authorization::getAuthorizationId);
		attributeSetterBiConsumers.put(
			"authorizationId",
			(BiConsumer<Authorization, Long>)Authorization::setAuthorizationId);
		attributeGetterFunctions.put("groupId", Authorization::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<Authorization, Long>)Authorization::setGroupId);
		attributeGetterFunctions.put("companyId", Authorization::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<Authorization, Long>)Authorization::setCompanyId);
		attributeGetterFunctions.put(
			"createDate", Authorization::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<Authorization, Date>)Authorization::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", Authorization::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Authorization, Date>)Authorization::setModifiedDate);
		attributeGetterFunctions.put(
			"modifiedUserId", Authorization::getModifiedUserId);
		attributeSetterBiConsumers.put(
			"modifiedUserId",
			(BiConsumer<Authorization, Long>)Authorization::setModifiedUserId);
		attributeGetterFunctions.put("caseId", Authorization::getCaseId);
		attributeSetterBiConsumers.put(
			"caseId",
			(BiConsumer<Authorization, Long>)Authorization::setCaseId);
		attributeGetterFunctions.put(
			"externalAuthorizationId",
			Authorization::getExternalAuthorizationId);
		attributeSetterBiConsumers.put(
			"externalAuthorizationId",
			(BiConsumer<Authorization, Long>)
				Authorization::setExternalAuthorizationId);
		attributeGetterFunctions.put("memberId", Authorization::getMemberId);
		attributeSetterBiConsumers.put(
			"memberId",
			(BiConsumer<Authorization, Long>)Authorization::setMemberId);
		attributeGetterFunctions.put(
			"description", Authorization::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<Authorization, String>)Authorization::setDescription);
		attributeGetterFunctions.put(
			"rtcAuthorizationStatus", Authorization::getRtcAuthorizationStatus);
		attributeSetterBiConsumers.put(
			"rtcAuthorizationStatus",
			(BiConsumer<Authorization, String>)
				Authorization::setRtcAuthorizationStatus);
		attributeGetterFunctions.put(
			"authStatus", Authorization::getAuthStatus);
		attributeSetterBiConsumers.put(
			"authStatus",
			(BiConsumer<Authorization, String>)Authorization::setAuthStatus);
		attributeGetterFunctions.put(
			"statusChangeDate", Authorization::getStatusChangeDate);
		attributeSetterBiConsumers.put(
			"statusChangeDate",
			(BiConsumer<Authorization, Date>)
				Authorization::setStatusChangeDate);
		attributeGetterFunctions.put(
			"receivedDate", Authorization::getReceivedDate);
		attributeSetterBiConsumers.put(
			"receivedDate",
			(BiConsumer<Authorization, Date>)Authorization::setReceivedDate);
		attributeGetterFunctions.put(
			"authNumber", Authorization::getAuthNumber);
		attributeSetterBiConsumers.put(
			"authNumber",
			(BiConsumer<Authorization, String>)Authorization::setAuthNumber);
		attributeGetterFunctions.put("category", Authorization::getCategory);
		attributeSetterBiConsumers.put(
			"category",
			(BiConsumer<Authorization, String>)Authorization::setCategory);
		attributeGetterFunctions.put(
			"rtcAuthorizationType", Authorization::getRtcAuthorizationType);
		attributeSetterBiConsumers.put(
			"rtcAuthorizationType",
			(BiConsumer<Authorization, String>)
				Authorization::setRtcAuthorizationType);
		attributeGetterFunctions.put("facility", Authorization::getFacility);
		attributeSetterBiConsumers.put(
			"facility",
			(BiConsumer<Authorization, String>)Authorization::setFacility);
		attributeGetterFunctions.put(
			"procedureCode", Authorization::getProcedureCode);
		attributeSetterBiConsumers.put(
			"procedureCode",
			(BiConsumer<Authorization, String>)Authorization::setProcedureCode);
		attributeGetterFunctions.put("comments", Authorization::getComments);
		attributeSetterBiConsumers.put(
			"comments",
			(BiConsumer<Authorization, String>)Authorization::setComments);
		attributeGetterFunctions.put(
			"externalModifiedDate", Authorization::getExternalModifiedDate);
		attributeSetterBiConsumers.put(
			"externalModifiedDate",
			(BiConsumer<Authorization, Date>)
				Authorization::setExternalModifiedDate);
		attributeGetterFunctions.put(
			"effectiveFrom", Authorization::getEffectiveFrom);
		attributeSetterBiConsumers.put(
			"effectiveFrom",
			(BiConsumer<Authorization, Date>)Authorization::setEffectiveFrom);
		attributeGetterFunctions.put(
			"effectiveThru", Authorization::getEffectiveThru);
		attributeSetterBiConsumers.put(
			"effectiveThru",
			(BiConsumer<Authorization, Date>)Authorization::setEffectiveThru);
		attributeGetterFunctions.put(
			"processStatus", Authorization::getProcessStatus);
		attributeSetterBiConsumers.put(
			"processStatus",
			(BiConsumer<Authorization, String>)Authorization::setProcessStatus);
		attributeGetterFunctions.put(
			"failureDescription", Authorization::getFailureDescription);
		attributeSetterBiConsumers.put(
			"failureDescription",
			(BiConsumer<Authorization, String>)
				Authorization::setFailureDescription);
		attributeGetterFunctions.put(
			"rowProcessed", Authorization::getRowProcessed);
		attributeSetterBiConsumers.put(
			"rowProcessed",
			(BiConsumer<Authorization, String>)Authorization::setRowProcessed);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getAuthorizationId() {
		return _authorizationId;
	}

	@Override
	public void setAuthorizationId(long authorizationId) {
		_authorizationId = authorizationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getModifiedUserId() {
		return _modifiedUserId;
	}

	@Override
	public void setModifiedUserId(long modifiedUserId) {
		_modifiedUserId = modifiedUserId;
	}

	@Override
	public String getModifiedUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getModifiedUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setModifiedUserUuid(String modifiedUserUuid) {
	}

	@JSON
	@Override
	public long getCaseId() {
		return _caseId;
	}

	@Override
	public void setCaseId(long caseId) {
		_columnBitmask |= CASEID_COLUMN_BITMASK;

		if (!_setOriginalCaseId) {
			_setOriginalCaseId = true;

			_originalCaseId = _caseId;
		}

		_caseId = caseId;
	}

	public long getOriginalCaseId() {
		return _originalCaseId;
	}

	@JSON
	@Override
	public long getExternalAuthorizationId() {
		return _externalAuthorizationId;
	}

	@Override
	public void setExternalAuthorizationId(long externalAuthorizationId) {
		_columnBitmask |= EXTERNALAUTHORIZATIONID_COLUMN_BITMASK;

		if (!_setOriginalExternalAuthorizationId) {
			_setOriginalExternalAuthorizationId = true;

			_originalExternalAuthorizationId = _externalAuthorizationId;
		}

		_externalAuthorizationId = externalAuthorizationId;
	}

	public long getOriginalExternalAuthorizationId() {
		return _originalExternalAuthorizationId;
	}

	@JSON
	@Override
	public long getMemberId() {
		return _memberId;
	}

	@Override
	public void setMemberId(long memberId) {
		_memberId = memberId;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getRtcAuthorizationStatus() {
		if (_rtcAuthorizationStatus == null) {
			return "";
		}
		else {
			return _rtcAuthorizationStatus;
		}
	}

	@Override
	public void setRtcAuthorizationStatus(String rtcAuthorizationStatus) {
		_rtcAuthorizationStatus = rtcAuthorizationStatus;
	}

	@JSON
	@Override
	public String getAuthStatus() {
		if (_authStatus == null) {
			return "";
		}
		else {
			return _authStatus;
		}
	}

	@Override
	public void setAuthStatus(String authStatus) {
		_authStatus = authStatus;
	}

	@JSON
	@Override
	public Date getStatusChangeDate() {
		return _statusChangeDate;
	}

	@Override
	public void setStatusChangeDate(Date statusChangeDate) {
		_statusChangeDate = statusChangeDate;
	}

	@JSON
	@Override
	public Date getReceivedDate() {
		return _receivedDate;
	}

	@Override
	public void setReceivedDate(Date receivedDate) {
		_columnBitmask = -1L;

		_receivedDate = receivedDate;
	}

	@JSON
	@Override
	public String getAuthNumber() {
		if (_authNumber == null) {
			return "";
		}
		else {
			return _authNumber;
		}
	}

	@Override
	public void setAuthNumber(String authNumber) {
		_columnBitmask |= AUTHNUMBER_COLUMN_BITMASK;

		if (_originalAuthNumber == null) {
			_originalAuthNumber = _authNumber;
		}

		_authNumber = authNumber;
	}

	public String getOriginalAuthNumber() {
		return GetterUtil.getString(_originalAuthNumber);
	}

	@JSON
	@Override
	public String getCategory() {
		if (_category == null) {
			return "";
		}
		else {
			return _category;
		}
	}

	@Override
	public void setCategory(String category) {
		_category = category;
	}

	@JSON
	@Override
	public String getRtcAuthorizationType() {
		if (_rtcAuthorizationType == null) {
			return "";
		}
		else {
			return _rtcAuthorizationType;
		}
	}

	@Override
	public void setRtcAuthorizationType(String rtcAuthorizationType) {
		_rtcAuthorizationType = rtcAuthorizationType;
	}

	@JSON
	@Override
	public String getFacility() {
		if (_facility == null) {
			return "";
		}
		else {
			return _facility;
		}
	}

	@Override
	public void setFacility(String facility) {
		_facility = facility;
	}

	@JSON
	@Override
	public String getProcedureCode() {
		if (_procedureCode == null) {
			return "";
		}
		else {
			return _procedureCode;
		}
	}

	@Override
	public void setProcedureCode(String procedureCode) {
		_procedureCode = procedureCode;
	}

	@JSON
	@Override
	public String getComments() {
		if (_comments == null) {
			return "";
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	@JSON
	@Override
	public Date getExternalModifiedDate() {
		return _externalModifiedDate;
	}

	@Override
	public void setExternalModifiedDate(Date externalModifiedDate) {
		_externalModifiedDate = externalModifiedDate;
	}

	@JSON
	@Override
	public Date getEffectiveFrom() {
		return _effectiveFrom;
	}

	@Override
	public void setEffectiveFrom(Date effectiveFrom) {
		_effectiveFrom = effectiveFrom;
	}

	@JSON
	@Override
	public Date getEffectiveThru() {
		return _effectiveThru;
	}

	@Override
	public void setEffectiveThru(Date effectiveThru) {
		_effectiveThru = effectiveThru;
	}

	@JSON
	@Override
	public String getProcessStatus() {
		if (_processStatus == null) {
			return "";
		}
		else {
			return _processStatus;
		}
	}

	@Override
	public void setProcessStatus(String processStatus) {
		_columnBitmask |= PROCESSSTATUS_COLUMN_BITMASK;

		if (_originalProcessStatus == null) {
			_originalProcessStatus = _processStatus;
		}

		_processStatus = processStatus;
	}

	public String getOriginalProcessStatus() {
		return GetterUtil.getString(_originalProcessStatus);
	}

	@JSON
	@Override
	public String getFailureDescription() {
		if (_failureDescription == null) {
			return "";
		}
		else {
			return _failureDescription;
		}
	}

	@Override
	public void setFailureDescription(String failureDescription) {
		_failureDescription = failureDescription;
	}

	@JSON
	@Override
	public String getRowProcessed() {
		if (_rowProcessed == null) {
			return "";
		}
		else {
			return _rowProcessed;
		}
	}

	@Override
	public void setRowProcessed(String rowProcessed) {
		_columnBitmask |= ROWPROCESSED_COLUMN_BITMASK;

		if (_originalRowProcessed == null) {
			_originalRowProcessed = _rowProcessed;
		}

		_rowProcessed = rowProcessed;
	}

	public String getOriginalRowProcessed() {
		return GetterUtil.getString(_originalRowProcessed);
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Authorization.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Authorization.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Authorization toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Authorization>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AuthorizationImpl authorizationImpl = new AuthorizationImpl();

		authorizationImpl.setUuid(getUuid());
		authorizationImpl.setAuthorizationId(getAuthorizationId());
		authorizationImpl.setGroupId(getGroupId());
		authorizationImpl.setCompanyId(getCompanyId());
		authorizationImpl.setCreateDate(getCreateDate());
		authorizationImpl.setModifiedDate(getModifiedDate());
		authorizationImpl.setModifiedUserId(getModifiedUserId());
		authorizationImpl.setCaseId(getCaseId());
		authorizationImpl.setExternalAuthorizationId(
			getExternalAuthorizationId());
		authorizationImpl.setMemberId(getMemberId());
		authorizationImpl.setDescription(getDescription());
		authorizationImpl.setRtcAuthorizationStatus(
			getRtcAuthorizationStatus());
		authorizationImpl.setAuthStatus(getAuthStatus());
		authorizationImpl.setStatusChangeDate(getStatusChangeDate());
		authorizationImpl.setReceivedDate(getReceivedDate());
		authorizationImpl.setAuthNumber(getAuthNumber());
		authorizationImpl.setCategory(getCategory());
		authorizationImpl.setRtcAuthorizationType(getRtcAuthorizationType());
		authorizationImpl.setFacility(getFacility());
		authorizationImpl.setProcedureCode(getProcedureCode());
		authorizationImpl.setComments(getComments());
		authorizationImpl.setExternalModifiedDate(getExternalModifiedDate());
		authorizationImpl.setEffectiveFrom(getEffectiveFrom());
		authorizationImpl.setEffectiveThru(getEffectiveThru());
		authorizationImpl.setProcessStatus(getProcessStatus());
		authorizationImpl.setFailureDescription(getFailureDescription());
		authorizationImpl.setRowProcessed(getRowProcessed());

		authorizationImpl.resetOriginalValues();

		return authorizationImpl;
	}

	@Override
	public int compareTo(Authorization authorization) {
		int value = 0;

		value = DateUtil.compareTo(
			getReceivedDate(), authorization.getReceivedDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Authorization)) {
			return false;
		}

		Authorization authorization = (Authorization)object;

		long primaryKey = authorization.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalUuid = _uuid;

		_originalGroupId = _groupId;

		_setOriginalGroupId = false;

		_originalCompanyId = _companyId;

		_setOriginalCompanyId = false;

		_setModifiedDate = false;

		_originalCaseId = _caseId;

		_setOriginalCaseId = false;

		_originalExternalAuthorizationId = _externalAuthorizationId;

		_setOriginalExternalAuthorizationId = false;

		_originalAuthNumber = _authNumber;

		_originalProcessStatus = _processStatus;

		_originalRowProcessed = _rowProcessed;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Authorization> toCacheModel() {
		AuthorizationCacheModel authorizationCacheModel =
			new AuthorizationCacheModel();

		authorizationCacheModel.uuid = getUuid();

		String uuid = authorizationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			authorizationCacheModel.uuid = null;
		}

		authorizationCacheModel.authorizationId = getAuthorizationId();

		authorizationCacheModel.groupId = getGroupId();

		authorizationCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			authorizationCacheModel.createDate = createDate.getTime();
		}
		else {
			authorizationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			authorizationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			authorizationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		authorizationCacheModel.modifiedUserId = getModifiedUserId();

		authorizationCacheModel.caseId = getCaseId();

		authorizationCacheModel.externalAuthorizationId =
			getExternalAuthorizationId();

		authorizationCacheModel.memberId = getMemberId();

		authorizationCacheModel.description = getDescription();

		String description = authorizationCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			authorizationCacheModel.description = null;
		}

		authorizationCacheModel.rtcAuthorizationStatus =
			getRtcAuthorizationStatus();

		String rtcAuthorizationStatus =
			authorizationCacheModel.rtcAuthorizationStatus;

		if ((rtcAuthorizationStatus != null) &&
			(rtcAuthorizationStatus.length() == 0)) {

			authorizationCacheModel.rtcAuthorizationStatus = null;
		}

		authorizationCacheModel.authStatus = getAuthStatus();

		String authStatus = authorizationCacheModel.authStatus;

		if ((authStatus != null) && (authStatus.length() == 0)) {
			authorizationCacheModel.authStatus = null;
		}

		Date statusChangeDate = getStatusChangeDate();

		if (statusChangeDate != null) {
			authorizationCacheModel.statusChangeDate =
				statusChangeDate.getTime();
		}
		else {
			authorizationCacheModel.statusChangeDate = Long.MIN_VALUE;
		}

		Date receivedDate = getReceivedDate();

		if (receivedDate != null) {
			authorizationCacheModel.receivedDate = receivedDate.getTime();
		}
		else {
			authorizationCacheModel.receivedDate = Long.MIN_VALUE;
		}

		authorizationCacheModel.authNumber = getAuthNumber();

		String authNumber = authorizationCacheModel.authNumber;

		if ((authNumber != null) && (authNumber.length() == 0)) {
			authorizationCacheModel.authNumber = null;
		}

		authorizationCacheModel.category = getCategory();

		String category = authorizationCacheModel.category;

		if ((category != null) && (category.length() == 0)) {
			authorizationCacheModel.category = null;
		}

		authorizationCacheModel.rtcAuthorizationType =
			getRtcAuthorizationType();

		String rtcAuthorizationType =
			authorizationCacheModel.rtcAuthorizationType;

		if ((rtcAuthorizationType != null) &&
			(rtcAuthorizationType.length() == 0)) {

			authorizationCacheModel.rtcAuthorizationType = null;
		}

		authorizationCacheModel.facility = getFacility();

		String facility = authorizationCacheModel.facility;

		if ((facility != null) && (facility.length() == 0)) {
			authorizationCacheModel.facility = null;
		}

		authorizationCacheModel.procedureCode = getProcedureCode();

		String procedureCode = authorizationCacheModel.procedureCode;

		if ((procedureCode != null) && (procedureCode.length() == 0)) {
			authorizationCacheModel.procedureCode = null;
		}

		authorizationCacheModel.comments = getComments();

		String comments = authorizationCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			authorizationCacheModel.comments = null;
		}

		Date externalModifiedDate = getExternalModifiedDate();

		if (externalModifiedDate != null) {
			authorizationCacheModel.externalModifiedDate =
				externalModifiedDate.getTime();
		}
		else {
			authorizationCacheModel.externalModifiedDate = Long.MIN_VALUE;
		}

		Date effectiveFrom = getEffectiveFrom();

		if (effectiveFrom != null) {
			authorizationCacheModel.effectiveFrom = effectiveFrom.getTime();
		}
		else {
			authorizationCacheModel.effectiveFrom = Long.MIN_VALUE;
		}

		Date effectiveThru = getEffectiveThru();

		if (effectiveThru != null) {
			authorizationCacheModel.effectiveThru = effectiveThru.getTime();
		}
		else {
			authorizationCacheModel.effectiveThru = Long.MIN_VALUE;
		}

		authorizationCacheModel.processStatus = getProcessStatus();

		String processStatus = authorizationCacheModel.processStatus;

		if ((processStatus != null) && (processStatus.length() == 0)) {
			authorizationCacheModel.processStatus = null;
		}

		authorizationCacheModel.failureDescription = getFailureDescription();

		String failureDescription = authorizationCacheModel.failureDescription;

		if ((failureDescription != null) &&
			(failureDescription.length() == 0)) {

			authorizationCacheModel.failureDescription = null;
		}

		authorizationCacheModel.rowProcessed = getRowProcessed();

		String rowProcessed = authorizationCacheModel.rowProcessed;

		if ((rowProcessed != null) && (rowProcessed.length() == 0)) {
			authorizationCacheModel.rowProcessed = null;
		}

		return authorizationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Authorization, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Authorization, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Authorization, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Authorization)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Authorization, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Authorization, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Authorization, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Authorization)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Authorization>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _authorizationId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _modifiedUserId;
	private long _caseId;
	private long _originalCaseId;
	private boolean _setOriginalCaseId;
	private long _externalAuthorizationId;
	private long _originalExternalAuthorizationId;
	private boolean _setOriginalExternalAuthorizationId;
	private long _memberId;
	private String _description;
	private String _rtcAuthorizationStatus;
	private String _authStatus;
	private Date _statusChangeDate;
	private Date _receivedDate;
	private String _authNumber;
	private String _originalAuthNumber;
	private String _category;
	private String _rtcAuthorizationType;
	private String _facility;
	private String _procedureCode;
	private String _comments;
	private Date _externalModifiedDate;
	private Date _effectiveFrom;
	private Date _effectiveThru;
	private String _processStatus;
	private String _originalProcessStatus;
	private String _failureDescription;
	private String _rowProcessed;
	private String _originalRowProcessed;
	private long _columnBitmask;
	private Authorization _escapedModel;

}