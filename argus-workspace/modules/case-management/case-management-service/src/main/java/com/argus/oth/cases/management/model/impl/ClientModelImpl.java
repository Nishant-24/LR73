/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.argus.oth.cases.management.model.impl;

import com.argus.oth.cases.management.model.Client;
import com.argus.oth.cases.management.model.ClientModel;
import com.argus.oth.cases.management.model.ClientSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Client service. Represents a row in the &quot;OTH_Client&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ClientModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ClientImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ClientImpl
 * @generated
 */
@JSON(strict = true)
public class ClientModelImpl
	extends BaseModelImpl<Client> implements ClientModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a client model instance should use the <code>Client</code> interface instead.
	 */
	public static final String TABLE_NAME = "OTH_Client";

	public static final Object[][] TABLE_COLUMNS = {
		{"clientId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"externalClientPk", Types.BIGINT},
		{"externalClientId", Types.BIGINT}, {"clientName", Types.VARCHAR},
		{"telephonyNumber", Types.VARCHAR},
		{"externalModifiedDate", Types.TIMESTAMP},
		{"externalCreatedDate", Types.TIMESTAMP},
		{"rowProcessed", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("clientId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("externalClientPk", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("externalClientId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("clientName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telephonyNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalModifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("externalCreatedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("rowProcessed", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OTH_Client (clientId LONG not null primary key,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,externalClientPk LONG,externalClientId LONG,clientName VARCHAR(1000) null,telephonyNumber VARCHAR(1000) null,externalModifiedDate DATE null,externalCreatedDate DATE null,rowProcessed VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table OTH_Client";

	public static final String ORDER_BY_JPQL = " ORDER BY client.clientId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OTH_Client.clientId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long EXTERNALCLIENTID_COLUMN_BITMASK = 1L;

	public static final long EXTERNALCLIENTPK_COLUMN_BITMASK = 2L;

	public static final long ROWPROCESSED_COLUMN_BITMASK = 4L;

	public static final long CLIENTID_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Client toModel(ClientSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Client model = new ClientImpl();

		model.setClientId(soapModel.getClientId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setExternalClientPk(soapModel.getExternalClientPk());
		model.setExternalClientId(soapModel.getExternalClientId());
		model.setClientName(soapModel.getClientName());
		model.setTelephonyNumber(soapModel.getTelephonyNumber());
		model.setExternalModifiedDate(soapModel.getExternalModifiedDate());
		model.setExternalCreatedDate(soapModel.getExternalCreatedDate());
		model.setRowProcessed(soapModel.getRowProcessed());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Client> toModels(ClientSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Client> models = new ArrayList<Client>(soapModels.length);

		for (ClientSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ClientModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _clientId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setClientId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _clientId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Client.class;
	}

	@Override
	public String getModelClassName() {
		return Client.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Client, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Client, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Client, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Client)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Client, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Client, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Client)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Client, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Client, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Client>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Client.class.getClassLoader(), Client.class, ModelWrapper.class);

		try {
			Constructor<Client> constructor =
				(Constructor<Client>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Client, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Client, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Client, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Client, Object>>();
		Map<String, BiConsumer<Client, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Client, ?>>();

		attributeGetterFunctions.put("clientId", Client::getClientId);
		attributeSetterBiConsumers.put(
			"clientId", (BiConsumer<Client, Long>)Client::setClientId);
		attributeGetterFunctions.put("groupId", Client::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Client, Long>)Client::setGroupId);
		attributeGetterFunctions.put("companyId", Client::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Client, Long>)Client::setCompanyId);
		attributeGetterFunctions.put("createDate", Client::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Client, Date>)Client::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Client::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Client, Date>)Client::setModifiedDate);
		attributeGetterFunctions.put(
			"externalClientPk", Client::getExternalClientPk);
		attributeSetterBiConsumers.put(
			"externalClientPk",
			(BiConsumer<Client, Long>)Client::setExternalClientPk);
		attributeGetterFunctions.put(
			"externalClientId", Client::getExternalClientId);
		attributeSetterBiConsumers.put(
			"externalClientId",
			(BiConsumer<Client, Long>)Client::setExternalClientId);
		attributeGetterFunctions.put("clientName", Client::getClientName);
		attributeSetterBiConsumers.put(
			"clientName", (BiConsumer<Client, String>)Client::setClientName);
		attributeGetterFunctions.put(
			"telephonyNumber", Client::getTelephonyNumber);
		attributeSetterBiConsumers.put(
			"telephonyNumber",
			(BiConsumer<Client, String>)Client::setTelephonyNumber);
		attributeGetterFunctions.put(
			"externalModifiedDate", Client::getExternalModifiedDate);
		attributeSetterBiConsumers.put(
			"externalModifiedDate",
			(BiConsumer<Client, Date>)Client::setExternalModifiedDate);
		attributeGetterFunctions.put(
			"externalCreatedDate", Client::getExternalCreatedDate);
		attributeSetterBiConsumers.put(
			"externalCreatedDate",
			(BiConsumer<Client, Date>)Client::setExternalCreatedDate);
		attributeGetterFunctions.put("rowProcessed", Client::getRowProcessed);
		attributeSetterBiConsumers.put(
			"rowProcessed",
			(BiConsumer<Client, String>)Client::setRowProcessed);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getClientId() {
		return _clientId;
	}

	@Override
	public void setClientId(long clientId) {
		_columnBitmask = -1L;

		_clientId = clientId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getExternalClientPk() {
		return _externalClientPk;
	}

	@Override
	public void setExternalClientPk(long externalClientPk) {
		_columnBitmask |= EXTERNALCLIENTPK_COLUMN_BITMASK;

		if (!_setOriginalExternalClientPk) {
			_setOriginalExternalClientPk = true;

			_originalExternalClientPk = _externalClientPk;
		}

		_externalClientPk = externalClientPk;
	}

	public long getOriginalExternalClientPk() {
		return _originalExternalClientPk;
	}

	@JSON
	@Override
	public long getExternalClientId() {
		return _externalClientId;
	}

	@Override
	public void setExternalClientId(long externalClientId) {
		_columnBitmask |= EXTERNALCLIENTID_COLUMN_BITMASK;

		if (!_setOriginalExternalClientId) {
			_setOriginalExternalClientId = true;

			_originalExternalClientId = _externalClientId;
		}

		_externalClientId = externalClientId;
	}

	public long getOriginalExternalClientId() {
		return _originalExternalClientId;
	}

	@JSON
	@Override
	public String getClientName() {
		if (_clientName == null) {
			return "";
		}
		else {
			return _clientName;
		}
	}

	@Override
	public void setClientName(String clientName) {
		_clientName = clientName;
	}

	@JSON
	@Override
	public String getTelephonyNumber() {
		if (_telephonyNumber == null) {
			return "";
		}
		else {
			return _telephonyNumber;
		}
	}

	@Override
	public void setTelephonyNumber(String telephonyNumber) {
		_telephonyNumber = telephonyNumber;
	}

	@JSON
	@Override
	public Date getExternalModifiedDate() {
		return _externalModifiedDate;
	}

	@Override
	public void setExternalModifiedDate(Date externalModifiedDate) {
		_externalModifiedDate = externalModifiedDate;
	}

	@JSON
	@Override
	public Date getExternalCreatedDate() {
		return _externalCreatedDate;
	}

	@Override
	public void setExternalCreatedDate(Date externalCreatedDate) {
		_externalCreatedDate = externalCreatedDate;
	}

	@JSON
	@Override
	public String getRowProcessed() {
		if (_rowProcessed == null) {
			return "";
		}
		else {
			return _rowProcessed;
		}
	}

	@Override
	public void setRowProcessed(String rowProcessed) {
		_columnBitmask |= ROWPROCESSED_COLUMN_BITMASK;

		if (_originalRowProcessed == null) {
			_originalRowProcessed = _rowProcessed;
		}

		_rowProcessed = rowProcessed;
	}

	public String getOriginalRowProcessed() {
		return GetterUtil.getString(_originalRowProcessed);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Client.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Client toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Client>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ClientImpl clientImpl = new ClientImpl();

		clientImpl.setClientId(getClientId());
		clientImpl.setGroupId(getGroupId());
		clientImpl.setCompanyId(getCompanyId());
		clientImpl.setCreateDate(getCreateDate());
		clientImpl.setModifiedDate(getModifiedDate());
		clientImpl.setExternalClientPk(getExternalClientPk());
		clientImpl.setExternalClientId(getExternalClientId());
		clientImpl.setClientName(getClientName());
		clientImpl.setTelephonyNumber(getTelephonyNumber());
		clientImpl.setExternalModifiedDate(getExternalModifiedDate());
		clientImpl.setExternalCreatedDate(getExternalCreatedDate());
		clientImpl.setRowProcessed(getRowProcessed());

		clientImpl.resetOriginalValues();

		return clientImpl;
	}

	@Override
	public int compareTo(Client client) {
		int value = 0;

		if (getClientId() < client.getClientId()) {
			value = -1;
		}
		else if (getClientId() > client.getClientId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Client)) {
			return false;
		}

		Client client = (Client)object;

		long primaryKey = client.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_setModifiedDate = false;
		_originalExternalClientPk = _externalClientPk;

		_setOriginalExternalClientPk = false;

		_originalExternalClientId = _externalClientId;

		_setOriginalExternalClientId = false;

		_originalRowProcessed = _rowProcessed;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Client> toCacheModel() {
		ClientCacheModel clientCacheModel = new ClientCacheModel();

		clientCacheModel.clientId = getClientId();

		clientCacheModel.groupId = getGroupId();

		clientCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			clientCacheModel.createDate = createDate.getTime();
		}
		else {
			clientCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			clientCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			clientCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		clientCacheModel.externalClientPk = getExternalClientPk();

		clientCacheModel.externalClientId = getExternalClientId();

		clientCacheModel.clientName = getClientName();

		String clientName = clientCacheModel.clientName;

		if ((clientName != null) && (clientName.length() == 0)) {
			clientCacheModel.clientName = null;
		}

		clientCacheModel.telephonyNumber = getTelephonyNumber();

		String telephonyNumber = clientCacheModel.telephonyNumber;

		if ((telephonyNumber != null) && (telephonyNumber.length() == 0)) {
			clientCacheModel.telephonyNumber = null;
		}

		Date externalModifiedDate = getExternalModifiedDate();

		if (externalModifiedDate != null) {
			clientCacheModel.externalModifiedDate =
				externalModifiedDate.getTime();
		}
		else {
			clientCacheModel.externalModifiedDate = Long.MIN_VALUE;
		}

		Date externalCreatedDate = getExternalCreatedDate();

		if (externalCreatedDate != null) {
			clientCacheModel.externalCreatedDate =
				externalCreatedDate.getTime();
		}
		else {
			clientCacheModel.externalCreatedDate = Long.MIN_VALUE;
		}

		clientCacheModel.rowProcessed = getRowProcessed();

		String rowProcessed = clientCacheModel.rowProcessed;

		if ((rowProcessed != null) && (rowProcessed.length() == 0)) {
			clientCacheModel.rowProcessed = null;
		}

		return clientCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Client, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Client, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Client, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Client)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Client, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Client, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Client, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Client)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Client>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _clientId;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _externalClientPk;
	private long _originalExternalClientPk;
	private boolean _setOriginalExternalClientPk;
	private long _externalClientId;
	private long _originalExternalClientId;
	private boolean _setOriginalExternalClientId;
	private String _clientName;
	private String _telephonyNumber;
	private Date _externalModifiedDate;
	private Date _externalCreatedDate;
	private String _rowProcessed;
	private String _originalRowProcessed;
	private long _columnBitmask;
	private Client _escapedModel;

}