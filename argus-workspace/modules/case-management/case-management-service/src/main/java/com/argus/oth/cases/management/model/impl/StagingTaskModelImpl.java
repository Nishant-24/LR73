/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.argus.oth.cases.management.model.impl;

import com.argus.oth.cases.management.model.StagingTask;
import com.argus.oth.cases.management.model.StagingTaskModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the StagingTask service. Represents a row in the &quot;OTH_StagingTask&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>StagingTaskModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StagingTaskImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StagingTaskImpl
 * @generated
 */
public class StagingTaskModelImpl
	extends BaseModelImpl<StagingTask> implements StagingTaskModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a staging task model instance should use the <code>StagingTask</code> interface instead.
	 */
	public static final String TABLE_NAME = "OTH_StagingTask";

	public static final Object[][] TABLE_COLUMNS = {
		{"taskId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"externalCaseId", Types.BIGINT},
		{"externalTaskId", Types.BIGINT}, {"priority", Types.VARCHAR},
		{"startDate", Types.VARCHAR}, {"endDate", Types.VARCHAR},
		{"dueDate", Types.VARCHAR}, {"taskStatus", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"completedFlag", Types.VARCHAR},
		{"externalCreateDate", Types.VARCHAR},
		{"externalModifiedDate", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("taskId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("externalCaseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("externalTaskId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("priority", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("endDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dueDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("taskStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("completedFlag", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalCreateDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalModifiedDate", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OTH_StagingTask (taskId LONG not null primary key,createDate DATE null,modifiedDate DATE null,externalCaseId LONG,externalTaskId LONG,priority VARCHAR(75) null,startDate VARCHAR(75) null,endDate VARCHAR(75) null,dueDate VARCHAR(75) null,taskStatus VARCHAR(75) null,description STRING null,completedFlag VARCHAR(75) null,externalCreateDate VARCHAR(75) null,externalModifiedDate VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table OTH_StagingTask";

	public static final String ORDER_BY_JPQL =
		" ORDER BY stagingTask.taskId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OTH_StagingTask.taskId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public StagingTaskModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _taskId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTaskId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _taskId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StagingTask.class;
	}

	@Override
	public String getModelClassName() {
		return StagingTask.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<StagingTask, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<StagingTask, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StagingTask, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((StagingTask)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<StagingTask, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<StagingTask, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(StagingTask)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<StagingTask, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<StagingTask, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, StagingTask>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			StagingTask.class.getClassLoader(), StagingTask.class,
			ModelWrapper.class);

		try {
			Constructor<StagingTask> constructor =
				(Constructor<StagingTask>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<StagingTask, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<StagingTask, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<StagingTask, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<StagingTask, Object>>();
		Map<String, BiConsumer<StagingTask, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<StagingTask, ?>>();

		attributeGetterFunctions.put("taskId", StagingTask::getTaskId);
		attributeSetterBiConsumers.put(
			"taskId", (BiConsumer<StagingTask, Long>)StagingTask::setTaskId);
		attributeGetterFunctions.put("createDate", StagingTask::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<StagingTask, Date>)StagingTask::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", StagingTask::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<StagingTask, Date>)StagingTask::setModifiedDate);
		attributeGetterFunctions.put(
			"externalCaseId", StagingTask::getExternalCaseId);
		attributeSetterBiConsumers.put(
			"externalCaseId",
			(BiConsumer<StagingTask, Long>)StagingTask::setExternalCaseId);
		attributeGetterFunctions.put(
			"externalTaskId", StagingTask::getExternalTaskId);
		attributeSetterBiConsumers.put(
			"externalTaskId",
			(BiConsumer<StagingTask, Long>)StagingTask::setExternalTaskId);
		attributeGetterFunctions.put("priority", StagingTask::getPriority);
		attributeSetterBiConsumers.put(
			"priority",
			(BiConsumer<StagingTask, String>)StagingTask::setPriority);
		attributeGetterFunctions.put("startDate", StagingTask::getStartDate);
		attributeSetterBiConsumers.put(
			"startDate",
			(BiConsumer<StagingTask, String>)StagingTask::setStartDate);
		attributeGetterFunctions.put("endDate", StagingTask::getEndDate);
		attributeSetterBiConsumers.put(
			"endDate",
			(BiConsumer<StagingTask, String>)StagingTask::setEndDate);
		attributeGetterFunctions.put("dueDate", StagingTask::getDueDate);
		attributeSetterBiConsumers.put(
			"dueDate",
			(BiConsumer<StagingTask, String>)StagingTask::setDueDate);
		attributeGetterFunctions.put("taskStatus", StagingTask::getTaskStatus);
		attributeSetterBiConsumers.put(
			"taskStatus",
			(BiConsumer<StagingTask, String>)StagingTask::setTaskStatus);
		attributeGetterFunctions.put(
			"description", StagingTask::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<StagingTask, String>)StagingTask::setDescription);
		attributeGetterFunctions.put(
			"completedFlag", StagingTask::getCompletedFlag);
		attributeSetterBiConsumers.put(
			"completedFlag",
			(BiConsumer<StagingTask, String>)StagingTask::setCompletedFlag);
		attributeGetterFunctions.put(
			"externalCreateDate", StagingTask::getExternalCreateDate);
		attributeSetterBiConsumers.put(
			"externalCreateDate",
			(BiConsumer<StagingTask, String>)
				StagingTask::setExternalCreateDate);
		attributeGetterFunctions.put(
			"externalModifiedDate", StagingTask::getExternalModifiedDate);
		attributeSetterBiConsumers.put(
			"externalModifiedDate",
			(BiConsumer<StagingTask, String>)
				StagingTask::setExternalModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getTaskId() {
		return _taskId;
	}

	@Override
	public void setTaskId(long taskId) {
		_taskId = taskId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getExternalCaseId() {
		return _externalCaseId;
	}

	@Override
	public void setExternalCaseId(long externalCaseId) {
		_externalCaseId = externalCaseId;
	}

	@Override
	public long getExternalTaskId() {
		return _externalTaskId;
	}

	@Override
	public void setExternalTaskId(long externalTaskId) {
		_externalTaskId = externalTaskId;
	}

	@Override
	public String getPriority() {
		if (_priority == null) {
			return "";
		}
		else {
			return _priority;
		}
	}

	@Override
	public void setPriority(String priority) {
		_priority = priority;
	}

	@Override
	public String getStartDate() {
		if (_startDate == null) {
			return "";
		}
		else {
			return _startDate;
		}
	}

	@Override
	public void setStartDate(String startDate) {
		_startDate = startDate;
	}

	@Override
	public String getEndDate() {
		if (_endDate == null) {
			return "";
		}
		else {
			return _endDate;
		}
	}

	@Override
	public void setEndDate(String endDate) {
		_endDate = endDate;
	}

	@Override
	public String getDueDate() {
		if (_dueDate == null) {
			return "";
		}
		else {
			return _dueDate;
		}
	}

	@Override
	public void setDueDate(String dueDate) {
		_dueDate = dueDate;
	}

	@Override
	public String getTaskStatus() {
		if (_taskStatus == null) {
			return "";
		}
		else {
			return _taskStatus;
		}
	}

	@Override
	public void setTaskStatus(String taskStatus) {
		_taskStatus = taskStatus;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getCompletedFlag() {
		if (_completedFlag == null) {
			return "";
		}
		else {
			return _completedFlag;
		}
	}

	@Override
	public void setCompletedFlag(String completedFlag) {
		_completedFlag = completedFlag;
	}

	@Override
	public String getExternalCreateDate() {
		if (_externalCreateDate == null) {
			return "";
		}
		else {
			return _externalCreateDate;
		}
	}

	@Override
	public void setExternalCreateDate(String externalCreateDate) {
		_externalCreateDate = externalCreateDate;
	}

	@Override
	public String getExternalModifiedDate() {
		if (_externalModifiedDate == null) {
			return "";
		}
		else {
			return _externalModifiedDate;
		}
	}

	@Override
	public void setExternalModifiedDate(String externalModifiedDate) {
		_externalModifiedDate = externalModifiedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, StagingTask.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StagingTask toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, StagingTask>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StagingTaskImpl stagingTaskImpl = new StagingTaskImpl();

		stagingTaskImpl.setTaskId(getTaskId());
		stagingTaskImpl.setCreateDate(getCreateDate());
		stagingTaskImpl.setModifiedDate(getModifiedDate());
		stagingTaskImpl.setExternalCaseId(getExternalCaseId());
		stagingTaskImpl.setExternalTaskId(getExternalTaskId());
		stagingTaskImpl.setPriority(getPriority());
		stagingTaskImpl.setStartDate(getStartDate());
		stagingTaskImpl.setEndDate(getEndDate());
		stagingTaskImpl.setDueDate(getDueDate());
		stagingTaskImpl.setTaskStatus(getTaskStatus());
		stagingTaskImpl.setDescription(getDescription());
		stagingTaskImpl.setCompletedFlag(getCompletedFlag());
		stagingTaskImpl.setExternalCreateDate(getExternalCreateDate());
		stagingTaskImpl.setExternalModifiedDate(getExternalModifiedDate());

		stagingTaskImpl.resetOriginalValues();

		return stagingTaskImpl;
	}

	@Override
	public int compareTo(StagingTask stagingTask) {
		long primaryKey = stagingTask.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof StagingTask)) {
			return false;
		}

		StagingTask stagingTask = (StagingTask)object;

		long primaryKey = stagingTask.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_setModifiedDate = false;
	}

	@Override
	public CacheModel<StagingTask> toCacheModel() {
		StagingTaskCacheModel stagingTaskCacheModel =
			new StagingTaskCacheModel();

		stagingTaskCacheModel.taskId = getTaskId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			stagingTaskCacheModel.createDate = createDate.getTime();
		}
		else {
			stagingTaskCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			stagingTaskCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			stagingTaskCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		stagingTaskCacheModel.externalCaseId = getExternalCaseId();

		stagingTaskCacheModel.externalTaskId = getExternalTaskId();

		stagingTaskCacheModel.priority = getPriority();

		String priority = stagingTaskCacheModel.priority;

		if ((priority != null) && (priority.length() == 0)) {
			stagingTaskCacheModel.priority = null;
		}

		stagingTaskCacheModel.startDate = getStartDate();

		String startDate = stagingTaskCacheModel.startDate;

		if ((startDate != null) && (startDate.length() == 0)) {
			stagingTaskCacheModel.startDate = null;
		}

		stagingTaskCacheModel.endDate = getEndDate();

		String endDate = stagingTaskCacheModel.endDate;

		if ((endDate != null) && (endDate.length() == 0)) {
			stagingTaskCacheModel.endDate = null;
		}

		stagingTaskCacheModel.dueDate = getDueDate();

		String dueDate = stagingTaskCacheModel.dueDate;

		if ((dueDate != null) && (dueDate.length() == 0)) {
			stagingTaskCacheModel.dueDate = null;
		}

		stagingTaskCacheModel.taskStatus = getTaskStatus();

		String taskStatus = stagingTaskCacheModel.taskStatus;

		if ((taskStatus != null) && (taskStatus.length() == 0)) {
			stagingTaskCacheModel.taskStatus = null;
		}

		stagingTaskCacheModel.description = getDescription();

		String description = stagingTaskCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			stagingTaskCacheModel.description = null;
		}

		stagingTaskCacheModel.completedFlag = getCompletedFlag();

		String completedFlag = stagingTaskCacheModel.completedFlag;

		if ((completedFlag != null) && (completedFlag.length() == 0)) {
			stagingTaskCacheModel.completedFlag = null;
		}

		stagingTaskCacheModel.externalCreateDate = getExternalCreateDate();

		String externalCreateDate = stagingTaskCacheModel.externalCreateDate;

		if ((externalCreateDate != null) &&
			(externalCreateDate.length() == 0)) {

			stagingTaskCacheModel.externalCreateDate = null;
		}

		stagingTaskCacheModel.externalModifiedDate = getExternalModifiedDate();

		String externalModifiedDate =
			stagingTaskCacheModel.externalModifiedDate;

		if ((externalModifiedDate != null) &&
			(externalModifiedDate.length() == 0)) {

			stagingTaskCacheModel.externalModifiedDate = null;
		}

		return stagingTaskCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<StagingTask, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<StagingTask, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StagingTask, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((StagingTask)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<StagingTask, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<StagingTask, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StagingTask, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((StagingTask)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, StagingTask>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _taskId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _externalCaseId;
	private long _externalTaskId;
	private String _priority;
	private String _startDate;
	private String _endDate;
	private String _dueDate;
	private String _taskStatus;
	private String _description;
	private String _completedFlag;
	private String _externalCreateDate;
	private String _externalModifiedDate;
	private StagingTask _escapedModel;

}