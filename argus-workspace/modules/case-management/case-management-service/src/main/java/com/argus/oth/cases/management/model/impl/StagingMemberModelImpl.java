/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.argus.oth.cases.management.model.impl;

import com.argus.oth.cases.management.model.StagingMember;
import com.argus.oth.cases.management.model.StagingMemberModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the StagingMember service. Represents a row in the &quot;OTH_StagingMember&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>StagingMemberModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StagingMemberImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StagingMemberImpl
 * @generated
 */
public class StagingMemberModelImpl
	extends BaseModelImpl<StagingMember> implements StagingMemberModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a staging member model instance should use the <code>StagingMember</code> interface instead.
	 */
	public static final String TABLE_NAME = "OTH_StagingMember";

	public static final Object[][] TABLE_COLUMNS = {
		{"stagingMemberId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"externalMemberId", Types.BIGINT},
		{"clientId", Types.BIGINT}, {"clientGroupId", Types.BIGINT},
		{"memberNumber", Types.VARCHAR}, {"memberFirstName", Types.VARCHAR},
		{"memberLastName", Types.VARCHAR}, {"memberDOB", Types.VARCHAR},
		{"certificationNumber", Types.VARCHAR}, {"rxNumber", Types.VARCHAR},
		{"externalModifiedDate", Types.VARCHAR},
		{"externalCreatedDate", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("stagingMemberId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("externalMemberId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("clientId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("clientGroupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("memberNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("memberFirstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("memberLastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("memberDOB", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("certificationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rxNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalModifiedDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalCreatedDate", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OTH_StagingMember (stagingMemberId LONG not null primary key,createDate DATE null,modifiedDate DATE null,externalMemberId LONG,clientId LONG,clientGroupId LONG,memberNumber VARCHAR(1000) null,memberFirstName VARCHAR(1000) null,memberLastName VARCHAR(1000) null,memberDOB VARCHAR(75) null,certificationNumber VARCHAR(1000) null,rxNumber VARCHAR(1000) null,externalModifiedDate VARCHAR(75) null,externalCreatedDate VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table OTH_StagingMember";

	public static final String ORDER_BY_JPQL =
		" ORDER BY stagingMember.stagingMemberId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OTH_StagingMember.stagingMemberId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long EXTERNALMEMBERID_COLUMN_BITMASK = 1L;

	public static final long STAGINGMEMBERID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public StagingMemberModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _stagingMemberId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStagingMemberId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _stagingMemberId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StagingMember.class;
	}

	@Override
	public String getModelClassName() {
		return StagingMember.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<StagingMember, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<StagingMember, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StagingMember, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((StagingMember)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<StagingMember, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<StagingMember, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(StagingMember)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<StagingMember, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<StagingMember, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, StagingMember>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			StagingMember.class.getClassLoader(), StagingMember.class,
			ModelWrapper.class);

		try {
			Constructor<StagingMember> constructor =
				(Constructor<StagingMember>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<StagingMember, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<StagingMember, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<StagingMember, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<StagingMember, Object>>();
		Map<String, BiConsumer<StagingMember, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<StagingMember, ?>>();

		attributeGetterFunctions.put(
			"stagingMemberId", StagingMember::getStagingMemberId);
		attributeSetterBiConsumers.put(
			"stagingMemberId",
			(BiConsumer<StagingMember, Long>)StagingMember::setStagingMemberId);
		attributeGetterFunctions.put(
			"createDate", StagingMember::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<StagingMember, Date>)StagingMember::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", StagingMember::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<StagingMember, Date>)StagingMember::setModifiedDate);
		attributeGetterFunctions.put(
			"externalMemberId", StagingMember::getExternalMemberId);
		attributeSetterBiConsumers.put(
			"externalMemberId",
			(BiConsumer<StagingMember, Long>)
				StagingMember::setExternalMemberId);
		attributeGetterFunctions.put("clientId", StagingMember::getClientId);
		attributeSetterBiConsumers.put(
			"clientId",
			(BiConsumer<StagingMember, Long>)StagingMember::setClientId);
		attributeGetterFunctions.put(
			"clientGroupId", StagingMember::getClientGroupId);
		attributeSetterBiConsumers.put(
			"clientGroupId",
			(BiConsumer<StagingMember, Long>)StagingMember::setClientGroupId);
		attributeGetterFunctions.put(
			"memberNumber", StagingMember::getMemberNumber);
		attributeSetterBiConsumers.put(
			"memberNumber",
			(BiConsumer<StagingMember, String>)StagingMember::setMemberNumber);
		attributeGetterFunctions.put(
			"memberFirstName", StagingMember::getMemberFirstName);
		attributeSetterBiConsumers.put(
			"memberFirstName",
			(BiConsumer<StagingMember, String>)
				StagingMember::setMemberFirstName);
		attributeGetterFunctions.put(
			"memberLastName", StagingMember::getMemberLastName);
		attributeSetterBiConsumers.put(
			"memberLastName",
			(BiConsumer<StagingMember, String>)
				StagingMember::setMemberLastName);
		attributeGetterFunctions.put("memberDOB", StagingMember::getMemberDOB);
		attributeSetterBiConsumers.put(
			"memberDOB",
			(BiConsumer<StagingMember, String>)StagingMember::setMemberDOB);
		attributeGetterFunctions.put(
			"certificationNumber", StagingMember::getCertificationNumber);
		attributeSetterBiConsumers.put(
			"certificationNumber",
			(BiConsumer<StagingMember, String>)
				StagingMember::setCertificationNumber);
		attributeGetterFunctions.put("rxNumber", StagingMember::getRxNumber);
		attributeSetterBiConsumers.put(
			"rxNumber",
			(BiConsumer<StagingMember, String>)StagingMember::setRxNumber);
		attributeGetterFunctions.put(
			"externalModifiedDate", StagingMember::getExternalModifiedDate);
		attributeSetterBiConsumers.put(
			"externalModifiedDate",
			(BiConsumer<StagingMember, String>)
				StagingMember::setExternalModifiedDate);
		attributeGetterFunctions.put(
			"externalCreatedDate", StagingMember::getExternalCreatedDate);
		attributeSetterBiConsumers.put(
			"externalCreatedDate",
			(BiConsumer<StagingMember, String>)
				StagingMember::setExternalCreatedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getStagingMemberId() {
		return _stagingMemberId;
	}

	@Override
	public void setStagingMemberId(long stagingMemberId) {
		_columnBitmask = -1L;

		_stagingMemberId = stagingMemberId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getExternalMemberId() {
		return _externalMemberId;
	}

	@Override
	public void setExternalMemberId(long externalMemberId) {
		_columnBitmask |= EXTERNALMEMBERID_COLUMN_BITMASK;

		if (!_setOriginalExternalMemberId) {
			_setOriginalExternalMemberId = true;

			_originalExternalMemberId = _externalMemberId;
		}

		_externalMemberId = externalMemberId;
	}

	public long getOriginalExternalMemberId() {
		return _originalExternalMemberId;
	}

	@Override
	public long getClientId() {
		return _clientId;
	}

	@Override
	public void setClientId(long clientId) {
		_clientId = clientId;
	}

	@Override
	public long getClientGroupId() {
		return _clientGroupId;
	}

	@Override
	public void setClientGroupId(long clientGroupId) {
		_clientGroupId = clientGroupId;
	}

	@Override
	public String getMemberNumber() {
		if (_memberNumber == null) {
			return "";
		}
		else {
			return _memberNumber;
		}
	}

	@Override
	public void setMemberNumber(String memberNumber) {
		_memberNumber = memberNumber;
	}

	@Override
	public String getMemberFirstName() {
		if (_memberFirstName == null) {
			return "";
		}
		else {
			return _memberFirstName;
		}
	}

	@Override
	public void setMemberFirstName(String memberFirstName) {
		_memberFirstName = memberFirstName;
	}

	@Override
	public String getMemberLastName() {
		if (_memberLastName == null) {
			return "";
		}
		else {
			return _memberLastName;
		}
	}

	@Override
	public void setMemberLastName(String memberLastName) {
		_memberLastName = memberLastName;
	}

	@Override
	public String getMemberDOB() {
		if (_memberDOB == null) {
			return "";
		}
		else {
			return _memberDOB;
		}
	}

	@Override
	public void setMemberDOB(String memberDOB) {
		_memberDOB = memberDOB;
	}

	@Override
	public String getCertificationNumber() {
		if (_certificationNumber == null) {
			return "";
		}
		else {
			return _certificationNumber;
		}
	}

	@Override
	public void setCertificationNumber(String certificationNumber) {
		_certificationNumber = certificationNumber;
	}

	@Override
	public String getRxNumber() {
		if (_rxNumber == null) {
			return "";
		}
		else {
			return _rxNumber;
		}
	}

	@Override
	public void setRxNumber(String rxNumber) {
		_rxNumber = rxNumber;
	}

	@Override
	public String getExternalModifiedDate() {
		if (_externalModifiedDate == null) {
			return "";
		}
		else {
			return _externalModifiedDate;
		}
	}

	@Override
	public void setExternalModifiedDate(String externalModifiedDate) {
		_externalModifiedDate = externalModifiedDate;
	}

	@Override
	public String getExternalCreatedDate() {
		if (_externalCreatedDate == null) {
			return "";
		}
		else {
			return _externalCreatedDate;
		}
	}

	@Override
	public void setExternalCreatedDate(String externalCreatedDate) {
		_externalCreatedDate = externalCreatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, StagingMember.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StagingMember toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, StagingMember>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StagingMemberImpl stagingMemberImpl = new StagingMemberImpl();

		stagingMemberImpl.setStagingMemberId(getStagingMemberId());
		stagingMemberImpl.setCreateDate(getCreateDate());
		stagingMemberImpl.setModifiedDate(getModifiedDate());
		stagingMemberImpl.setExternalMemberId(getExternalMemberId());
		stagingMemberImpl.setClientId(getClientId());
		stagingMemberImpl.setClientGroupId(getClientGroupId());
		stagingMemberImpl.setMemberNumber(getMemberNumber());
		stagingMemberImpl.setMemberFirstName(getMemberFirstName());
		stagingMemberImpl.setMemberLastName(getMemberLastName());
		stagingMemberImpl.setMemberDOB(getMemberDOB());
		stagingMemberImpl.setCertificationNumber(getCertificationNumber());
		stagingMemberImpl.setRxNumber(getRxNumber());
		stagingMemberImpl.setExternalModifiedDate(getExternalModifiedDate());
		stagingMemberImpl.setExternalCreatedDate(getExternalCreatedDate());

		stagingMemberImpl.resetOriginalValues();

		return stagingMemberImpl;
	}

	@Override
	public int compareTo(StagingMember stagingMember) {
		int value = 0;

		if (getStagingMemberId() < stagingMember.getStagingMemberId()) {
			value = -1;
		}
		else if (getStagingMemberId() > stagingMember.getStagingMemberId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof StagingMember)) {
			return false;
		}

		StagingMember stagingMember = (StagingMember)object;

		long primaryKey = stagingMember.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_setModifiedDate = false;
		_originalExternalMemberId = _externalMemberId;

		_setOriginalExternalMemberId = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<StagingMember> toCacheModel() {
		StagingMemberCacheModel stagingMemberCacheModel =
			new StagingMemberCacheModel();

		stagingMemberCacheModel.stagingMemberId = getStagingMemberId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			stagingMemberCacheModel.createDate = createDate.getTime();
		}
		else {
			stagingMemberCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			stagingMemberCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			stagingMemberCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		stagingMemberCacheModel.externalMemberId = getExternalMemberId();

		stagingMemberCacheModel.clientId = getClientId();

		stagingMemberCacheModel.clientGroupId = getClientGroupId();

		stagingMemberCacheModel.memberNumber = getMemberNumber();

		String memberNumber = stagingMemberCacheModel.memberNumber;

		if ((memberNumber != null) && (memberNumber.length() == 0)) {
			stagingMemberCacheModel.memberNumber = null;
		}

		stagingMemberCacheModel.memberFirstName = getMemberFirstName();

		String memberFirstName = stagingMemberCacheModel.memberFirstName;

		if ((memberFirstName != null) && (memberFirstName.length() == 0)) {
			stagingMemberCacheModel.memberFirstName = null;
		}

		stagingMemberCacheModel.memberLastName = getMemberLastName();

		String memberLastName = stagingMemberCacheModel.memberLastName;

		if ((memberLastName != null) && (memberLastName.length() == 0)) {
			stagingMemberCacheModel.memberLastName = null;
		}

		stagingMemberCacheModel.memberDOB = getMemberDOB();

		String memberDOB = stagingMemberCacheModel.memberDOB;

		if ((memberDOB != null) && (memberDOB.length() == 0)) {
			stagingMemberCacheModel.memberDOB = null;
		}

		stagingMemberCacheModel.certificationNumber = getCertificationNumber();

		String certificationNumber =
			stagingMemberCacheModel.certificationNumber;

		if ((certificationNumber != null) &&
			(certificationNumber.length() == 0)) {

			stagingMemberCacheModel.certificationNumber = null;
		}

		stagingMemberCacheModel.rxNumber = getRxNumber();

		String rxNumber = stagingMemberCacheModel.rxNumber;

		if ((rxNumber != null) && (rxNumber.length() == 0)) {
			stagingMemberCacheModel.rxNumber = null;
		}

		stagingMemberCacheModel.externalModifiedDate =
			getExternalModifiedDate();

		String externalModifiedDate =
			stagingMemberCacheModel.externalModifiedDate;

		if ((externalModifiedDate != null) &&
			(externalModifiedDate.length() == 0)) {

			stagingMemberCacheModel.externalModifiedDate = null;
		}

		stagingMemberCacheModel.externalCreatedDate = getExternalCreatedDate();

		String externalCreatedDate =
			stagingMemberCacheModel.externalCreatedDate;

		if ((externalCreatedDate != null) &&
			(externalCreatedDate.length() == 0)) {

			stagingMemberCacheModel.externalCreatedDate = null;
		}

		return stagingMemberCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<StagingMember, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<StagingMember, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StagingMember, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((StagingMember)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<StagingMember, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<StagingMember, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StagingMember, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((StagingMember)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, StagingMember>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _stagingMemberId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _externalMemberId;
	private long _originalExternalMemberId;
	private boolean _setOriginalExternalMemberId;
	private long _clientId;
	private long _clientGroupId;
	private String _memberNumber;
	private String _memberFirstName;
	private String _memberLastName;
	private String _memberDOB;
	private String _certificationNumber;
	private String _rxNumber;
	private String _externalModifiedDate;
	private String _externalCreatedDate;
	private long _columnBitmask;
	private StagingMember _escapedModel;

}