/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.argus.oth.cases.management.model.impl;

import com.argus.oth.cases.management.model.AuthProcedure;
import com.argus.oth.cases.management.model.AuthProcedureModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AuthProcedure service. Represents a row in the &quot;OTH_AuthProcedure&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AuthProcedureModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AuthProcedureImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AuthProcedureImpl
 * @generated
 */
public class AuthProcedureModelImpl
	extends BaseModelImpl<AuthProcedure> implements AuthProcedureModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a auth procedure model instance should use the <code>AuthProcedure</code> interface instead.
	 */
	public static final String TABLE_NAME = "OTH_AuthProcedure";

	public static final Object[][] TABLE_COLUMNS = {
		{"authProcedureId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"externalAuthorizationId", Types.BIGINT},
		{"authNumber", Types.VARCHAR}, {"medicalCodeId", Types.VARCHAR},
		{"description", Types.VARCHAR},
		{"externalModifiedDate", Types.TIMESTAMP},
		{"externalCreatedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("authProcedureId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("externalAuthorizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("authNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("medicalCodeId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalModifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("externalCreatedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OTH_AuthProcedure (authProcedureId LONG not null primary key,createDate DATE null,modifiedDate DATE null,externalAuthorizationId LONG,authNumber VARCHAR(75) null,medicalCodeId VARCHAR(75) null,description VARCHAR(2000) null,externalModifiedDate DATE null,externalCreatedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table OTH_AuthProcedure";

	public static final String ORDER_BY_JPQL =
		" ORDER BY authProcedure.authProcedureId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OTH_AuthProcedure.authProcedureId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long AUTHNUMBER_COLUMN_BITMASK = 1L;

	public static final long EXTERNALAUTHORIZATIONID_COLUMN_BITMASK = 2L;

	public static final long MEDICALCODEID_COLUMN_BITMASK = 4L;

	public static final long AUTHPROCEDUREID_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public AuthProcedureModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _authProcedureId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAuthProcedureId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _authProcedureId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AuthProcedure.class;
	}

	@Override
	public String getModelClassName() {
		return AuthProcedure.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AuthProcedure, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AuthProcedure, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AuthProcedure, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AuthProcedure)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AuthProcedure, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AuthProcedure, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AuthProcedure)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AuthProcedure, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AuthProcedure, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, AuthProcedure>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			AuthProcedure.class.getClassLoader(), AuthProcedure.class,
			ModelWrapper.class);

		try {
			Constructor<AuthProcedure> constructor =
				(Constructor<AuthProcedure>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<AuthProcedure, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<AuthProcedure, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<AuthProcedure, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<AuthProcedure, Object>>();
		Map<String, BiConsumer<AuthProcedure, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<AuthProcedure, ?>>();

		attributeGetterFunctions.put(
			"authProcedureId", AuthProcedure::getAuthProcedureId);
		attributeSetterBiConsumers.put(
			"authProcedureId",
			(BiConsumer<AuthProcedure, Long>)AuthProcedure::setAuthProcedureId);
		attributeGetterFunctions.put(
			"createDate", AuthProcedure::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<AuthProcedure, Date>)AuthProcedure::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", AuthProcedure::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<AuthProcedure, Date>)AuthProcedure::setModifiedDate);
		attributeGetterFunctions.put(
			"externalAuthorizationId",
			AuthProcedure::getExternalAuthorizationId);
		attributeSetterBiConsumers.put(
			"externalAuthorizationId",
			(BiConsumer<AuthProcedure, Long>)
				AuthProcedure::setExternalAuthorizationId);
		attributeGetterFunctions.put(
			"authNumber", AuthProcedure::getAuthNumber);
		attributeSetterBiConsumers.put(
			"authNumber",
			(BiConsumer<AuthProcedure, String>)AuthProcedure::setAuthNumber);
		attributeGetterFunctions.put(
			"medicalCodeId", AuthProcedure::getMedicalCodeId);
		attributeSetterBiConsumers.put(
			"medicalCodeId",
			(BiConsumer<AuthProcedure, String>)AuthProcedure::setMedicalCodeId);
		attributeGetterFunctions.put(
			"description", AuthProcedure::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<AuthProcedure, String>)AuthProcedure::setDescription);
		attributeGetterFunctions.put(
			"externalModifiedDate", AuthProcedure::getExternalModifiedDate);
		attributeSetterBiConsumers.put(
			"externalModifiedDate",
			(BiConsumer<AuthProcedure, Date>)
				AuthProcedure::setExternalModifiedDate);
		attributeGetterFunctions.put(
			"externalCreatedDate", AuthProcedure::getExternalCreatedDate);
		attributeSetterBiConsumers.put(
			"externalCreatedDate",
			(BiConsumer<AuthProcedure, Date>)
				AuthProcedure::setExternalCreatedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getAuthProcedureId() {
		return _authProcedureId;
	}

	@Override
	public void setAuthProcedureId(long authProcedureId) {
		_columnBitmask = -1L;

		_authProcedureId = authProcedureId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getExternalAuthorizationId() {
		return _externalAuthorizationId;
	}

	@Override
	public void setExternalAuthorizationId(long externalAuthorizationId) {
		_columnBitmask |= EXTERNALAUTHORIZATIONID_COLUMN_BITMASK;

		if (!_setOriginalExternalAuthorizationId) {
			_setOriginalExternalAuthorizationId = true;

			_originalExternalAuthorizationId = _externalAuthorizationId;
		}

		_externalAuthorizationId = externalAuthorizationId;
	}

	public long getOriginalExternalAuthorizationId() {
		return _originalExternalAuthorizationId;
	}

	@Override
	public String getAuthNumber() {
		if (_authNumber == null) {
			return "";
		}
		else {
			return _authNumber;
		}
	}

	@Override
	public void setAuthNumber(String authNumber) {
		_columnBitmask |= AUTHNUMBER_COLUMN_BITMASK;

		if (_originalAuthNumber == null) {
			_originalAuthNumber = _authNumber;
		}

		_authNumber = authNumber;
	}

	public String getOriginalAuthNumber() {
		return GetterUtil.getString(_originalAuthNumber);
	}

	@Override
	public String getMedicalCodeId() {
		if (_medicalCodeId == null) {
			return "";
		}
		else {
			return _medicalCodeId;
		}
	}

	@Override
	public void setMedicalCodeId(String medicalCodeId) {
		_columnBitmask |= MEDICALCODEID_COLUMN_BITMASK;

		if (_originalMedicalCodeId == null) {
			_originalMedicalCodeId = _medicalCodeId;
		}

		_medicalCodeId = medicalCodeId;
	}

	public String getOriginalMedicalCodeId() {
		return GetterUtil.getString(_originalMedicalCodeId);
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public Date getExternalModifiedDate() {
		return _externalModifiedDate;
	}

	@Override
	public void setExternalModifiedDate(Date externalModifiedDate) {
		_externalModifiedDate = externalModifiedDate;
	}

	@Override
	public Date getExternalCreatedDate() {
		return _externalCreatedDate;
	}

	@Override
	public void setExternalCreatedDate(Date externalCreatedDate) {
		_externalCreatedDate = externalCreatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, AuthProcedure.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AuthProcedure toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AuthProcedure>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AuthProcedureImpl authProcedureImpl = new AuthProcedureImpl();

		authProcedureImpl.setAuthProcedureId(getAuthProcedureId());
		authProcedureImpl.setCreateDate(getCreateDate());
		authProcedureImpl.setModifiedDate(getModifiedDate());
		authProcedureImpl.setExternalAuthorizationId(
			getExternalAuthorizationId());
		authProcedureImpl.setAuthNumber(getAuthNumber());
		authProcedureImpl.setMedicalCodeId(getMedicalCodeId());
		authProcedureImpl.setDescription(getDescription());
		authProcedureImpl.setExternalModifiedDate(getExternalModifiedDate());
		authProcedureImpl.setExternalCreatedDate(getExternalCreatedDate());

		authProcedureImpl.resetOriginalValues();

		return authProcedureImpl;
	}

	@Override
	public int compareTo(AuthProcedure authProcedure) {
		int value = 0;

		if (getAuthProcedureId() < authProcedure.getAuthProcedureId()) {
			value = -1;
		}
		else if (getAuthProcedureId() > authProcedure.getAuthProcedureId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AuthProcedure)) {
			return false;
		}

		AuthProcedure authProcedure = (AuthProcedure)object;

		long primaryKey = authProcedure.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_setModifiedDate = false;
		_originalExternalAuthorizationId = _externalAuthorizationId;

		_setOriginalExternalAuthorizationId = false;

		_originalAuthNumber = _authNumber;

		_originalMedicalCodeId = _medicalCodeId;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AuthProcedure> toCacheModel() {
		AuthProcedureCacheModel authProcedureCacheModel =
			new AuthProcedureCacheModel();

		authProcedureCacheModel.authProcedureId = getAuthProcedureId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			authProcedureCacheModel.createDate = createDate.getTime();
		}
		else {
			authProcedureCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			authProcedureCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			authProcedureCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		authProcedureCacheModel.externalAuthorizationId =
			getExternalAuthorizationId();

		authProcedureCacheModel.authNumber = getAuthNumber();

		String authNumber = authProcedureCacheModel.authNumber;

		if ((authNumber != null) && (authNumber.length() == 0)) {
			authProcedureCacheModel.authNumber = null;
		}

		authProcedureCacheModel.medicalCodeId = getMedicalCodeId();

		String medicalCodeId = authProcedureCacheModel.medicalCodeId;

		if ((medicalCodeId != null) && (medicalCodeId.length() == 0)) {
			authProcedureCacheModel.medicalCodeId = null;
		}

		authProcedureCacheModel.description = getDescription();

		String description = authProcedureCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			authProcedureCacheModel.description = null;
		}

		Date externalModifiedDate = getExternalModifiedDate();

		if (externalModifiedDate != null) {
			authProcedureCacheModel.externalModifiedDate =
				externalModifiedDate.getTime();
		}
		else {
			authProcedureCacheModel.externalModifiedDate = Long.MIN_VALUE;
		}

		Date externalCreatedDate = getExternalCreatedDate();

		if (externalCreatedDate != null) {
			authProcedureCacheModel.externalCreatedDate =
				externalCreatedDate.getTime();
		}
		else {
			authProcedureCacheModel.externalCreatedDate = Long.MIN_VALUE;
		}

		return authProcedureCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AuthProcedure, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AuthProcedure, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AuthProcedure, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((AuthProcedure)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<AuthProcedure, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<AuthProcedure, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AuthProcedure, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((AuthProcedure)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AuthProcedure>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _authProcedureId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _externalAuthorizationId;
	private long _originalExternalAuthorizationId;
	private boolean _setOriginalExternalAuthorizationId;
	private String _authNumber;
	private String _originalAuthNumber;
	private String _medicalCodeId;
	private String _originalMedicalCodeId;
	private String _description;
	private Date _externalModifiedDate;
	private Date _externalCreatedDate;
	private long _columnBitmask;
	private AuthProcedure _escapedModel;

}