/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.argus.oth.account.management.model.impl;

import com.argus.oth.account.management.model.StagingAMAnalyticsDB;
import com.argus.oth.account.management.model.StagingAMAnalyticsDBModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the StagingAMAnalyticsDB service. Represents a row in the &quot;OTH_StagingAMAnalyticsDB&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>StagingAMAnalyticsDBModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StagingAMAnalyticsDBImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StagingAMAnalyticsDBImpl
 * @generated
 */
public class StagingAMAnalyticsDBModelImpl
	extends BaseModelImpl<StagingAMAnalyticsDB>
	implements StagingAMAnalyticsDBModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a staging am analytics db model instance should use the <code>StagingAMAnalyticsDB</code> interface instead.
	 */
	public static final String TABLE_NAME = "OTH_StagingAMAnalyticsDB";

	public static final Object[][] TABLE_COLUMNS = {
		{"stagingAMAnalyticsDbId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"clientId", Types.BIGINT}, {"savingsPercent", Types.DOUBLE},
		{"chargedAmount", Types.DOUBLE}, {"repricedAmount", Types.DOUBLE},
		{"avgDownTime", Types.DOUBLE}, {"avgSpeedOfAnswer", Types.DOUBLE},
		{"abandonmentRate", Types.DOUBLE}, {"claimsTurnaround", Types.BIGINT},
		{"downTimeGoal", Types.DOUBLE}, {"speedOfAnswerGoal", Types.DOUBLE},
		{"abandonmentRateGoal", Types.DOUBLE},
		{"claimsTurnaroundGoal", Types.DOUBLE}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("stagingAMAnalyticsDbId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("clientId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("savingsPercent", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("chargedAmount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("repricedAmount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("avgDownTime", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("avgSpeedOfAnswer", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("abandonmentRate", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("claimsTurnaround", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("downTimeGoal", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("speedOfAnswerGoal", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("abandonmentRateGoal", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("claimsTurnaroundGoal", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OTH_StagingAMAnalyticsDB (stagingAMAnalyticsDbId LONG not null primary key,createDate DATE null,modifiedDate DATE null,clientId LONG,savingsPercent DOUBLE,chargedAmount DOUBLE,repricedAmount DOUBLE,avgDownTime DOUBLE,avgSpeedOfAnswer DOUBLE,abandonmentRate DOUBLE,claimsTurnaround LONG,downTimeGoal DOUBLE,speedOfAnswerGoal DOUBLE,abandonmentRateGoal DOUBLE,claimsTurnaroundGoal DOUBLE)";

	public static final String TABLE_SQL_DROP =
		"drop table OTH_StagingAMAnalyticsDB";

	public static final String ORDER_BY_JPQL =
		" ORDER BY stagingAMAnalyticsDB.stagingAMAnalyticsDbId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OTH_StagingAMAnalyticsDB.stagingAMAnalyticsDbId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public StagingAMAnalyticsDBModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _stagingAMAnalyticsDbId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStagingAMAnalyticsDbId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _stagingAMAnalyticsDbId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StagingAMAnalyticsDB.class;
	}

	@Override
	public String getModelClassName() {
		return StagingAMAnalyticsDB.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<StagingAMAnalyticsDB, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<StagingAMAnalyticsDB, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StagingAMAnalyticsDB, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((StagingAMAnalyticsDB)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<StagingAMAnalyticsDB, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<StagingAMAnalyticsDB, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(StagingAMAnalyticsDB)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<StagingAMAnalyticsDB, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<StagingAMAnalyticsDB, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, StagingAMAnalyticsDB>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			StagingAMAnalyticsDB.class.getClassLoader(),
			StagingAMAnalyticsDB.class, ModelWrapper.class);

		try {
			Constructor<StagingAMAnalyticsDB> constructor =
				(Constructor<StagingAMAnalyticsDB>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<StagingAMAnalyticsDB, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<StagingAMAnalyticsDB, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<StagingAMAnalyticsDB, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<StagingAMAnalyticsDB, Object>>();
		Map<String, BiConsumer<StagingAMAnalyticsDB, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<StagingAMAnalyticsDB, ?>>();

		attributeGetterFunctions.put(
			"stagingAMAnalyticsDbId",
			StagingAMAnalyticsDB::getStagingAMAnalyticsDbId);
		attributeSetterBiConsumers.put(
			"stagingAMAnalyticsDbId",
			(BiConsumer<StagingAMAnalyticsDB, Long>)
				StagingAMAnalyticsDB::setStagingAMAnalyticsDbId);
		attributeGetterFunctions.put(
			"createDate", StagingAMAnalyticsDB::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<StagingAMAnalyticsDB, Date>)
				StagingAMAnalyticsDB::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", StagingAMAnalyticsDB::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<StagingAMAnalyticsDB, Date>)
				StagingAMAnalyticsDB::setModifiedDate);
		attributeGetterFunctions.put(
			"clientId", StagingAMAnalyticsDB::getClientId);
		attributeSetterBiConsumers.put(
			"clientId",
			(BiConsumer<StagingAMAnalyticsDB, Long>)
				StagingAMAnalyticsDB::setClientId);
		attributeGetterFunctions.put(
			"savingsPercent", StagingAMAnalyticsDB::getSavingsPercent);
		attributeSetterBiConsumers.put(
			"savingsPercent",
			(BiConsumer<StagingAMAnalyticsDB, Double>)
				StagingAMAnalyticsDB::setSavingsPercent);
		attributeGetterFunctions.put(
			"chargedAmount", StagingAMAnalyticsDB::getChargedAmount);
		attributeSetterBiConsumers.put(
			"chargedAmount",
			(BiConsumer<StagingAMAnalyticsDB, Double>)
				StagingAMAnalyticsDB::setChargedAmount);
		attributeGetterFunctions.put(
			"repricedAmount", StagingAMAnalyticsDB::getRepricedAmount);
		attributeSetterBiConsumers.put(
			"repricedAmount",
			(BiConsumer<StagingAMAnalyticsDB, Double>)
				StagingAMAnalyticsDB::setRepricedAmount);
		attributeGetterFunctions.put(
			"avgDownTime", StagingAMAnalyticsDB::getAvgDownTime);
		attributeSetterBiConsumers.put(
			"avgDownTime",
			(BiConsumer<StagingAMAnalyticsDB, Double>)
				StagingAMAnalyticsDB::setAvgDownTime);
		attributeGetterFunctions.put(
			"avgSpeedOfAnswer", StagingAMAnalyticsDB::getAvgSpeedOfAnswer);
		attributeSetterBiConsumers.put(
			"avgSpeedOfAnswer",
			(BiConsumer<StagingAMAnalyticsDB, Double>)
				StagingAMAnalyticsDB::setAvgSpeedOfAnswer);
		attributeGetterFunctions.put(
			"abandonmentRate", StagingAMAnalyticsDB::getAbandonmentRate);
		attributeSetterBiConsumers.put(
			"abandonmentRate",
			(BiConsumer<StagingAMAnalyticsDB, Double>)
				StagingAMAnalyticsDB::setAbandonmentRate);
		attributeGetterFunctions.put(
			"claimsTurnaround", StagingAMAnalyticsDB::getClaimsTurnaround);
		attributeSetterBiConsumers.put(
			"claimsTurnaround",
			(BiConsumer<StagingAMAnalyticsDB, Long>)
				StagingAMAnalyticsDB::setClaimsTurnaround);
		attributeGetterFunctions.put(
			"downTimeGoal", StagingAMAnalyticsDB::getDownTimeGoal);
		attributeSetterBiConsumers.put(
			"downTimeGoal",
			(BiConsumer<StagingAMAnalyticsDB, Double>)
				StagingAMAnalyticsDB::setDownTimeGoal);
		attributeGetterFunctions.put(
			"speedOfAnswerGoal", StagingAMAnalyticsDB::getSpeedOfAnswerGoal);
		attributeSetterBiConsumers.put(
			"speedOfAnswerGoal",
			(BiConsumer<StagingAMAnalyticsDB, Double>)
				StagingAMAnalyticsDB::setSpeedOfAnswerGoal);
		attributeGetterFunctions.put(
			"abandonmentRateGoal",
			StagingAMAnalyticsDB::getAbandonmentRateGoal);
		attributeSetterBiConsumers.put(
			"abandonmentRateGoal",
			(BiConsumer<StagingAMAnalyticsDB, Double>)
				StagingAMAnalyticsDB::setAbandonmentRateGoal);
		attributeGetterFunctions.put(
			"claimsTurnaroundGoal",
			StagingAMAnalyticsDB::getClaimsTurnaroundGoal);
		attributeSetterBiConsumers.put(
			"claimsTurnaroundGoal",
			(BiConsumer<StagingAMAnalyticsDB, Double>)
				StagingAMAnalyticsDB::setClaimsTurnaroundGoal);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getStagingAMAnalyticsDbId() {
		return _stagingAMAnalyticsDbId;
	}

	@Override
	public void setStagingAMAnalyticsDbId(long stagingAMAnalyticsDbId) {
		_stagingAMAnalyticsDbId = stagingAMAnalyticsDbId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getClientId() {
		return _clientId;
	}

	@Override
	public void setClientId(long clientId) {
		_clientId = clientId;
	}

	@Override
	public double getSavingsPercent() {
		return _savingsPercent;
	}

	@Override
	public void setSavingsPercent(double savingsPercent) {
		_savingsPercent = savingsPercent;
	}

	@Override
	public double getChargedAmount() {
		return _chargedAmount;
	}

	@Override
	public void setChargedAmount(double chargedAmount) {
		_chargedAmount = chargedAmount;
	}

	@Override
	public double getRepricedAmount() {
		return _repricedAmount;
	}

	@Override
	public void setRepricedAmount(double repricedAmount) {
		_repricedAmount = repricedAmount;
	}

	@Override
	public double getAvgDownTime() {
		return _avgDownTime;
	}

	@Override
	public void setAvgDownTime(double avgDownTime) {
		_avgDownTime = avgDownTime;
	}

	@Override
	public double getAvgSpeedOfAnswer() {
		return _avgSpeedOfAnswer;
	}

	@Override
	public void setAvgSpeedOfAnswer(double avgSpeedOfAnswer) {
		_avgSpeedOfAnswer = avgSpeedOfAnswer;
	}

	@Override
	public double getAbandonmentRate() {
		return _abandonmentRate;
	}

	@Override
	public void setAbandonmentRate(double abandonmentRate) {
		_abandonmentRate = abandonmentRate;
	}

	@Override
	public long getClaimsTurnaround() {
		return _claimsTurnaround;
	}

	@Override
	public void setClaimsTurnaround(long claimsTurnaround) {
		_claimsTurnaround = claimsTurnaround;
	}

	@Override
	public double getDownTimeGoal() {
		return _downTimeGoal;
	}

	@Override
	public void setDownTimeGoal(double downTimeGoal) {
		_downTimeGoal = downTimeGoal;
	}

	@Override
	public double getSpeedOfAnswerGoal() {
		return _speedOfAnswerGoal;
	}

	@Override
	public void setSpeedOfAnswerGoal(double speedOfAnswerGoal) {
		_speedOfAnswerGoal = speedOfAnswerGoal;
	}

	@Override
	public double getAbandonmentRateGoal() {
		return _abandonmentRateGoal;
	}

	@Override
	public void setAbandonmentRateGoal(double abandonmentRateGoal) {
		_abandonmentRateGoal = abandonmentRateGoal;
	}

	@Override
	public double getClaimsTurnaroundGoal() {
		return _claimsTurnaroundGoal;
	}

	@Override
	public void setClaimsTurnaroundGoal(double claimsTurnaroundGoal) {
		_claimsTurnaroundGoal = claimsTurnaroundGoal;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, StagingAMAnalyticsDB.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StagingAMAnalyticsDB toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, StagingAMAnalyticsDB>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StagingAMAnalyticsDBImpl stagingAMAnalyticsDBImpl =
			new StagingAMAnalyticsDBImpl();

		stagingAMAnalyticsDBImpl.setStagingAMAnalyticsDbId(
			getStagingAMAnalyticsDbId());
		stagingAMAnalyticsDBImpl.setCreateDate(getCreateDate());
		stagingAMAnalyticsDBImpl.setModifiedDate(getModifiedDate());
		stagingAMAnalyticsDBImpl.setClientId(getClientId());
		stagingAMAnalyticsDBImpl.setSavingsPercent(getSavingsPercent());
		stagingAMAnalyticsDBImpl.setChargedAmount(getChargedAmount());
		stagingAMAnalyticsDBImpl.setRepricedAmount(getRepricedAmount());
		stagingAMAnalyticsDBImpl.setAvgDownTime(getAvgDownTime());
		stagingAMAnalyticsDBImpl.setAvgSpeedOfAnswer(getAvgSpeedOfAnswer());
		stagingAMAnalyticsDBImpl.setAbandonmentRate(getAbandonmentRate());
		stagingAMAnalyticsDBImpl.setClaimsTurnaround(getClaimsTurnaround());
		stagingAMAnalyticsDBImpl.setDownTimeGoal(getDownTimeGoal());
		stagingAMAnalyticsDBImpl.setSpeedOfAnswerGoal(getSpeedOfAnswerGoal());
		stagingAMAnalyticsDBImpl.setAbandonmentRateGoal(
			getAbandonmentRateGoal());
		stagingAMAnalyticsDBImpl.setClaimsTurnaroundGoal(
			getClaimsTurnaroundGoal());

		stagingAMAnalyticsDBImpl.resetOriginalValues();

		return stagingAMAnalyticsDBImpl;
	}

	@Override
	public int compareTo(StagingAMAnalyticsDB stagingAMAnalyticsDB) {
		int value = 0;

		if (getStagingAMAnalyticsDbId() <
				stagingAMAnalyticsDB.getStagingAMAnalyticsDbId()) {

			value = -1;
		}
		else if (getStagingAMAnalyticsDbId() >
					stagingAMAnalyticsDB.getStagingAMAnalyticsDbId()) {

			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof StagingAMAnalyticsDB)) {
			return false;
		}

		StagingAMAnalyticsDB stagingAMAnalyticsDB =
			(StagingAMAnalyticsDB)object;

		long primaryKey = stagingAMAnalyticsDB.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_setModifiedDate = false;
	}

	@Override
	public CacheModel<StagingAMAnalyticsDB> toCacheModel() {
		StagingAMAnalyticsDBCacheModel stagingAMAnalyticsDBCacheModel =
			new StagingAMAnalyticsDBCacheModel();

		stagingAMAnalyticsDBCacheModel.stagingAMAnalyticsDbId =
			getStagingAMAnalyticsDbId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			stagingAMAnalyticsDBCacheModel.createDate = createDate.getTime();
		}
		else {
			stagingAMAnalyticsDBCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			stagingAMAnalyticsDBCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			stagingAMAnalyticsDBCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		stagingAMAnalyticsDBCacheModel.clientId = getClientId();

		stagingAMAnalyticsDBCacheModel.savingsPercent = getSavingsPercent();

		stagingAMAnalyticsDBCacheModel.chargedAmount = getChargedAmount();

		stagingAMAnalyticsDBCacheModel.repricedAmount = getRepricedAmount();

		stagingAMAnalyticsDBCacheModel.avgDownTime = getAvgDownTime();

		stagingAMAnalyticsDBCacheModel.avgSpeedOfAnswer = getAvgSpeedOfAnswer();

		stagingAMAnalyticsDBCacheModel.abandonmentRate = getAbandonmentRate();

		stagingAMAnalyticsDBCacheModel.claimsTurnaround = getClaimsTurnaround();

		stagingAMAnalyticsDBCacheModel.downTimeGoal = getDownTimeGoal();

		stagingAMAnalyticsDBCacheModel.speedOfAnswerGoal =
			getSpeedOfAnswerGoal();

		stagingAMAnalyticsDBCacheModel.abandonmentRateGoal =
			getAbandonmentRateGoal();

		stagingAMAnalyticsDBCacheModel.claimsTurnaroundGoal =
			getClaimsTurnaroundGoal();

		return stagingAMAnalyticsDBCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<StagingAMAnalyticsDB, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<StagingAMAnalyticsDB, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StagingAMAnalyticsDB, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((StagingAMAnalyticsDB)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<StagingAMAnalyticsDB, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<StagingAMAnalyticsDB, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StagingAMAnalyticsDB, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((StagingAMAnalyticsDB)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, StagingAMAnalyticsDB>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _stagingAMAnalyticsDbId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _clientId;
	private double _savingsPercent;
	private double _chargedAmount;
	private double _repricedAmount;
	private double _avgDownTime;
	private double _avgSpeedOfAnswer;
	private double _abandonmentRate;
	private long _claimsTurnaround;
	private double _downTimeGoal;
	private double _speedOfAnswerGoal;
	private double _abandonmentRateGoal;
	private double _claimsTurnaroundGoal;
	private StagingAMAnalyticsDB _escapedModel;

}