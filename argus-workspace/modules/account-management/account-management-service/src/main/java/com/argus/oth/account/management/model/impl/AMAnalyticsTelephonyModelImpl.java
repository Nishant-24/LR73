/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.argus.oth.account.management.model.impl;

import com.argus.oth.account.management.model.AMAnalyticsTelephony;
import com.argus.oth.account.management.model.AMAnalyticsTelephonyModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AMAnalyticsTelephony service. Represents a row in the &quot;OTH_AMAnalyticsTelephony&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AMAnalyticsTelephonyModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AMAnalyticsTelephonyImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AMAnalyticsTelephonyImpl
 * @generated
 */
public class AMAnalyticsTelephonyModelImpl
	extends BaseModelImpl<AMAnalyticsTelephony>
	implements AMAnalyticsTelephonyModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a am analytics telephony model instance should use the <code>AMAnalyticsTelephony</code> interface instead.
	 */
	public static final String TABLE_NAME = "OTH_AMAnalyticsTelephony";

	public static final Object[][] TABLE_COLUMNS = {
		{"amAnalyticsTelephonyId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"clientId", Types.BIGINT},
		{"amAnalyticsTelephonyDate", Types.TIMESTAMP},
		{"avgDownTime", Types.DOUBLE}, {"avgSpeedOfAnswer", Types.DOUBLE},
		{"abandonmentRate", Types.DOUBLE}, {"downTimeGoal", Types.DOUBLE},
		{"speedAnswerGoal", Types.DOUBLE},
		{"abandonmentRateGoal", Types.DOUBLE},
		{"overallAvgDownTime", Types.DOUBLE},
		{"overallAvgSpeedOfAnswer", Types.DOUBLE},
		{"overallAvgAbandonmentRate", Types.DOUBLE}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("amAnalyticsTelephonyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("clientId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("amAnalyticsTelephonyDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("avgDownTime", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("avgSpeedOfAnswer", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("abandonmentRate", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("downTimeGoal", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("speedAnswerGoal", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("abandonmentRateGoal", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("overallAvgDownTime", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("overallAvgSpeedOfAnswer", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("overallAvgAbandonmentRate", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OTH_AMAnalyticsTelephony (amAnalyticsTelephonyId LONG not null primary key,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,clientId LONG,amAnalyticsTelephonyDate DATE null,avgDownTime DOUBLE,avgSpeedOfAnswer DOUBLE,abandonmentRate DOUBLE,downTimeGoal DOUBLE,speedAnswerGoal DOUBLE,abandonmentRateGoal DOUBLE,overallAvgDownTime DOUBLE,overallAvgSpeedOfAnswer DOUBLE,overallAvgAbandonmentRate DOUBLE)";

	public static final String TABLE_SQL_DROP =
		"drop table OTH_AMAnalyticsTelephony";

	public static final String ORDER_BY_JPQL =
		" ORDER BY amAnalyticsTelephony.amAnalyticsTelephonyDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OTH_AMAnalyticsTelephony.amAnalyticsTelephonyDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public AMAnalyticsTelephonyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _amAnalyticsTelephonyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAmAnalyticsTelephonyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _amAnalyticsTelephonyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AMAnalyticsTelephony.class;
	}

	@Override
	public String getModelClassName() {
		return AMAnalyticsTelephony.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AMAnalyticsTelephony, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AMAnalyticsTelephony, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AMAnalyticsTelephony, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AMAnalyticsTelephony)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AMAnalyticsTelephony, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AMAnalyticsTelephony, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AMAnalyticsTelephony)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AMAnalyticsTelephony, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AMAnalyticsTelephony, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, AMAnalyticsTelephony>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			AMAnalyticsTelephony.class.getClassLoader(),
			AMAnalyticsTelephony.class, ModelWrapper.class);

		try {
			Constructor<AMAnalyticsTelephony> constructor =
				(Constructor<AMAnalyticsTelephony>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<AMAnalyticsTelephony, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<AMAnalyticsTelephony, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<AMAnalyticsTelephony, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<AMAnalyticsTelephony, Object>>();
		Map<String, BiConsumer<AMAnalyticsTelephony, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<AMAnalyticsTelephony, ?>>();

		attributeGetterFunctions.put(
			"amAnalyticsTelephonyId",
			AMAnalyticsTelephony::getAmAnalyticsTelephonyId);
		attributeSetterBiConsumers.put(
			"amAnalyticsTelephonyId",
			(BiConsumer<AMAnalyticsTelephony, Long>)
				AMAnalyticsTelephony::setAmAnalyticsTelephonyId);
		attributeGetterFunctions.put(
			"groupId", AMAnalyticsTelephony::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<AMAnalyticsTelephony, Long>)
				AMAnalyticsTelephony::setGroupId);
		attributeGetterFunctions.put(
			"companyId", AMAnalyticsTelephony::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<AMAnalyticsTelephony, Long>)
				AMAnalyticsTelephony::setCompanyId);
		attributeGetterFunctions.put(
			"createDate", AMAnalyticsTelephony::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<AMAnalyticsTelephony, Date>)
				AMAnalyticsTelephony::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", AMAnalyticsTelephony::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<AMAnalyticsTelephony, Date>)
				AMAnalyticsTelephony::setModifiedDate);
		attributeGetterFunctions.put(
			"clientId", AMAnalyticsTelephony::getClientId);
		attributeSetterBiConsumers.put(
			"clientId",
			(BiConsumer<AMAnalyticsTelephony, Long>)
				AMAnalyticsTelephony::setClientId);
		attributeGetterFunctions.put(
			"amAnalyticsTelephonyDate",
			AMAnalyticsTelephony::getAmAnalyticsTelephonyDate);
		attributeSetterBiConsumers.put(
			"amAnalyticsTelephonyDate",
			(BiConsumer<AMAnalyticsTelephony, Date>)
				AMAnalyticsTelephony::setAmAnalyticsTelephonyDate);
		attributeGetterFunctions.put(
			"avgDownTime", AMAnalyticsTelephony::getAvgDownTime);
		attributeSetterBiConsumers.put(
			"avgDownTime",
			(BiConsumer<AMAnalyticsTelephony, Double>)
				AMAnalyticsTelephony::setAvgDownTime);
		attributeGetterFunctions.put(
			"avgSpeedOfAnswer", AMAnalyticsTelephony::getAvgSpeedOfAnswer);
		attributeSetterBiConsumers.put(
			"avgSpeedOfAnswer",
			(BiConsumer<AMAnalyticsTelephony, Double>)
				AMAnalyticsTelephony::setAvgSpeedOfAnswer);
		attributeGetterFunctions.put(
			"abandonmentRate", AMAnalyticsTelephony::getAbandonmentRate);
		attributeSetterBiConsumers.put(
			"abandonmentRate",
			(BiConsumer<AMAnalyticsTelephony, Double>)
				AMAnalyticsTelephony::setAbandonmentRate);
		attributeGetterFunctions.put(
			"downTimeGoal", AMAnalyticsTelephony::getDownTimeGoal);
		attributeSetterBiConsumers.put(
			"downTimeGoal",
			(BiConsumer<AMAnalyticsTelephony, Double>)
				AMAnalyticsTelephony::setDownTimeGoal);
		attributeGetterFunctions.put(
			"speedAnswerGoal", AMAnalyticsTelephony::getSpeedAnswerGoal);
		attributeSetterBiConsumers.put(
			"speedAnswerGoal",
			(BiConsumer<AMAnalyticsTelephony, Double>)
				AMAnalyticsTelephony::setSpeedAnswerGoal);
		attributeGetterFunctions.put(
			"abandonmentRateGoal",
			AMAnalyticsTelephony::getAbandonmentRateGoal);
		attributeSetterBiConsumers.put(
			"abandonmentRateGoal",
			(BiConsumer<AMAnalyticsTelephony, Double>)
				AMAnalyticsTelephony::setAbandonmentRateGoal);
		attributeGetterFunctions.put(
			"overallAvgDownTime", AMAnalyticsTelephony::getOverallAvgDownTime);
		attributeSetterBiConsumers.put(
			"overallAvgDownTime",
			(BiConsumer<AMAnalyticsTelephony, Double>)
				AMAnalyticsTelephony::setOverallAvgDownTime);
		attributeGetterFunctions.put(
			"overallAvgSpeedOfAnswer",
			AMAnalyticsTelephony::getOverallAvgSpeedOfAnswer);
		attributeSetterBiConsumers.put(
			"overallAvgSpeedOfAnswer",
			(BiConsumer<AMAnalyticsTelephony, Double>)
				AMAnalyticsTelephony::setOverallAvgSpeedOfAnswer);
		attributeGetterFunctions.put(
			"overallAvgAbandonmentRate",
			AMAnalyticsTelephony::getOverallAvgAbandonmentRate);
		attributeSetterBiConsumers.put(
			"overallAvgAbandonmentRate",
			(BiConsumer<AMAnalyticsTelephony, Double>)
				AMAnalyticsTelephony::setOverallAvgAbandonmentRate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getAmAnalyticsTelephonyId() {
		return _amAnalyticsTelephonyId;
	}

	@Override
	public void setAmAnalyticsTelephonyId(long amAnalyticsTelephonyId) {
		_amAnalyticsTelephonyId = amAnalyticsTelephonyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getClientId() {
		return _clientId;
	}

	@Override
	public void setClientId(long clientId) {
		_clientId = clientId;
	}

	@Override
	public Date getAmAnalyticsTelephonyDate() {
		return _amAnalyticsTelephonyDate;
	}

	@Override
	public void setAmAnalyticsTelephonyDate(Date amAnalyticsTelephonyDate) {
		_amAnalyticsTelephonyDate = amAnalyticsTelephonyDate;
	}

	@Override
	public double getAvgDownTime() {
		return _avgDownTime;
	}

	@Override
	public void setAvgDownTime(double avgDownTime) {
		_avgDownTime = avgDownTime;
	}

	@Override
	public double getAvgSpeedOfAnswer() {
		return _avgSpeedOfAnswer;
	}

	@Override
	public void setAvgSpeedOfAnswer(double avgSpeedOfAnswer) {
		_avgSpeedOfAnswer = avgSpeedOfAnswer;
	}

	@Override
	public double getAbandonmentRate() {
		return _abandonmentRate;
	}

	@Override
	public void setAbandonmentRate(double abandonmentRate) {
		_abandonmentRate = abandonmentRate;
	}

	@Override
	public double getDownTimeGoal() {
		return _downTimeGoal;
	}

	@Override
	public void setDownTimeGoal(double downTimeGoal) {
		_downTimeGoal = downTimeGoal;
	}

	@Override
	public double getSpeedAnswerGoal() {
		return _speedAnswerGoal;
	}

	@Override
	public void setSpeedAnswerGoal(double speedAnswerGoal) {
		_speedAnswerGoal = speedAnswerGoal;
	}

	@Override
	public double getAbandonmentRateGoal() {
		return _abandonmentRateGoal;
	}

	@Override
	public void setAbandonmentRateGoal(double abandonmentRateGoal) {
		_abandonmentRateGoal = abandonmentRateGoal;
	}

	@Override
	public double getOverallAvgDownTime() {
		return _overallAvgDownTime;
	}

	@Override
	public void setOverallAvgDownTime(double overallAvgDownTime) {
		_overallAvgDownTime = overallAvgDownTime;
	}

	@Override
	public double getOverallAvgSpeedOfAnswer() {
		return _overallAvgSpeedOfAnswer;
	}

	@Override
	public void setOverallAvgSpeedOfAnswer(double overallAvgSpeedOfAnswer) {
		_overallAvgSpeedOfAnswer = overallAvgSpeedOfAnswer;
	}

	@Override
	public double getOverallAvgAbandonmentRate() {
		return _overallAvgAbandonmentRate;
	}

	@Override
	public void setOverallAvgAbandonmentRate(double overallAvgAbandonmentRate) {
		_overallAvgAbandonmentRate = overallAvgAbandonmentRate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AMAnalyticsTelephony.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AMAnalyticsTelephony toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AMAnalyticsTelephony>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AMAnalyticsTelephonyImpl amAnalyticsTelephonyImpl =
			new AMAnalyticsTelephonyImpl();

		amAnalyticsTelephonyImpl.setAmAnalyticsTelephonyId(
			getAmAnalyticsTelephonyId());
		amAnalyticsTelephonyImpl.setGroupId(getGroupId());
		amAnalyticsTelephonyImpl.setCompanyId(getCompanyId());
		amAnalyticsTelephonyImpl.setCreateDate(getCreateDate());
		amAnalyticsTelephonyImpl.setModifiedDate(getModifiedDate());
		amAnalyticsTelephonyImpl.setClientId(getClientId());
		amAnalyticsTelephonyImpl.setAmAnalyticsTelephonyDate(
			getAmAnalyticsTelephonyDate());
		amAnalyticsTelephonyImpl.setAvgDownTime(getAvgDownTime());
		amAnalyticsTelephonyImpl.setAvgSpeedOfAnswer(getAvgSpeedOfAnswer());
		amAnalyticsTelephonyImpl.setAbandonmentRate(getAbandonmentRate());
		amAnalyticsTelephonyImpl.setDownTimeGoal(getDownTimeGoal());
		amAnalyticsTelephonyImpl.setSpeedAnswerGoal(getSpeedAnswerGoal());
		amAnalyticsTelephonyImpl.setAbandonmentRateGoal(
			getAbandonmentRateGoal());
		amAnalyticsTelephonyImpl.setOverallAvgDownTime(getOverallAvgDownTime());
		amAnalyticsTelephonyImpl.setOverallAvgSpeedOfAnswer(
			getOverallAvgSpeedOfAnswer());
		amAnalyticsTelephonyImpl.setOverallAvgAbandonmentRate(
			getOverallAvgAbandonmentRate());

		amAnalyticsTelephonyImpl.resetOriginalValues();

		return amAnalyticsTelephonyImpl;
	}

	@Override
	public int compareTo(AMAnalyticsTelephony amAnalyticsTelephony) {
		int value = 0;

		value = DateUtil.compareTo(
			getAmAnalyticsTelephonyDate(),
			amAnalyticsTelephony.getAmAnalyticsTelephonyDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AMAnalyticsTelephony)) {
			return false;
		}

		AMAnalyticsTelephony amAnalyticsTelephony =
			(AMAnalyticsTelephony)object;

		long primaryKey = amAnalyticsTelephony.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_setModifiedDate = false;
	}

	@Override
	public CacheModel<AMAnalyticsTelephony> toCacheModel() {
		AMAnalyticsTelephonyCacheModel amAnalyticsTelephonyCacheModel =
			new AMAnalyticsTelephonyCacheModel();

		amAnalyticsTelephonyCacheModel.amAnalyticsTelephonyId =
			getAmAnalyticsTelephonyId();

		amAnalyticsTelephonyCacheModel.groupId = getGroupId();

		amAnalyticsTelephonyCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			amAnalyticsTelephonyCacheModel.createDate = createDate.getTime();
		}
		else {
			amAnalyticsTelephonyCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			amAnalyticsTelephonyCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			amAnalyticsTelephonyCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		amAnalyticsTelephonyCacheModel.clientId = getClientId();

		Date amAnalyticsTelephonyDate = getAmAnalyticsTelephonyDate();

		if (amAnalyticsTelephonyDate != null) {
			amAnalyticsTelephonyCacheModel.amAnalyticsTelephonyDate =
				amAnalyticsTelephonyDate.getTime();
		}
		else {
			amAnalyticsTelephonyCacheModel.amAnalyticsTelephonyDate =
				Long.MIN_VALUE;
		}

		amAnalyticsTelephonyCacheModel.avgDownTime = getAvgDownTime();

		amAnalyticsTelephonyCacheModel.avgSpeedOfAnswer = getAvgSpeedOfAnswer();

		amAnalyticsTelephonyCacheModel.abandonmentRate = getAbandonmentRate();

		amAnalyticsTelephonyCacheModel.downTimeGoal = getDownTimeGoal();

		amAnalyticsTelephonyCacheModel.speedAnswerGoal = getSpeedAnswerGoal();

		amAnalyticsTelephonyCacheModel.abandonmentRateGoal =
			getAbandonmentRateGoal();

		amAnalyticsTelephonyCacheModel.overallAvgDownTime =
			getOverallAvgDownTime();

		amAnalyticsTelephonyCacheModel.overallAvgSpeedOfAnswer =
			getOverallAvgSpeedOfAnswer();

		amAnalyticsTelephonyCacheModel.overallAvgAbandonmentRate =
			getOverallAvgAbandonmentRate();

		return amAnalyticsTelephonyCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AMAnalyticsTelephony, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AMAnalyticsTelephony, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AMAnalyticsTelephony, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((AMAnalyticsTelephony)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<AMAnalyticsTelephony, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<AMAnalyticsTelephony, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AMAnalyticsTelephony, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((AMAnalyticsTelephony)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AMAnalyticsTelephony>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _amAnalyticsTelephonyId;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _clientId;
	private Date _amAnalyticsTelephonyDate;
	private double _avgDownTime;
	private double _avgSpeedOfAnswer;
	private double _abandonmentRate;
	private double _downTimeGoal;
	private double _speedAnswerGoal;
	private double _abandonmentRateGoal;
	private double _overallAvgDownTime;
	private double _overallAvgSpeedOfAnswer;
	private double _overallAvgAbandonmentRate;
	private AMAnalyticsTelephony _escapedModel;

}