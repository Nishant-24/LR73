/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.argus.oth.cases.management.model.impl;

import com.argus.oth.cases.management.model.StagingAuthorization;
import com.argus.oth.cases.management.model.StagingAuthorizationModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the StagingAuthorization service. Represents a row in the &quot;OTH_StagingAuthorization&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>StagingAuthorizationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StagingAuthorizationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StagingAuthorizationImpl
 * @generated
 */
public class StagingAuthorizationModelImpl
	extends BaseModelImpl<StagingAuthorization>
	implements StagingAuthorizationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a staging authorization model instance should use the <code>StagingAuthorization</code> interface instead.
	 */
	public static final String TABLE_NAME = "OTH_StagingAuthorization";

	public static final Object[][] TABLE_COLUMNS = {
		{"stagingAuthorizationId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"externalCaseId", Types.BIGINT},
		{"externalAuthorizationId", Types.BIGINT},
		{"externalMemberId", Types.BIGINT}, {"description", Types.VARCHAR},
		{"rtcAuthorizationStatus", Types.VARCHAR},
		{"authStatus", Types.VARCHAR}, {"statusChangeDate", Types.VARCHAR},
		{"receivedDate", Types.VARCHAR}, {"authNumber", Types.VARCHAR},
		{"category", Types.VARCHAR}, {"rtcAuthorizationType", Types.VARCHAR},
		{"facility", Types.VARCHAR}, {"procedureCode", Types.VARCHAR},
		{"comments", Types.VARCHAR}, {"effectiveFrom", Types.VARCHAR},
		{"effectiveThru", Types.VARCHAR}, {"externalCreateDate", Types.VARCHAR},
		{"externalModifiedDate", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("stagingAuthorizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("externalCaseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("externalAuthorizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("externalMemberId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rtcAuthorizationStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("authStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusChangeDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("receivedDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("authNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("category", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rtcAuthorizationType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("facility", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("procedureCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comments", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("effectiveFrom", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("effectiveThru", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalCreateDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalModifiedDate", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OTH_StagingAuthorization (stagingAuthorizationId LONG not null primary key,createDate DATE null,externalCaseId LONG,externalAuthorizationId LONG,externalMemberId LONG,description STRING null,rtcAuthorizationStatus VARCHAR(75) null,authStatus VARCHAR(75) null,statusChangeDate VARCHAR(75) null,receivedDate VARCHAR(75) null,authNumber VARCHAR(75) null,category VARCHAR(1000) null,rtcAuthorizationType VARCHAR(75) null,facility VARCHAR(1000) null,procedureCode STRING null,comments STRING null,effectiveFrom VARCHAR(75) null,effectiveThru VARCHAR(75) null,externalCreateDate VARCHAR(75) null,externalModifiedDate VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table OTH_StagingAuthorization";

	public static final String ORDER_BY_JPQL =
		" ORDER BY stagingAuthorization.receivedDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OTH_StagingAuthorization.receivedDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long EXTERNALCASEID_COLUMN_BITMASK = 1L;

	public static final long RECEIVEDDATE_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public StagingAuthorizationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _stagingAuthorizationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStagingAuthorizationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _stagingAuthorizationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StagingAuthorization.class;
	}

	@Override
	public String getModelClassName() {
		return StagingAuthorization.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<StagingAuthorization, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<StagingAuthorization, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StagingAuthorization, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((StagingAuthorization)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<StagingAuthorization, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<StagingAuthorization, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(StagingAuthorization)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<StagingAuthorization, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<StagingAuthorization, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, StagingAuthorization>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			StagingAuthorization.class.getClassLoader(),
			StagingAuthorization.class, ModelWrapper.class);

		try {
			Constructor<StagingAuthorization> constructor =
				(Constructor<StagingAuthorization>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<StagingAuthorization, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<StagingAuthorization, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<StagingAuthorization, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<StagingAuthorization, Object>>();
		Map<String, BiConsumer<StagingAuthorization, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<StagingAuthorization, ?>>();

		attributeGetterFunctions.put(
			"stagingAuthorizationId",
			StagingAuthorization::getStagingAuthorizationId);
		attributeSetterBiConsumers.put(
			"stagingAuthorizationId",
			(BiConsumer<StagingAuthorization, Long>)
				StagingAuthorization::setStagingAuthorizationId);
		attributeGetterFunctions.put(
			"createDate", StagingAuthorization::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<StagingAuthorization, Date>)
				StagingAuthorization::setCreateDate);
		attributeGetterFunctions.put(
			"externalCaseId", StagingAuthorization::getExternalCaseId);
		attributeSetterBiConsumers.put(
			"externalCaseId",
			(BiConsumer<StagingAuthorization, Long>)
				StagingAuthorization::setExternalCaseId);
		attributeGetterFunctions.put(
			"externalAuthorizationId",
			StagingAuthorization::getExternalAuthorizationId);
		attributeSetterBiConsumers.put(
			"externalAuthorizationId",
			(BiConsumer<StagingAuthorization, Long>)
				StagingAuthorization::setExternalAuthorizationId);
		attributeGetterFunctions.put(
			"externalMemberId", StagingAuthorization::getExternalMemberId);
		attributeSetterBiConsumers.put(
			"externalMemberId",
			(BiConsumer<StagingAuthorization, Long>)
				StagingAuthorization::setExternalMemberId);
		attributeGetterFunctions.put(
			"description", StagingAuthorization::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<StagingAuthorization, String>)
				StagingAuthorization::setDescription);
		attributeGetterFunctions.put(
			"rtcAuthorizationStatus",
			StagingAuthorization::getRtcAuthorizationStatus);
		attributeSetterBiConsumers.put(
			"rtcAuthorizationStatus",
			(BiConsumer<StagingAuthorization, String>)
				StagingAuthorization::setRtcAuthorizationStatus);
		attributeGetterFunctions.put(
			"authStatus", StagingAuthorization::getAuthStatus);
		attributeSetterBiConsumers.put(
			"authStatus",
			(BiConsumer<StagingAuthorization, String>)
				StagingAuthorization::setAuthStatus);
		attributeGetterFunctions.put(
			"statusChangeDate", StagingAuthorization::getStatusChangeDate);
		attributeSetterBiConsumers.put(
			"statusChangeDate",
			(BiConsumer<StagingAuthorization, String>)
				StagingAuthorization::setStatusChangeDate);
		attributeGetterFunctions.put(
			"receivedDate", StagingAuthorization::getReceivedDate);
		attributeSetterBiConsumers.put(
			"receivedDate",
			(BiConsumer<StagingAuthorization, String>)
				StagingAuthorization::setReceivedDate);
		attributeGetterFunctions.put(
			"authNumber", StagingAuthorization::getAuthNumber);
		attributeSetterBiConsumers.put(
			"authNumber",
			(BiConsumer<StagingAuthorization, String>)
				StagingAuthorization::setAuthNumber);
		attributeGetterFunctions.put(
			"category", StagingAuthorization::getCategory);
		attributeSetterBiConsumers.put(
			"category",
			(BiConsumer<StagingAuthorization, String>)
				StagingAuthorization::setCategory);
		attributeGetterFunctions.put(
			"rtcAuthorizationType",
			StagingAuthorization::getRtcAuthorizationType);
		attributeSetterBiConsumers.put(
			"rtcAuthorizationType",
			(BiConsumer<StagingAuthorization, String>)
				StagingAuthorization::setRtcAuthorizationType);
		attributeGetterFunctions.put(
			"facility", StagingAuthorization::getFacility);
		attributeSetterBiConsumers.put(
			"facility",
			(BiConsumer<StagingAuthorization, String>)
				StagingAuthorization::setFacility);
		attributeGetterFunctions.put(
			"procedureCode", StagingAuthorization::getProcedureCode);
		attributeSetterBiConsumers.put(
			"procedureCode",
			(BiConsumer<StagingAuthorization, String>)
				StagingAuthorization::setProcedureCode);
		attributeGetterFunctions.put(
			"comments", StagingAuthorization::getComments);
		attributeSetterBiConsumers.put(
			"comments",
			(BiConsumer<StagingAuthorization, String>)
				StagingAuthorization::setComments);
		attributeGetterFunctions.put(
			"effectiveFrom", StagingAuthorization::getEffectiveFrom);
		attributeSetterBiConsumers.put(
			"effectiveFrom",
			(BiConsumer<StagingAuthorization, String>)
				StagingAuthorization::setEffectiveFrom);
		attributeGetterFunctions.put(
			"effectiveThru", StagingAuthorization::getEffectiveThru);
		attributeSetterBiConsumers.put(
			"effectiveThru",
			(BiConsumer<StagingAuthorization, String>)
				StagingAuthorization::setEffectiveThru);
		attributeGetterFunctions.put(
			"externalCreateDate", StagingAuthorization::getExternalCreateDate);
		attributeSetterBiConsumers.put(
			"externalCreateDate",
			(BiConsumer<StagingAuthorization, String>)
				StagingAuthorization::setExternalCreateDate);
		attributeGetterFunctions.put(
			"externalModifiedDate",
			StagingAuthorization::getExternalModifiedDate);
		attributeSetterBiConsumers.put(
			"externalModifiedDate",
			(BiConsumer<StagingAuthorization, String>)
				StagingAuthorization::setExternalModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getStagingAuthorizationId() {
		return _stagingAuthorizationId;
	}

	@Override
	public void setStagingAuthorizationId(long stagingAuthorizationId) {
		_stagingAuthorizationId = stagingAuthorizationId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public long getExternalCaseId() {
		return _externalCaseId;
	}

	@Override
	public void setExternalCaseId(long externalCaseId) {
		_columnBitmask |= EXTERNALCASEID_COLUMN_BITMASK;

		if (!_setOriginalExternalCaseId) {
			_setOriginalExternalCaseId = true;

			_originalExternalCaseId = _externalCaseId;
		}

		_externalCaseId = externalCaseId;
	}

	public long getOriginalExternalCaseId() {
		return _originalExternalCaseId;
	}

	@Override
	public long getExternalAuthorizationId() {
		return _externalAuthorizationId;
	}

	@Override
	public void setExternalAuthorizationId(long externalAuthorizationId) {
		_externalAuthorizationId = externalAuthorizationId;
	}

	@Override
	public long getExternalMemberId() {
		return _externalMemberId;
	}

	@Override
	public void setExternalMemberId(long externalMemberId) {
		_externalMemberId = externalMemberId;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getRtcAuthorizationStatus() {
		if (_rtcAuthorizationStatus == null) {
			return "";
		}
		else {
			return _rtcAuthorizationStatus;
		}
	}

	@Override
	public void setRtcAuthorizationStatus(String rtcAuthorizationStatus) {
		_rtcAuthorizationStatus = rtcAuthorizationStatus;
	}

	@Override
	public String getAuthStatus() {
		if (_authStatus == null) {
			return "";
		}
		else {
			return _authStatus;
		}
	}

	@Override
	public void setAuthStatus(String authStatus) {
		_authStatus = authStatus;
	}

	@Override
	public String getStatusChangeDate() {
		if (_statusChangeDate == null) {
			return "";
		}
		else {
			return _statusChangeDate;
		}
	}

	@Override
	public void setStatusChangeDate(String statusChangeDate) {
		_statusChangeDate = statusChangeDate;
	}

	@Override
	public String getReceivedDate() {
		if (_receivedDate == null) {
			return "";
		}
		else {
			return _receivedDate;
		}
	}

	@Override
	public void setReceivedDate(String receivedDate) {
		_receivedDate = receivedDate;
	}

	@Override
	public String getAuthNumber() {
		if (_authNumber == null) {
			return "";
		}
		else {
			return _authNumber;
		}
	}

	@Override
	public void setAuthNumber(String authNumber) {
		_authNumber = authNumber;
	}

	@Override
	public String getCategory() {
		if (_category == null) {
			return "";
		}
		else {
			return _category;
		}
	}

	@Override
	public void setCategory(String category) {
		_category = category;
	}

	@Override
	public String getRtcAuthorizationType() {
		if (_rtcAuthorizationType == null) {
			return "";
		}
		else {
			return _rtcAuthorizationType;
		}
	}

	@Override
	public void setRtcAuthorizationType(String rtcAuthorizationType) {
		_rtcAuthorizationType = rtcAuthorizationType;
	}

	@Override
	public String getFacility() {
		if (_facility == null) {
			return "";
		}
		else {
			return _facility;
		}
	}

	@Override
	public void setFacility(String facility) {
		_facility = facility;
	}

	@Override
	public String getProcedureCode() {
		if (_procedureCode == null) {
			return "";
		}
		else {
			return _procedureCode;
		}
	}

	@Override
	public void setProcedureCode(String procedureCode) {
		_procedureCode = procedureCode;
	}

	@Override
	public String getComments() {
		if (_comments == null) {
			return "";
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	@Override
	public String getEffectiveFrom() {
		if (_effectiveFrom == null) {
			return "";
		}
		else {
			return _effectiveFrom;
		}
	}

	@Override
	public void setEffectiveFrom(String effectiveFrom) {
		_effectiveFrom = effectiveFrom;
	}

	@Override
	public String getEffectiveThru() {
		if (_effectiveThru == null) {
			return "";
		}
		else {
			return _effectiveThru;
		}
	}

	@Override
	public void setEffectiveThru(String effectiveThru) {
		_effectiveThru = effectiveThru;
	}

	@Override
	public String getExternalCreateDate() {
		if (_externalCreateDate == null) {
			return "";
		}
		else {
			return _externalCreateDate;
		}
	}

	@Override
	public void setExternalCreateDate(String externalCreateDate) {
		_externalCreateDate = externalCreateDate;
	}

	@Override
	public String getExternalModifiedDate() {
		if (_externalModifiedDate == null) {
			return "";
		}
		else {
			return _externalModifiedDate;
		}
	}

	@Override
	public void setExternalModifiedDate(String externalModifiedDate) {
		_externalModifiedDate = externalModifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, StagingAuthorization.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StagingAuthorization toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, StagingAuthorization>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StagingAuthorizationImpl stagingAuthorizationImpl =
			new StagingAuthorizationImpl();

		stagingAuthorizationImpl.setStagingAuthorizationId(
			getStagingAuthorizationId());
		stagingAuthorizationImpl.setCreateDate(getCreateDate());
		stagingAuthorizationImpl.setExternalCaseId(getExternalCaseId());
		stagingAuthorizationImpl.setExternalAuthorizationId(
			getExternalAuthorizationId());
		stagingAuthorizationImpl.setExternalMemberId(getExternalMemberId());
		stagingAuthorizationImpl.setDescription(getDescription());
		stagingAuthorizationImpl.setRtcAuthorizationStatus(
			getRtcAuthorizationStatus());
		stagingAuthorizationImpl.setAuthStatus(getAuthStatus());
		stagingAuthorizationImpl.setStatusChangeDate(getStatusChangeDate());
		stagingAuthorizationImpl.setReceivedDate(getReceivedDate());
		stagingAuthorizationImpl.setAuthNumber(getAuthNumber());
		stagingAuthorizationImpl.setCategory(getCategory());
		stagingAuthorizationImpl.setRtcAuthorizationType(
			getRtcAuthorizationType());
		stagingAuthorizationImpl.setFacility(getFacility());
		stagingAuthorizationImpl.setProcedureCode(getProcedureCode());
		stagingAuthorizationImpl.setComments(getComments());
		stagingAuthorizationImpl.setEffectiveFrom(getEffectiveFrom());
		stagingAuthorizationImpl.setEffectiveThru(getEffectiveThru());
		stagingAuthorizationImpl.setExternalCreateDate(getExternalCreateDate());
		stagingAuthorizationImpl.setExternalModifiedDate(
			getExternalModifiedDate());

		stagingAuthorizationImpl.resetOriginalValues();

		return stagingAuthorizationImpl;
	}

	@Override
	public int compareTo(StagingAuthorization stagingAuthorization) {
		int value = 0;

		value = getReceivedDate().compareTo(
			stagingAuthorization.getReceivedDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof StagingAuthorization)) {
			return false;
		}

		StagingAuthorization stagingAuthorization =
			(StagingAuthorization)object;

		long primaryKey = stagingAuthorization.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalExternalCaseId = _externalCaseId;

		_setOriginalExternalCaseId = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<StagingAuthorization> toCacheModel() {
		StagingAuthorizationCacheModel stagingAuthorizationCacheModel =
			new StagingAuthorizationCacheModel();

		stagingAuthorizationCacheModel.stagingAuthorizationId =
			getStagingAuthorizationId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			stagingAuthorizationCacheModel.createDate = createDate.getTime();
		}
		else {
			stagingAuthorizationCacheModel.createDate = Long.MIN_VALUE;
		}

		stagingAuthorizationCacheModel.externalCaseId = getExternalCaseId();

		stagingAuthorizationCacheModel.externalAuthorizationId =
			getExternalAuthorizationId();

		stagingAuthorizationCacheModel.externalMemberId = getExternalMemberId();

		stagingAuthorizationCacheModel.description = getDescription();

		String description = stagingAuthorizationCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			stagingAuthorizationCacheModel.description = null;
		}

		stagingAuthorizationCacheModel.rtcAuthorizationStatus =
			getRtcAuthorizationStatus();

		String rtcAuthorizationStatus =
			stagingAuthorizationCacheModel.rtcAuthorizationStatus;

		if ((rtcAuthorizationStatus != null) &&
			(rtcAuthorizationStatus.length() == 0)) {

			stagingAuthorizationCacheModel.rtcAuthorizationStatus = null;
		}

		stagingAuthorizationCacheModel.authStatus = getAuthStatus();

		String authStatus = stagingAuthorizationCacheModel.authStatus;

		if ((authStatus != null) && (authStatus.length() == 0)) {
			stagingAuthorizationCacheModel.authStatus = null;
		}

		stagingAuthorizationCacheModel.statusChangeDate = getStatusChangeDate();

		String statusChangeDate =
			stagingAuthorizationCacheModel.statusChangeDate;

		if ((statusChangeDate != null) && (statusChangeDate.length() == 0)) {
			stagingAuthorizationCacheModel.statusChangeDate = null;
		}

		stagingAuthorizationCacheModel.receivedDate = getReceivedDate();

		String receivedDate = stagingAuthorizationCacheModel.receivedDate;

		if ((receivedDate != null) && (receivedDate.length() == 0)) {
			stagingAuthorizationCacheModel.receivedDate = null;
		}

		stagingAuthorizationCacheModel.authNumber = getAuthNumber();

		String authNumber = stagingAuthorizationCacheModel.authNumber;

		if ((authNumber != null) && (authNumber.length() == 0)) {
			stagingAuthorizationCacheModel.authNumber = null;
		}

		stagingAuthorizationCacheModel.category = getCategory();

		String category = stagingAuthorizationCacheModel.category;

		if ((category != null) && (category.length() == 0)) {
			stagingAuthorizationCacheModel.category = null;
		}

		stagingAuthorizationCacheModel.rtcAuthorizationType =
			getRtcAuthorizationType();

		String rtcAuthorizationType =
			stagingAuthorizationCacheModel.rtcAuthorizationType;

		if ((rtcAuthorizationType != null) &&
			(rtcAuthorizationType.length() == 0)) {

			stagingAuthorizationCacheModel.rtcAuthorizationType = null;
		}

		stagingAuthorizationCacheModel.facility = getFacility();

		String facility = stagingAuthorizationCacheModel.facility;

		if ((facility != null) && (facility.length() == 0)) {
			stagingAuthorizationCacheModel.facility = null;
		}

		stagingAuthorizationCacheModel.procedureCode = getProcedureCode();

		String procedureCode = stagingAuthorizationCacheModel.procedureCode;

		if ((procedureCode != null) && (procedureCode.length() == 0)) {
			stagingAuthorizationCacheModel.procedureCode = null;
		}

		stagingAuthorizationCacheModel.comments = getComments();

		String comments = stagingAuthorizationCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			stagingAuthorizationCacheModel.comments = null;
		}

		stagingAuthorizationCacheModel.effectiveFrom = getEffectiveFrom();

		String effectiveFrom = stagingAuthorizationCacheModel.effectiveFrom;

		if ((effectiveFrom != null) && (effectiveFrom.length() == 0)) {
			stagingAuthorizationCacheModel.effectiveFrom = null;
		}

		stagingAuthorizationCacheModel.effectiveThru = getEffectiveThru();

		String effectiveThru = stagingAuthorizationCacheModel.effectiveThru;

		if ((effectiveThru != null) && (effectiveThru.length() == 0)) {
			stagingAuthorizationCacheModel.effectiveThru = null;
		}

		stagingAuthorizationCacheModel.externalCreateDate =
			getExternalCreateDate();

		String externalCreateDate =
			stagingAuthorizationCacheModel.externalCreateDate;

		if ((externalCreateDate != null) &&
			(externalCreateDate.length() == 0)) {

			stagingAuthorizationCacheModel.externalCreateDate = null;
		}

		stagingAuthorizationCacheModel.externalModifiedDate =
			getExternalModifiedDate();

		String externalModifiedDate =
			stagingAuthorizationCacheModel.externalModifiedDate;

		if ((externalModifiedDate != null) &&
			(externalModifiedDate.length() == 0)) {

			stagingAuthorizationCacheModel.externalModifiedDate = null;
		}

		return stagingAuthorizationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<StagingAuthorization, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<StagingAuthorization, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StagingAuthorization, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((StagingAuthorization)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<StagingAuthorization, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<StagingAuthorization, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StagingAuthorization, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((StagingAuthorization)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, StagingAuthorization>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _stagingAuthorizationId;
	private Date _createDate;
	private long _externalCaseId;
	private long _originalExternalCaseId;
	private boolean _setOriginalExternalCaseId;
	private long _externalAuthorizationId;
	private long _externalMemberId;
	private String _description;
	private String _rtcAuthorizationStatus;
	private String _authStatus;
	private String _statusChangeDate;
	private String _receivedDate;
	private String _authNumber;
	private String _category;
	private String _rtcAuthorizationType;
	private String _facility;
	private String _procedureCode;
	private String _comments;
	private String _effectiveFrom;
	private String _effectiveThru;
	private String _externalCreateDate;
	private String _externalModifiedDate;
	private long _columnBitmask;
	private StagingAuthorization _escapedModel;

}