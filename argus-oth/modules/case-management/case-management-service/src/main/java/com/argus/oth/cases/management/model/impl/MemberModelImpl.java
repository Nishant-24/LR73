/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.argus.oth.cases.management.model.impl;

import com.argus.oth.cases.management.model.Member;
import com.argus.oth.cases.management.model.MemberModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Member service. Represents a row in the &quot;OTH_Member&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MemberModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MemberImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MemberImpl
 * @generated
 */
public class MemberModelImpl
	extends BaseModelImpl<Member> implements MemberModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a member model instance should use the <code>Member</code> interface instead.
	 */
	public static final String TABLE_NAME = "OTH_Member";

	public static final Object[][] TABLE_COLUMNS = {
		{"memberId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"externalMemberId", Types.BIGINT},
		{"clientId", Types.BIGINT}, {"clientGroupId", Types.BIGINT},
		{"memberNumber", Types.VARCHAR}, {"memberFirstName", Types.VARCHAR},
		{"memberLastName", Types.VARCHAR}, {"memberDOB", Types.TIMESTAMP},
		{"certificationNumber", Types.VARCHAR}, {"rxNumber", Types.VARCHAR},
		{"externalModifiedDate", Types.TIMESTAMP},
		{"externalCreatedDate", Types.TIMESTAMP},
		{"rowProcessed", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("memberId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("externalMemberId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("clientId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("clientGroupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("memberNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("memberFirstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("memberLastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("memberDOB", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("certificationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rxNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalModifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("externalCreatedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("rowProcessed", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OTH_Member (memberId LONG not null primary key,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,externalMemberId LONG,clientId LONG,clientGroupId LONG,memberNumber VARCHAR(1000) null,memberFirstName VARCHAR(1000) null,memberLastName VARCHAR(1000) null,memberDOB DATE null,certificationNumber VARCHAR(1000) null,rxNumber VARCHAR(1000) null,externalModifiedDate DATE null,externalCreatedDate DATE null,rowProcessed VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table OTH_Member";

	public static final String ORDER_BY_JPQL = " ORDER BY member_.memberId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OTH_Member.memberId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long EXTERNALMEMBERID_COLUMN_BITMASK = 1L;

	public static final long ROWPROCESSED_COLUMN_BITMASK = 2L;

	public static final long MEMBERID_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public MemberModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _memberId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMemberId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _memberId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Member.class;
	}

	@Override
	public String getModelClassName() {
		return Member.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Member, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Member, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Member, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Member)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Member, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Member, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Member)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Member, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Member, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Member>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Member.class.getClassLoader(), Member.class, ModelWrapper.class);

		try {
			Constructor<Member> constructor =
				(Constructor<Member>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Member, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Member, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Member, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Member, Object>>();
		Map<String, BiConsumer<Member, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Member, ?>>();

		attributeGetterFunctions.put("memberId", Member::getMemberId);
		attributeSetterBiConsumers.put(
			"memberId", (BiConsumer<Member, Long>)Member::setMemberId);
		attributeGetterFunctions.put("groupId", Member::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Member, Long>)Member::setGroupId);
		attributeGetterFunctions.put("companyId", Member::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Member, Long>)Member::setCompanyId);
		attributeGetterFunctions.put("createDate", Member::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Member, Date>)Member::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Member::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Member, Date>)Member::setModifiedDate);
		attributeGetterFunctions.put(
			"externalMemberId", Member::getExternalMemberId);
		attributeSetterBiConsumers.put(
			"externalMemberId",
			(BiConsumer<Member, Long>)Member::setExternalMemberId);
		attributeGetterFunctions.put("clientId", Member::getClientId);
		attributeSetterBiConsumers.put(
			"clientId", (BiConsumer<Member, Long>)Member::setClientId);
		attributeGetterFunctions.put("clientGroupId", Member::getClientGroupId);
		attributeSetterBiConsumers.put(
			"clientGroupId",
			(BiConsumer<Member, Long>)Member::setClientGroupId);
		attributeGetterFunctions.put("memberNumber", Member::getMemberNumber);
		attributeSetterBiConsumers.put(
			"memberNumber",
			(BiConsumer<Member, String>)Member::setMemberNumber);
		attributeGetterFunctions.put(
			"memberFirstName", Member::getMemberFirstName);
		attributeSetterBiConsumers.put(
			"memberFirstName",
			(BiConsumer<Member, String>)Member::setMemberFirstName);
		attributeGetterFunctions.put(
			"memberLastName", Member::getMemberLastName);
		attributeSetterBiConsumers.put(
			"memberLastName",
			(BiConsumer<Member, String>)Member::setMemberLastName);
		attributeGetterFunctions.put("memberDOB", Member::getMemberDOB);
		attributeSetterBiConsumers.put(
			"memberDOB", (BiConsumer<Member, Date>)Member::setMemberDOB);
		attributeGetterFunctions.put(
			"certificationNumber", Member::getCertificationNumber);
		attributeSetterBiConsumers.put(
			"certificationNumber",
			(BiConsumer<Member, String>)Member::setCertificationNumber);
		attributeGetterFunctions.put("rxNumber", Member::getRxNumber);
		attributeSetterBiConsumers.put(
			"rxNumber", (BiConsumer<Member, String>)Member::setRxNumber);
		attributeGetterFunctions.put(
			"externalModifiedDate", Member::getExternalModifiedDate);
		attributeSetterBiConsumers.put(
			"externalModifiedDate",
			(BiConsumer<Member, Date>)Member::setExternalModifiedDate);
		attributeGetterFunctions.put(
			"externalCreatedDate", Member::getExternalCreatedDate);
		attributeSetterBiConsumers.put(
			"externalCreatedDate",
			(BiConsumer<Member, Date>)Member::setExternalCreatedDate);
		attributeGetterFunctions.put("rowProcessed", Member::getRowProcessed);
		attributeSetterBiConsumers.put(
			"rowProcessed",
			(BiConsumer<Member, String>)Member::setRowProcessed);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getMemberId() {
		return _memberId;
	}

	@Override
	public void setMemberId(long memberId) {
		_memberId = memberId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getExternalMemberId() {
		return _externalMemberId;
	}

	@Override
	public void setExternalMemberId(long externalMemberId) {
		_columnBitmask |= EXTERNALMEMBERID_COLUMN_BITMASK;

		if (!_setOriginalExternalMemberId) {
			_setOriginalExternalMemberId = true;

			_originalExternalMemberId = _externalMemberId;
		}

		_externalMemberId = externalMemberId;
	}

	public long getOriginalExternalMemberId() {
		return _originalExternalMemberId;
	}

	@Override
	public long getClientId() {
		return _clientId;
	}

	@Override
	public void setClientId(long clientId) {
		_clientId = clientId;
	}

	@Override
	public long getClientGroupId() {
		return _clientGroupId;
	}

	@Override
	public void setClientGroupId(long clientGroupId) {
		_clientGroupId = clientGroupId;
	}

	@Override
	public String getMemberNumber() {
		if (_memberNumber == null) {
			return "";
		}
		else {
			return _memberNumber;
		}
	}

	@Override
	public void setMemberNumber(String memberNumber) {
		_memberNumber = memberNumber;
	}

	@Override
	public String getMemberFirstName() {
		if (_memberFirstName == null) {
			return "";
		}
		else {
			return _memberFirstName;
		}
	}

	@Override
	public void setMemberFirstName(String memberFirstName) {
		_memberFirstName = memberFirstName;
	}

	@Override
	public String getMemberLastName() {
		if (_memberLastName == null) {
			return "";
		}
		else {
			return _memberLastName;
		}
	}

	@Override
	public void setMemberLastName(String memberLastName) {
		_memberLastName = memberLastName;
	}

	@Override
	public Date getMemberDOB() {
		return _memberDOB;
	}

	@Override
	public void setMemberDOB(Date memberDOB) {
		_memberDOB = memberDOB;
	}

	@Override
	public String getCertificationNumber() {
		if (_certificationNumber == null) {
			return "";
		}
		else {
			return _certificationNumber;
		}
	}

	@Override
	public void setCertificationNumber(String certificationNumber) {
		_certificationNumber = certificationNumber;
	}

	@Override
	public String getRxNumber() {
		if (_rxNumber == null) {
			return "";
		}
		else {
			return _rxNumber;
		}
	}

	@Override
	public void setRxNumber(String rxNumber) {
		_rxNumber = rxNumber;
	}

	@Override
	public Date getExternalModifiedDate() {
		return _externalModifiedDate;
	}

	@Override
	public void setExternalModifiedDate(Date externalModifiedDate) {
		_externalModifiedDate = externalModifiedDate;
	}

	@Override
	public Date getExternalCreatedDate() {
		return _externalCreatedDate;
	}

	@Override
	public void setExternalCreatedDate(Date externalCreatedDate) {
		_externalCreatedDate = externalCreatedDate;
	}

	@Override
	public String getRowProcessed() {
		if (_rowProcessed == null) {
			return "";
		}
		else {
			return _rowProcessed;
		}
	}

	@Override
	public void setRowProcessed(String rowProcessed) {
		_columnBitmask |= ROWPROCESSED_COLUMN_BITMASK;

		if (_originalRowProcessed == null) {
			_originalRowProcessed = _rowProcessed;
		}

		_rowProcessed = rowProcessed;
	}

	public String getOriginalRowProcessed() {
		return GetterUtil.getString(_originalRowProcessed);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Member.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Member toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Member>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MemberImpl memberImpl = new MemberImpl();

		memberImpl.setMemberId(getMemberId());
		memberImpl.setGroupId(getGroupId());
		memberImpl.setCompanyId(getCompanyId());
		memberImpl.setCreateDate(getCreateDate());
		memberImpl.setModifiedDate(getModifiedDate());
		memberImpl.setExternalMemberId(getExternalMemberId());
		memberImpl.setClientId(getClientId());
		memberImpl.setClientGroupId(getClientGroupId());
		memberImpl.setMemberNumber(getMemberNumber());
		memberImpl.setMemberFirstName(getMemberFirstName());
		memberImpl.setMemberLastName(getMemberLastName());
		memberImpl.setMemberDOB(getMemberDOB());
		memberImpl.setCertificationNumber(getCertificationNumber());
		memberImpl.setRxNumber(getRxNumber());
		memberImpl.setExternalModifiedDate(getExternalModifiedDate());
		memberImpl.setExternalCreatedDate(getExternalCreatedDate());
		memberImpl.setRowProcessed(getRowProcessed());

		memberImpl.resetOriginalValues();

		return memberImpl;
	}

	@Override
	public int compareTo(Member member) {
		int value = 0;

		if (getMemberId() < member.getMemberId()) {
			value = -1;
		}
		else if (getMemberId() > member.getMemberId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Member)) {
			return false;
		}

		Member member = (Member)object;

		long primaryKey = member.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_setModifiedDate = false;
		_originalExternalMemberId = _externalMemberId;

		_setOriginalExternalMemberId = false;

		_originalRowProcessed = _rowProcessed;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Member> toCacheModel() {
		MemberCacheModel memberCacheModel = new MemberCacheModel();

		memberCacheModel.memberId = getMemberId();

		memberCacheModel.groupId = getGroupId();

		memberCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			memberCacheModel.createDate = createDate.getTime();
		}
		else {
			memberCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			memberCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			memberCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		memberCacheModel.externalMemberId = getExternalMemberId();

		memberCacheModel.clientId = getClientId();

		memberCacheModel.clientGroupId = getClientGroupId();

		memberCacheModel.memberNumber = getMemberNumber();

		String memberNumber = memberCacheModel.memberNumber;

		if ((memberNumber != null) && (memberNumber.length() == 0)) {
			memberCacheModel.memberNumber = null;
		}

		memberCacheModel.memberFirstName = getMemberFirstName();

		String memberFirstName = memberCacheModel.memberFirstName;

		if ((memberFirstName != null) && (memberFirstName.length() == 0)) {
			memberCacheModel.memberFirstName = null;
		}

		memberCacheModel.memberLastName = getMemberLastName();

		String memberLastName = memberCacheModel.memberLastName;

		if ((memberLastName != null) && (memberLastName.length() == 0)) {
			memberCacheModel.memberLastName = null;
		}

		Date memberDOB = getMemberDOB();

		if (memberDOB != null) {
			memberCacheModel.memberDOB = memberDOB.getTime();
		}
		else {
			memberCacheModel.memberDOB = Long.MIN_VALUE;
		}

		memberCacheModel.certificationNumber = getCertificationNumber();

		String certificationNumber = memberCacheModel.certificationNumber;

		if ((certificationNumber != null) &&
			(certificationNumber.length() == 0)) {

			memberCacheModel.certificationNumber = null;
		}

		memberCacheModel.rxNumber = getRxNumber();

		String rxNumber = memberCacheModel.rxNumber;

		if ((rxNumber != null) && (rxNumber.length() == 0)) {
			memberCacheModel.rxNumber = null;
		}

		Date externalModifiedDate = getExternalModifiedDate();

		if (externalModifiedDate != null) {
			memberCacheModel.externalModifiedDate =
				externalModifiedDate.getTime();
		}
		else {
			memberCacheModel.externalModifiedDate = Long.MIN_VALUE;
		}

		Date externalCreatedDate = getExternalCreatedDate();

		if (externalCreatedDate != null) {
			memberCacheModel.externalCreatedDate =
				externalCreatedDate.getTime();
		}
		else {
			memberCacheModel.externalCreatedDate = Long.MIN_VALUE;
		}

		memberCacheModel.rowProcessed = getRowProcessed();

		String rowProcessed = memberCacheModel.rowProcessed;

		if ((rowProcessed != null) && (rowProcessed.length() == 0)) {
			memberCacheModel.rowProcessed = null;
		}

		return memberCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Member, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Member, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Member, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Member)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Member, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Member, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Member, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Member)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Member>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _memberId;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _externalMemberId;
	private long _originalExternalMemberId;
	private boolean _setOriginalExternalMemberId;
	private long _clientId;
	private long _clientGroupId;
	private String _memberNumber;
	private String _memberFirstName;
	private String _memberLastName;
	private Date _memberDOB;
	private String _certificationNumber;
	private String _rxNumber;
	private Date _externalModifiedDate;
	private Date _externalCreatedDate;
	private String _rowProcessed;
	private String _originalRowProcessed;
	private long _columnBitmask;
	private Member _escapedModel;

}