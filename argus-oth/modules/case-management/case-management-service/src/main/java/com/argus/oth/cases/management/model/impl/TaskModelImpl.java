/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.argus.oth.cases.management.model.impl;

import com.argus.oth.cases.management.model.Task;
import com.argus.oth.cases.management.model.TaskModel;
import com.argus.oth.cases.management.model.TaskSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Task service. Represents a row in the &quot;OTH_Task&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TaskModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TaskImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TaskImpl
 * @generated
 */
@JSON(strict = true)
public class TaskModelImpl extends BaseModelImpl<Task> implements TaskModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a task model instance should use the <code>Task</code> interface instead.
	 */
	public static final String TABLE_NAME = "OTH_Task";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"taskId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"createdUserId", Types.BIGINT},
		{"modifiedDate", Types.TIMESTAMP}, {"caseId", Types.BIGINT},
		{"externalTaskId", Types.BIGINT}, {"priority", Types.VARCHAR},
		{"startDate", Types.TIMESTAMP}, {"endDate", Types.TIMESTAMP},
		{"dueDate", Types.TIMESTAMP}, {"taskStatus", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"processStatus", Types.VARCHAR},
		{"failureDescription", Types.VARCHAR}, {"rowProcessed", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("taskId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("caseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("externalTaskId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("priority", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dueDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("taskStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("failureDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rowProcessed", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OTH_Task (uuid_ VARCHAR(75) null,taskId LONG not null primary key,groupId LONG,companyId LONG,createDate DATE null,createdUserId LONG,modifiedDate DATE null,caseId LONG,externalTaskId LONG,priority VARCHAR(75) null,startDate DATE null,endDate DATE null,dueDate DATE null,taskStatus VARCHAR(75) null,description STRING null,processStatus VARCHAR(75) null,failureDescription VARCHAR(75) null,rowProcessed VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table OTH_Task";

	public static final String ORDER_BY_JPQL = " ORDER BY task.startDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OTH_Task.startDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long CASEID_COLUMN_BITMASK = 1L;

	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	public static final long EXTERNALTASKID_COLUMN_BITMASK = 4L;

	public static final long GROUPID_COLUMN_BITMASK = 8L;

	public static final long PROCESSSTATUS_COLUMN_BITMASK = 16L;

	public static final long ROWPROCESSED_COLUMN_BITMASK = 32L;

	public static final long UUID_COLUMN_BITMASK = 64L;

	public static final long STARTDATE_COLUMN_BITMASK = 128L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Task toModel(TaskSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Task model = new TaskImpl();

		model.setUuid(soapModel.getUuid());
		model.setTaskId(soapModel.getTaskId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setCreatedUserId(soapModel.getCreatedUserId());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCaseId(soapModel.getCaseId());
		model.setExternalTaskId(soapModel.getExternalTaskId());
		model.setPriority(soapModel.getPriority());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());
		model.setDueDate(soapModel.getDueDate());
		model.setTaskStatus(soapModel.getTaskStatus());
		model.setDescription(soapModel.getDescription());
		model.setProcessStatus(soapModel.getProcessStatus());
		model.setFailureDescription(soapModel.getFailureDescription());
		model.setRowProcessed(soapModel.getRowProcessed());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Task> toModels(TaskSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Task> models = new ArrayList<Task>(soapModels.length);

		for (TaskSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public TaskModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _taskId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTaskId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _taskId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Task.class;
	}

	@Override
	public String getModelClassName() {
		return Task.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Task, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Task, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Task, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Task)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Task, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Task, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Task)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Task, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Task, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Task>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Task.class.getClassLoader(), Task.class, ModelWrapper.class);

		try {
			Constructor<Task> constructor =
				(Constructor<Task>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Task, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Task, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Task, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Task, Object>>();
		Map<String, BiConsumer<Task, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Task, ?>>();

		attributeGetterFunctions.put("uuid", Task::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Task, String>)Task::setUuid);
		attributeGetterFunctions.put("taskId", Task::getTaskId);
		attributeSetterBiConsumers.put(
			"taskId", (BiConsumer<Task, Long>)Task::setTaskId);
		attributeGetterFunctions.put("groupId", Task::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Task, Long>)Task::setGroupId);
		attributeGetterFunctions.put("companyId", Task::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Task, Long>)Task::setCompanyId);
		attributeGetterFunctions.put("createDate", Task::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Task, Date>)Task::setCreateDate);
		attributeGetterFunctions.put("createdUserId", Task::getCreatedUserId);
		attributeSetterBiConsumers.put(
			"createdUserId", (BiConsumer<Task, Long>)Task::setCreatedUserId);
		attributeGetterFunctions.put("modifiedDate", Task::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Task, Date>)Task::setModifiedDate);
		attributeGetterFunctions.put("caseId", Task::getCaseId);
		attributeSetterBiConsumers.put(
			"caseId", (BiConsumer<Task, Long>)Task::setCaseId);
		attributeGetterFunctions.put("externalTaskId", Task::getExternalTaskId);
		attributeSetterBiConsumers.put(
			"externalTaskId", (BiConsumer<Task, Long>)Task::setExternalTaskId);
		attributeGetterFunctions.put("priority", Task::getPriority);
		attributeSetterBiConsumers.put(
			"priority", (BiConsumer<Task, String>)Task::setPriority);
		attributeGetterFunctions.put("startDate", Task::getStartDate);
		attributeSetterBiConsumers.put(
			"startDate", (BiConsumer<Task, Date>)Task::setStartDate);
		attributeGetterFunctions.put("endDate", Task::getEndDate);
		attributeSetterBiConsumers.put(
			"endDate", (BiConsumer<Task, Date>)Task::setEndDate);
		attributeGetterFunctions.put("dueDate", Task::getDueDate);
		attributeSetterBiConsumers.put(
			"dueDate", (BiConsumer<Task, Date>)Task::setDueDate);
		attributeGetterFunctions.put("taskStatus", Task::getTaskStatus);
		attributeSetterBiConsumers.put(
			"taskStatus", (BiConsumer<Task, String>)Task::setTaskStatus);
		attributeGetterFunctions.put("description", Task::getDescription);
		attributeSetterBiConsumers.put(
			"description", (BiConsumer<Task, String>)Task::setDescription);
		attributeGetterFunctions.put("processStatus", Task::getProcessStatus);
		attributeSetterBiConsumers.put(
			"processStatus", (BiConsumer<Task, String>)Task::setProcessStatus);
		attributeGetterFunctions.put(
			"failureDescription", Task::getFailureDescription);
		attributeSetterBiConsumers.put(
			"failureDescription",
			(BiConsumer<Task, String>)Task::setFailureDescription);
		attributeGetterFunctions.put("rowProcessed", Task::getRowProcessed);
		attributeSetterBiConsumers.put(
			"rowProcessed", (BiConsumer<Task, String>)Task::setRowProcessed);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getTaskId() {
		return _taskId;
	}

	@Override
	public void setTaskId(long taskId) {
		_taskId = taskId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public long getCreatedUserId() {
		return _createdUserId;
	}

	@Override
	public void setCreatedUserId(long createdUserId) {
		_createdUserId = createdUserId;
	}

	@Override
	public String getCreatedUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getCreatedUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setCreatedUserUuid(String createdUserUuid) {
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCaseId() {
		return _caseId;
	}

	@Override
	public void setCaseId(long caseId) {
		_columnBitmask |= CASEID_COLUMN_BITMASK;

		if (!_setOriginalCaseId) {
			_setOriginalCaseId = true;

			_originalCaseId = _caseId;
		}

		_caseId = caseId;
	}

	public long getOriginalCaseId() {
		return _originalCaseId;
	}

	@JSON
	@Override
	public long getExternalTaskId() {
		return _externalTaskId;
	}

	@Override
	public void setExternalTaskId(long externalTaskId) {
		_columnBitmask |= EXTERNALTASKID_COLUMN_BITMASK;

		if (!_setOriginalExternalTaskId) {
			_setOriginalExternalTaskId = true;

			_originalExternalTaskId = _externalTaskId;
		}

		_externalTaskId = externalTaskId;
	}

	public long getOriginalExternalTaskId() {
		return _originalExternalTaskId;
	}

	@JSON
	@Override
	public String getPriority() {
		if (_priority == null) {
			return "";
		}
		else {
			return _priority;
		}
	}

	@Override
	public void setPriority(String priority) {
		_priority = priority;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@JSON
	@Override
	public Date getDueDate() {
		return _dueDate;
	}

	@Override
	public void setDueDate(Date dueDate) {
		_dueDate = dueDate;
	}

	@JSON
	@Override
	public String getTaskStatus() {
		if (_taskStatus == null) {
			return "";
		}
		else {
			return _taskStatus;
		}
	}

	@Override
	public void setTaskStatus(String taskStatus) {
		_taskStatus = taskStatus;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getProcessStatus() {
		if (_processStatus == null) {
			return "";
		}
		else {
			return _processStatus;
		}
	}

	@Override
	public void setProcessStatus(String processStatus) {
		_columnBitmask |= PROCESSSTATUS_COLUMN_BITMASK;

		if (_originalProcessStatus == null) {
			_originalProcessStatus = _processStatus;
		}

		_processStatus = processStatus;
	}

	public String getOriginalProcessStatus() {
		return GetterUtil.getString(_originalProcessStatus);
	}

	@JSON
	@Override
	public String getFailureDescription() {
		if (_failureDescription == null) {
			return "";
		}
		else {
			return _failureDescription;
		}
	}

	@Override
	public void setFailureDescription(String failureDescription) {
		_failureDescription = failureDescription;
	}

	@JSON
	@Override
	public String getRowProcessed() {
		if (_rowProcessed == null) {
			return "";
		}
		else {
			return _rowProcessed;
		}
	}

	@Override
	public void setRowProcessed(String rowProcessed) {
		_columnBitmask |= ROWPROCESSED_COLUMN_BITMASK;

		if (_originalRowProcessed == null) {
			_originalRowProcessed = _rowProcessed;
		}

		_rowProcessed = rowProcessed;
	}

	public String getOriginalRowProcessed() {
		return GetterUtil.getString(_originalRowProcessed);
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Task.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Task.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Task toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Task>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TaskImpl taskImpl = new TaskImpl();

		taskImpl.setUuid(getUuid());
		taskImpl.setTaskId(getTaskId());
		taskImpl.setGroupId(getGroupId());
		taskImpl.setCompanyId(getCompanyId());
		taskImpl.setCreateDate(getCreateDate());
		taskImpl.setCreatedUserId(getCreatedUserId());
		taskImpl.setModifiedDate(getModifiedDate());
		taskImpl.setCaseId(getCaseId());
		taskImpl.setExternalTaskId(getExternalTaskId());
		taskImpl.setPriority(getPriority());
		taskImpl.setStartDate(getStartDate());
		taskImpl.setEndDate(getEndDate());
		taskImpl.setDueDate(getDueDate());
		taskImpl.setTaskStatus(getTaskStatus());
		taskImpl.setDescription(getDescription());
		taskImpl.setProcessStatus(getProcessStatus());
		taskImpl.setFailureDescription(getFailureDescription());
		taskImpl.setRowProcessed(getRowProcessed());

		taskImpl.resetOriginalValues();

		return taskImpl;
	}

	@Override
	public int compareTo(Task task) {
		int value = 0;

		value = DateUtil.compareTo(getStartDate(), task.getStartDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Task)) {
			return false;
		}

		Task task = (Task)object;

		long primaryKey = task.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalUuid = _uuid;

		_originalGroupId = _groupId;

		_setOriginalGroupId = false;

		_originalCompanyId = _companyId;

		_setOriginalCompanyId = false;

		_setModifiedDate = false;
		_originalCaseId = _caseId;

		_setOriginalCaseId = false;

		_originalExternalTaskId = _externalTaskId;

		_setOriginalExternalTaskId = false;

		_originalProcessStatus = _processStatus;

		_originalRowProcessed = _rowProcessed;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Task> toCacheModel() {
		TaskCacheModel taskCacheModel = new TaskCacheModel();

		taskCacheModel.uuid = getUuid();

		String uuid = taskCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			taskCacheModel.uuid = null;
		}

		taskCacheModel.taskId = getTaskId();

		taskCacheModel.groupId = getGroupId();

		taskCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			taskCacheModel.createDate = createDate.getTime();
		}
		else {
			taskCacheModel.createDate = Long.MIN_VALUE;
		}

		taskCacheModel.createdUserId = getCreatedUserId();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			taskCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			taskCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		taskCacheModel.caseId = getCaseId();

		taskCacheModel.externalTaskId = getExternalTaskId();

		taskCacheModel.priority = getPriority();

		String priority = taskCacheModel.priority;

		if ((priority != null) && (priority.length() == 0)) {
			taskCacheModel.priority = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			taskCacheModel.startDate = startDate.getTime();
		}
		else {
			taskCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			taskCacheModel.endDate = endDate.getTime();
		}
		else {
			taskCacheModel.endDate = Long.MIN_VALUE;
		}

		Date dueDate = getDueDate();

		if (dueDate != null) {
			taskCacheModel.dueDate = dueDate.getTime();
		}
		else {
			taskCacheModel.dueDate = Long.MIN_VALUE;
		}

		taskCacheModel.taskStatus = getTaskStatus();

		String taskStatus = taskCacheModel.taskStatus;

		if ((taskStatus != null) && (taskStatus.length() == 0)) {
			taskCacheModel.taskStatus = null;
		}

		taskCacheModel.description = getDescription();

		String description = taskCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			taskCacheModel.description = null;
		}

		taskCacheModel.processStatus = getProcessStatus();

		String processStatus = taskCacheModel.processStatus;

		if ((processStatus != null) && (processStatus.length() == 0)) {
			taskCacheModel.processStatus = null;
		}

		taskCacheModel.failureDescription = getFailureDescription();

		String failureDescription = taskCacheModel.failureDescription;

		if ((failureDescription != null) &&
			(failureDescription.length() == 0)) {

			taskCacheModel.failureDescription = null;
		}

		taskCacheModel.rowProcessed = getRowProcessed();

		String rowProcessed = taskCacheModel.rowProcessed;

		if ((rowProcessed != null) && (rowProcessed.length() == 0)) {
			taskCacheModel.rowProcessed = null;
		}

		return taskCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Task, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Task, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Task, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Task)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Task, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Task, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Task, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Task)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Task>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _taskId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private long _createdUserId;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _caseId;
	private long _originalCaseId;
	private boolean _setOriginalCaseId;
	private long _externalTaskId;
	private long _originalExternalTaskId;
	private boolean _setOriginalExternalTaskId;
	private String _priority;
	private Date _startDate;
	private Date _endDate;
	private Date _dueDate;
	private String _taskStatus;
	private String _description;
	private String _processStatus;
	private String _originalProcessStatus;
	private String _failureDescription;
	private String _rowProcessed;
	private String _originalRowProcessed;
	private long _columnBitmask;
	private Task _escapedModel;

}