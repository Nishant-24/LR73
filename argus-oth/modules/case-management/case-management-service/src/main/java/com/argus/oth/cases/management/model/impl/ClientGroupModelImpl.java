/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.argus.oth.cases.management.model.impl;

import com.argus.oth.cases.management.model.ClientGroup;
import com.argus.oth.cases.management.model.ClientGroupModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ClientGroup service. Represents a row in the &quot;OTH_ClientGroup&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ClientGroupModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ClientGroupImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ClientGroupImpl
 * @generated
 */
public class ClientGroupModelImpl
	extends BaseModelImpl<ClientGroup> implements ClientGroupModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a client group model instance should use the <code>ClientGroup</code> interface instead.
	 */
	public static final String TABLE_NAME = "OTH_ClientGroup";

	public static final Object[][] TABLE_COLUMNS = {
		{"clientGroupId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"externalClientGroupId", Types.BIGINT}, {"clientId", Types.BIGINT},
		{"clientGroup", Types.VARCHAR}, {"clientGroupName", Types.VARCHAR},
		{"rowProcessed", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("clientGroupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("externalClientGroupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("clientId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("clientGroup", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("clientGroupName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rowProcessed", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OTH_ClientGroup (clientGroupId LONG not null primary key,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,externalClientGroupId LONG,clientId LONG,clientGroup VARCHAR(75) null,clientGroupName VARCHAR(1000) null,rowProcessed VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table OTH_ClientGroup";

	public static final String ORDER_BY_JPQL =
		" ORDER BY clientGroup.clientGroupId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OTH_ClientGroup.clientGroupId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long EXTERNALCLIENTGROUPID_COLUMN_BITMASK = 1L;

	public static final long ROWPROCESSED_COLUMN_BITMASK = 2L;

	public static final long CLIENTGROUPID_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public ClientGroupModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _clientGroupId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setClientGroupId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _clientGroupId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ClientGroup.class;
	}

	@Override
	public String getModelClassName() {
		return ClientGroup.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ClientGroup, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ClientGroup, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ClientGroup, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ClientGroup)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ClientGroup, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ClientGroup, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ClientGroup)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ClientGroup, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ClientGroup, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ClientGroup>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ClientGroup.class.getClassLoader(), ClientGroup.class,
			ModelWrapper.class);

		try {
			Constructor<ClientGroup> constructor =
				(Constructor<ClientGroup>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ClientGroup, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ClientGroup, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ClientGroup, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ClientGroup, Object>>();
		Map<String, BiConsumer<ClientGroup, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ClientGroup, ?>>();

		attributeGetterFunctions.put(
			"clientGroupId", ClientGroup::getClientGroupId);
		attributeSetterBiConsumers.put(
			"clientGroupId",
			(BiConsumer<ClientGroup, Long>)ClientGroup::setClientGroupId);
		attributeGetterFunctions.put("groupId", ClientGroup::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<ClientGroup, Long>)ClientGroup::setGroupId);
		attributeGetterFunctions.put("companyId", ClientGroup::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<ClientGroup, Long>)ClientGroup::setCompanyId);
		attributeGetterFunctions.put("createDate", ClientGroup::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<ClientGroup, Date>)ClientGroup::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", ClientGroup::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<ClientGroup, Date>)ClientGroup::setModifiedDate);
		attributeGetterFunctions.put(
			"externalClientGroupId", ClientGroup::getExternalClientGroupId);
		attributeSetterBiConsumers.put(
			"externalClientGroupId",
			(BiConsumer<ClientGroup, Long>)
				ClientGroup::setExternalClientGroupId);
		attributeGetterFunctions.put("clientId", ClientGroup::getClientId);
		attributeSetterBiConsumers.put(
			"clientId",
			(BiConsumer<ClientGroup, Long>)ClientGroup::setClientId);
		attributeGetterFunctions.put(
			"clientGroup", ClientGroup::getClientGroup);
		attributeSetterBiConsumers.put(
			"clientGroup",
			(BiConsumer<ClientGroup, String>)ClientGroup::setClientGroup);
		attributeGetterFunctions.put(
			"clientGroupName", ClientGroup::getClientGroupName);
		attributeSetterBiConsumers.put(
			"clientGroupName",
			(BiConsumer<ClientGroup, String>)ClientGroup::setClientGroupName);
		attributeGetterFunctions.put(
			"rowProcessed", ClientGroup::getRowProcessed);
		attributeSetterBiConsumers.put(
			"rowProcessed",
			(BiConsumer<ClientGroup, String>)ClientGroup::setRowProcessed);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getClientGroupId() {
		return _clientGroupId;
	}

	@Override
	public void setClientGroupId(long clientGroupId) {
		_clientGroupId = clientGroupId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getExternalClientGroupId() {
		return _externalClientGroupId;
	}

	@Override
	public void setExternalClientGroupId(long externalClientGroupId) {
		_columnBitmask |= EXTERNALCLIENTGROUPID_COLUMN_BITMASK;

		if (!_setOriginalExternalClientGroupId) {
			_setOriginalExternalClientGroupId = true;

			_originalExternalClientGroupId = _externalClientGroupId;
		}

		_externalClientGroupId = externalClientGroupId;
	}

	public long getOriginalExternalClientGroupId() {
		return _originalExternalClientGroupId;
	}

	@Override
	public long getClientId() {
		return _clientId;
	}

	@Override
	public void setClientId(long clientId) {
		_clientId = clientId;
	}

	@Override
	public String getClientGroup() {
		if (_clientGroup == null) {
			return "";
		}
		else {
			return _clientGroup;
		}
	}

	@Override
	public void setClientGroup(String clientGroup) {
		_clientGroup = clientGroup;
	}

	@Override
	public String getClientGroupName() {
		if (_clientGroupName == null) {
			return "";
		}
		else {
			return _clientGroupName;
		}
	}

	@Override
	public void setClientGroupName(String clientGroupName) {
		_clientGroupName = clientGroupName;
	}

	@Override
	public String getRowProcessed() {
		if (_rowProcessed == null) {
			return "";
		}
		else {
			return _rowProcessed;
		}
	}

	@Override
	public void setRowProcessed(String rowProcessed) {
		_columnBitmask |= ROWPROCESSED_COLUMN_BITMASK;

		if (_originalRowProcessed == null) {
			_originalRowProcessed = _rowProcessed;
		}

		_rowProcessed = rowProcessed;
	}

	public String getOriginalRowProcessed() {
		return GetterUtil.getString(_originalRowProcessed);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ClientGroup.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ClientGroup toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ClientGroup>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ClientGroupImpl clientGroupImpl = new ClientGroupImpl();

		clientGroupImpl.setClientGroupId(getClientGroupId());
		clientGroupImpl.setGroupId(getGroupId());
		clientGroupImpl.setCompanyId(getCompanyId());
		clientGroupImpl.setCreateDate(getCreateDate());
		clientGroupImpl.setModifiedDate(getModifiedDate());
		clientGroupImpl.setExternalClientGroupId(getExternalClientGroupId());
		clientGroupImpl.setClientId(getClientId());
		clientGroupImpl.setClientGroup(getClientGroup());
		clientGroupImpl.setClientGroupName(getClientGroupName());
		clientGroupImpl.setRowProcessed(getRowProcessed());

		clientGroupImpl.resetOriginalValues();

		return clientGroupImpl;
	}

	@Override
	public int compareTo(ClientGroup clientGroup) {
		int value = 0;

		if (getClientGroupId() < clientGroup.getClientGroupId()) {
			value = -1;
		}
		else if (getClientGroupId() > clientGroup.getClientGroupId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ClientGroup)) {
			return false;
		}

		ClientGroup clientGroup = (ClientGroup)object;

		long primaryKey = clientGroup.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_setModifiedDate = false;
		_originalExternalClientGroupId = _externalClientGroupId;

		_setOriginalExternalClientGroupId = false;

		_originalRowProcessed = _rowProcessed;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ClientGroup> toCacheModel() {
		ClientGroupCacheModel clientGroupCacheModel =
			new ClientGroupCacheModel();

		clientGroupCacheModel.clientGroupId = getClientGroupId();

		clientGroupCacheModel.groupId = getGroupId();

		clientGroupCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			clientGroupCacheModel.createDate = createDate.getTime();
		}
		else {
			clientGroupCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			clientGroupCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			clientGroupCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		clientGroupCacheModel.externalClientGroupId =
			getExternalClientGroupId();

		clientGroupCacheModel.clientId = getClientId();

		clientGroupCacheModel.clientGroup = getClientGroup();

		String clientGroup = clientGroupCacheModel.clientGroup;

		if ((clientGroup != null) && (clientGroup.length() == 0)) {
			clientGroupCacheModel.clientGroup = null;
		}

		clientGroupCacheModel.clientGroupName = getClientGroupName();

		String clientGroupName = clientGroupCacheModel.clientGroupName;

		if ((clientGroupName != null) && (clientGroupName.length() == 0)) {
			clientGroupCacheModel.clientGroupName = null;
		}

		clientGroupCacheModel.rowProcessed = getRowProcessed();

		String rowProcessed = clientGroupCacheModel.rowProcessed;

		if ((rowProcessed != null) && (rowProcessed.length() == 0)) {
			clientGroupCacheModel.rowProcessed = null;
		}

		return clientGroupCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ClientGroup, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ClientGroup, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ClientGroup, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ClientGroup)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ClientGroup, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ClientGroup, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ClientGroup, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ClientGroup)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ClientGroup>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _clientGroupId;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _externalClientGroupId;
	private long _originalExternalClientGroupId;
	private boolean _setOriginalExternalClientGroupId;
	private long _clientId;
	private String _clientGroup;
	private String _clientGroupName;
	private String _rowProcessed;
	private String _originalRowProcessed;
	private long _columnBitmask;
	private ClientGroup _escapedModel;

}